/* Generated by Cython 3.0.11 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/tmp/pip-build-env-78g01swm/overlay/lib/python3.11/site-packages/gmpy2/gmp.h",
            "/tmp/pip-build-env-78g01swm/overlay/lib/python3.11/site-packages/gmpy2/gmpy2.h",
            "/tmp/pip-build-env-78g01swm/overlay/lib/python3.11/site-packages/gmpy2/mpc.h",
            "/tmp/pip-build-env-78g01swm/overlay/lib/python3.11/site-packages/gmpy2/mpfr.h"
        ],
        "include_dirs": [
            "/tmp/pip-build-env-78g01swm/overlay/lib/python3.11/site-packages/gmpy2"
        ],
        "language": "c++",
        "libraries": [
            "gmp",
            "gmpxx",
            "pplite",
            "m",
            "flint"
        ],
        "name": "pplite.polyhedron",
        "sources": [
            "pplite/polyhedron.pyx"
        ]
    },
    "module_name": "pplite.polyhedron"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__pplite__polyhedron
#define __PYX_HAVE_API__pplite__polyhedron
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include "gmp.h"
#include "mpfr.h"
#include "mpc.h"
#include "gmpy2.h"
#include "gmpxx.h"
#include "flint/fmpz.h"
#include "flint/fmpq.h"
#include "pplite/pplite.hh"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "pplite/polyhedron.pyx",
  "gmpy2.pxd",
  "<stringsource>",
  "pplite/linear_algebra.pxd",
  "pplite/constraint.pxd",
  "pplite/generators.pxd",
  "pplite/intervals.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* EnumClassDecl.proto */
#if defined (_MSC_VER)
  #if _MSC_VER >= 1910
    #define __PYX_ENUM_CLASS_DECL enum
  #else
    #define __PYX_ENUM_CLASS_DECL
  #endif
#else
  #define __PYX_ENUM_CLASS_DECL enum
#endif

/* #### Code section: numeric_typedefs ### */

/* "pplite_decl.pxd":29
 *         mpz_class operator%(mpz_class, mpz_class)
 * 
 * ctypedef mp_limb_t ulong             # <<<<<<<<<<<<<<
 * ctypedef mp_limb_signed_t slong
 * 
 */
typedef mp_limb_t __pyx_t_6pplite_11pplite_decl_ulong;

/* "pplite_decl.pxd":30
 * 
 * ctypedef mp_limb_t ulong
 * ctypedef mp_limb_signed_t slong             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "flint/fmpz.h":
 */
typedef mp_limb_signed_t __pyx_t_6pplite_11pplite_decl_slong;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_6pplite_14linear_algebra_Variable;
struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression;
struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression;
struct __pyx_obj_6pplite_10constraint_Constraint;
struct __pyx_obj_6pplite_10generators_PPliteGenerator;
struct __pyx_obj_6pplite_9intervals_Interval;
struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron;
struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel;
struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel;

/* "constraint.pxd":10
 *     cdef Con *thisptr
 * 
 * cdef enum ConType:             # <<<<<<<<<<<<<<
 *     EQUALITY
 *     NONSTRICT_INEQUALITY
 */
enum __pyx_t_6pplite_10constraint_ConType {
  __pyx_e_6pplite_10constraint_EQUALITY,
  __pyx_e_6pplite_10constraint_NONSTRICT_INEQUALITY,
  __pyx_e_6pplite_10constraint_STRICT_INEQUALITY
};

/* "generators.pxd":10
 *     cdef Gen *thisptr
 * 
 * cdef enum GenType:             # <<<<<<<<<<<<<<
 *     LINE
 *     RAY
 */
enum __pyx_t_6pplite_10generators_GenType {
  __pyx_e_6pplite_10generators_LINE,
  __pyx_e_6pplite_10generators_RAY,
  __pyx_e_6pplite_10generators_POINT,
  __pyx_e_6pplite_10generators_CLOSURE_POINT
};

/* "linear_algebra.pxd":5
 * from .pplite_decl cimport *
 * 
 * cdef class Variable:             # <<<<<<<<<<<<<<
 *     cdef Var *thisptr
 * 
 */
struct __pyx_obj_6pplite_14linear_algebra_Variable {
  PyObject_HEAD
  pplite::Var *thisptr;
};


/* "linear_algebra.pxd":8
 *     cdef Var *thisptr
 * 
 * cdef class Linear_Expression:             # <<<<<<<<<<<<<<
 *     cdef Linear_Expr *thisptr
 * 
 */
struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression {
  PyObject_HEAD
  pplite::Linear_Expr *thisptr;
};


/* "linear_algebra.pxd":11
 *     cdef Linear_Expr *thisptr
 * 
 * cdef class Affine_Expression:             # <<<<<<<<<<<<<<
 *     cdef Affine_Expr *thisptr
 */
struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression {
  PyObject_HEAD
  pplite::Affine_Expr *thisptr;
};


/* "constraint.pxd":7
 * cdef _make_Constraint_from_richcmp(lhs_, rhs_, op)
 * 
 * cdef class Constraint(object):             # <<<<<<<<<<<<<<
 *     cdef Con *thisptr
 * 
 */
struct __pyx_obj_6pplite_10constraint_Constraint {
  PyObject_HEAD
  pplite::Con *thisptr;
};


/* "generators.pxd":7
 * from .constraint cimport *
 * 
 * cdef class PPliteGenerator(object):             # <<<<<<<<<<<<<<
 *     cdef Gen *thisptr
 * 
 */
struct __pyx_obj_6pplite_10generators_PPliteGenerator {
  PyObject_HEAD
  pplite::Gen *thisptr;
};


/* "intervals.pxd":5
 * from .pplite_decl cimport *
 * 
 * cdef class Interval(object):             # <<<<<<<<<<<<<<
 *     cdef Itv interval
 * 
 */
struct __pyx_obj_6pplite_9intervals_Interval {
  PyObject_HEAD
  struct pplite::Itv interval;
};


/* "pplite/polyhedron.pxd":5
 * from .pplite_decl cimport *
 * 
 * cdef class NNC_Polyhedron(object):             # <<<<<<<<<<<<<<
 *     cdef Poly* thisptr
 * 
 */
struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron {
  PyObject_HEAD
  pplite::Poly *thisptr;
};


/* "pplite/polyhedron.pxd":8
 *     cdef Poly* thisptr
 * 
 * cdef class Polyhedron_Constraint_Rel(object):             # <<<<<<<<<<<<<<
 *     cdef Poly_Con_Rel* thisptr
 * 
 */
struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel {
  PyObject_HEAD
  pplite::Poly_Con_Rel *thisptr;
};


/* "pplite/polyhedron.pxd":11
 *     cdef Poly_Con_Rel* thisptr
 * 
 * cdef class Polyhedron_Generator_Rel(object):             # <<<<<<<<<<<<<<
 *     cdef Poly_Gen_Rel* thisptr
 * 
 */
struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel {
  PyObject_HEAD
  pplite::Poly_Gen_Rel *thisptr;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* py_dict_pop.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObject_Unicode.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))
#else
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Unicode(obj))
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_11
#define __PYX_HAVE_RT_ImportType_proto_3_0_11
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_11 {
   __Pyx_ImportType_CheckSize_Error_3_0_11 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_11 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_11 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_11(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "gmpy2" */

/* Module declarations from "gmpy2.gmpy2" */
static CYTHON_INLINE MPZ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPZ_From_mpz(mpz_srcptr); /*proto*/

/* Module declarations from "gmpy2" */

/* Module declarations from "pplite.pplite_decl" */

/* Module declarations from "cython" */

/* Module declarations from "pplite.integer_conversions" */
static PyObject *(*__pyx_f_6pplite_19integer_conversions_FLINT_Integer_to_Python)(pplite::FLINT_Integer &); /*proto*/
static pplite::FLINT_Integer (*__pyx_f_6pplite_19integer_conversions_Python_int_to_FLINT_Integer)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_6pplite_19integer_conversions_FLINT_Rational_to_Python)(pplite::FLINT_Rational &); /*proto*/
static pplite::FLINT_Rational (*__pyx_f_6pplite_19integer_conversions_Python_float_to_FLINT_Rational)(PyObject *); /*proto*/

/* Module declarations from "pplite.linear_algebra" */

/* Module declarations from "pplite.constraint" */

/* Module declarations from "pplite.generators" */

/* Module declarations from "pplite.intervals" */

/* Module declarations from "pplite.polyhedron" */
static __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_f_6pplite_10polyhedron_string_to_Topol(PyObject *); /*proto*/
static __PYX_ENUM_CLASS_DECL pplite::Spec_Elem __pyx_f_6pplite_10polyhedron_string_to_Spec_Elem(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "pplite.polyhedron"
extern int __pyx_module_is_main_pplite__polyhedron;
int __pyx_module_is_main_pplite__polyhedron = 0;

/* Implementation of "pplite.polyhedron" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
/* #### Code section: string_decls ### */
static const char __pyx_k_c[] = "c";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__4[] = "";
static const char __pyx_k__5[] = ", ";
static const char __pyx_k_ae[] = "ae";
static const char __pyx_k_cc[] = "cc";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_gg[] = "gg";
static const char __pyx_k_nn[] = "nn";
static const char __pyx_k_tt[] = "tt";
static const char __pyx_k_vv[] = "vv";
static const char __pyx_k_yy[] = "yy";
static const char __pyx_k_con[] = "con";
static const char __pyx_k_den[] = "den";
static const char __pyx_k_f_b[] = "f_b";
static const char __pyx_k_gen[] = "gen";
static const char __pyx_k_itv[] = "itv";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_nnc[] = "nnc";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_var[] = "var";
static const char __pyx_k__106[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_cons[] = "cons";
static const char __pyx_k_expr[] = "expr";
static const char __pyx_k_gens[] = "gens";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_boxed[] = "boxed";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_false[] = "false";
static const char __pyx_k_g_ptr[] = "g_ptr";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_p_c_r[] = "p_c_r";
static const char __pyx_k_p_g_r[] = "p_g_r";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_bboxed[] = "bboxed";
static const char __pyx_k_closed[] = "closed";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_equals[] = "equals";
static const char __pyx_k_inhomo[] = "inhomo";
static const char __pyx_k_m_swap[] = "m_swap";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_collapse[] = "collapse";
static const char __pyx_k_contains[] = "contains";
static const char __pyx_k_dim_type[] = "dim_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_is_empty[] = "is_empty";
static const char __pyx_k_itv_expr[] = "itv_expr";
static const char __pyx_k_minimize[] = "minimize";
static const char __pyx_k_nnc_poly[] = "nnc_poly";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_topology[] = "topology";
static const char __pyx_k_universe[] = "universe";
static const char __pyx_k_variable[] = "variable";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_check_inv[] = "check_inv";
static const char __pyx_k_generator[] = "generator";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_set_empty[] = "set_empty";
static const char __pyx_k_space_dim[] = "space_dim";
static const char __pyx_k_spec_elem[] = "spec_elem";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_affine_dim[] = "affine_dim";
static const char __pyx_k_constrains[] = "constrains";
static const char __pyx_k_constraint[] = "constraint";
static const char __pyx_k_expression[] = "expression";
static const char __pyx_k_from_below[] = "from_below";
static const char __pyx_k_gen_object[] = "gen_object";
static const char __pyx_k_generators[] = "generators";
static const char __pyx_k_get_bounds[] = "get_bounds";
static const char __pyx_k_is_bounded[] = "is_bounded";
static const char __pyx_k_linear_exp[] = "linear_exp";
static const char __pyx_k_other_poly[] = "other_poly";
static const char __pyx_k_unconstain[] = "unconstain";
static const char __pyx_k_affine_expr[] = "affine_expr";
static const char __pyx_k_constraints[] = "constraints";
static const char __pyx_k_denominator[] = "denominator";
static const char __pyx_k_geom_covers[] = "geom_covers";
static const char __pyx_k_is_universe[] = "is_universe";
static const char __pyx_k_join_assign[] = "join_assign";
static const char __pyx_k_affine_image[] = "affine_image";
static const char __pyx_k_get_bounds_v[] = "_get_bounds_v";
static const char __pyx_k_included_ptr[] = "included_ptr";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_is_minimized[] = "is_minimized";
static const char __pyx_k_iter_of_cons[] = "iter_of_cons";
static const char __pyx_k_iter_of_gens[] = "iter_of_gens";
static const char __pyx_k_set_topology[] = "set_topology";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_add_generator[] = "add_generator";
static const char __pyx_k_get_bounds_ae[] = "_get_bounds_ae";
static const char __pyx_k_num_disjuncts[] = "num_disjuncts";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_relation_with[] = "relation_with";
static const char __pyx_k_widing_assign[] = "widing_assign";
static const char __pyx_k_NNC_Polyhedron[] = "NNC_Polyhedron";
static const char __pyx_k_add_constraint[] = "add_constraint";
static const char __pyx_k_add_generators[] = "add_generators";
static const char __pyx_k_boxed_contains[] = "boxed_contains";
static const char __pyx_k_add_constraints[] = "add_constraints";
static const char __pyx_k_affine_preimage[] = "affine_preimage";
static const char __pyx_k_con_hull_assign[] = "con_hull_assign";
static const char __pyx_k_get_boundes_itv[] = "_get_boundes_itv";
static const char __pyx_k_relation_with_c[] = "_relation_with_c";
static const char __pyx_k_relation_with_g[] = "_relation_with_g";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_space_dimension[] = "space_dimension";
static const char __pyx_k_unconstain_many[] = "unconstain_many";
static const char __pyx_k_generator_vector[] = "generator_vector";
static const char __pyx_k_get_bounding_box[] = "get_bounding_box";
static const char __pyx_k_included_pointer[] = "included_pointer";
static const char __pyx_k_is_disjoint_from[] = "is_disjoint_from";
static const char __pyx_k_poly_hull_assign[] = "poly_hull_assign";
static const char __pyx_k_constraint_vector[] = "constraint_vector";
static const char __pyx_k_gen_or_constraint[] = "gen_or_constraint";
static const char __pyx_k_inhomogenous_term[] = "inhomogenous_term";
static const char __pyx_k_pplite_polyhedron[] = "pplite.polyhedron";
static const char __pyx_k_strictly_contains[] = "strictly_contains";
static const char __pyx_k_NNC_Polyhedron_max[] = "NNC_Polyhedron.max";
static const char __pyx_k_NNC_Polyhedron_min[] = "NNC_Polyhedron.min";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_unconstrainted[] = "get_unconstrainted";
static const char __pyx_k_num_min_constrains[] = "num_min_constrains";
static const char __pyx_k_num_min_generators[] = "num_min_generators";
static const char __pyx_k_time_elapse_assign[] = "time_elapse_assign";
static const char __pyx_k_intersection_assign[] = "intersection_assign";
static const char __pyx_k_disjunct_constraints[] = "disjunct_constraints";
static const char __pyx_k_NNC_Polyhedron_equals[] = "NNC_Polyhedron.equals";
static const char __pyx_k_NNC_Polyhedron_m_swap[] = "NNC_Polyhedron.m_swap";
static const char __pyx_k_is_bounded_expression[] = "is_bounded_expression";
static const char __pyx_k_is_necessarily_closed[] = "is_necessarily_closed";
static const char __pyx_k_parallel_affine_image[] = "parallel_affine_image";
static const char __pyx_k_pplite_polyhedron_pyx[] = "pplite/polyhedron.pyx";
static const char __pyx_k_normalized_constraints[] = "normalized_constraints";
static const char __pyx_k_poly_difference_assign[] = "poly_difference_assign";
static const char __pyx_k_NNC_Polyhedron_collapse[] = "NNC_Polyhedron.collapse";
static const char __pyx_k_NNC_Polyhedron_contains[] = "NNC_Polyhedron.contains";
static const char __pyx_k_NNC_Polyhedron_is_empty[] = "NNC_Polyhedron.is_empty";
static const char __pyx_k_NNC_Polyhedron_minimize[] = "NNC_Polyhedron.minimize";
static const char __pyx_k_NNC_Polyhedron_topology[] = "NNC_Polyhedron.topology";
static const char __pyx_k_is_topologically_closed[] = "is_topologically_closed";
static const char __pyx_k_variable_or_affine_expr[] = "variable_or_affine_expr";
static const char __pyx_k_NNC_Polyhedron_check_inv[] = "NNC_Polyhedron.check_inv";
static const char __pyx_k_NNC_Polyhedron_set_empty[] = "NNC_Polyhedron.set_empty";
static const char __pyx_k_NNC_Polyhedron_space_dim[] = "NNC_Polyhedron.space_dim";
static const char __pyx_k_Poly_Construction_Failed[] = "Poly Construction Failed";
static const char __pyx_k_Polyhedron_Generator_Rel[] = "Polyhedron_Generator_Rel";
static const char __pyx_k_iter_of_var_or_index_set[] = "iter_of_var_or_index_set";
static const char __pyx_k_NNC_Polyhedron_affine_dim[] = "NNC_Polyhedron.affine_dim";
static const char __pyx_k_NNC_Polyhedron_constrains[] = "NNC_Polyhedron.constrains";
static const char __pyx_k_NNC_Polyhedron_generators[] = "NNC_Polyhedron.generators";
static const char __pyx_k_NNC_Polyhedron_get_bounds[] = "NNC_Polyhedron.get_bounds";
static const char __pyx_k_NNC_Polyhedron_is_bounded[] = "NNC_Polyhedron.is_bounded";
static const char __pyx_k_NNC_Polyhedron_unconstain[] = "NNC_Polyhedron.unconstain";
static const char __pyx_k_Polyhedron_Constraint_Rel[] = "Polyhedron_Constraint_Rel";
static const char __pyx_k_NNC_Polyhedron_constraints[] = "NNC_Polyhedron.constraints";
static const char __pyx_k_NNC_Polyhedron_geom_covers[] = "NNC_Polyhedron.geom_covers";
static const char __pyx_k_NNC_Polyhedron_is_universe[] = "NNC_Polyhedron.is_universe";
static const char __pyx_k_NNC_Polyhedron_join_assign[] = "NNC_Polyhedron.join_assign";
static const char __pyx_k_topological_closure_assign[] = "topological_closure_assign";
static const char __pyx_k_NNC_Polyhedron_affine_image[] = "NNC_Polyhedron.affine_image";
static const char __pyx_k_NNC_Polyhedron_is_minimized[] = "NNC_Polyhedron.is_minimized";
static const char __pyx_k_NNC_Polyhedron_set_topology[] = "NNC_Polyhedron.set_topology";
static const char __pyx_k_NNC_Polyhedron__get_bounds_v[] = "NNC_Polyhedron._get_bounds_v";
static const char __pyx_k_NNC_Polyhedron_add_generator[] = "NNC_Polyhedron.add_generator";
static const char __pyx_k_NNC_Polyhedron_num_disjuncts[] = "NNC_Polyhedron.num_disjuncts";
static const char __pyx_k_NNC_Polyhedron_relation_with[] = "NNC_Polyhedron.relation_with";
static const char __pyx_k_NNC_Polyhedron_widing_assign[] = "NNC_Polyhedron.widing_assign";
static const char __pyx_k_NNC_Polyhedron__get_bounds_ae[] = "NNC_Polyhedron._get_bounds_ae";
static const char __pyx_k_NNC_Polyhedron_add_constraint[] = "NNC_Polyhedron.add_constraint";
static const char __pyx_k_NNC_Polyhedron_add_generators[] = "NNC_Polyhedron.add_generators";
static const char __pyx_k_NNC_Polyhedron_boxed_contains[] = "NNC_Polyhedron.boxed_contains";
static const char __pyx_k_Comparison_with_NNC_polys_only[] = "Comparison with NNC polys only!";
static const char __pyx_k_NNC_Polyhedron___reduce_cython[] = "NNC_Polyhedron.__reduce_cython__";
static const char __pyx_k_NNC_Polyhedron_add_constraints[] = "NNC_Polyhedron.add_constraints";
static const char __pyx_k_NNC_Polyhedron_affine_preimage[] = "NNC_Polyhedron.affine_preimage";
static const char __pyx_k_NNC_Polyhedron_con_hull_assign[] = "NNC_Polyhedron.con_hull_assign";
static const char __pyx_k_NNC_Polyhedron_unconstain_many[] = "NNC_Polyhedron.unconstain_many";
static const char __pyx_k_NNC_Polyhedron___init___line_94[] = "NNC_Polyhedron.__init__ (line 94)";
static const char __pyx_k_NNC_Polyhedron__get_boundes_itv[] = "NNC_Polyhedron._get_boundes_itv";
static const char __pyx_k_NNC_Polyhedron__relation_with_c[] = "NNC_Polyhedron._relation_with_c";
static const char __pyx_k_NNC_Polyhedron__relation_with_g[] = "NNC_Polyhedron._relation_with_g";
static const char __pyx_k_NNC_Polyhedron_get_bounding_box[] = "NNC_Polyhedron.get_bounding_box";
static const char __pyx_k_NNC_Polyhedron_is_disjoint_from[] = "NNC_Polyhedron.is_disjoint_from";
static const char __pyx_k_NNC_Polyhedron_is_topologically[] = "NNC_Polyhedron.is_topologically_closed";
static const char __pyx_k_NNC_Polyhedron_poly_hull_assign[] = "NNC_Polyhedron.poly_hull_assign";
static const char __pyx_k_TESTS_from_pplite_import_NNC_Po[] = "\n        TESTS::\n        >>> from pplite import NNC_Polyhedron\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\")\n        >>> P\n        false\n        >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n        >>> P_2\n        false\n        >>> P_2.equals(P)\n        True\n        >>> from pplite import Variable, Linear_Expression, Affine_Expression, Constraint\n        >>> A = Variable(0)\n        >>> P_3 = NNC_Polyhedron(dim_type = 1, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_3.add_constraint(A >= 0)\n        >>> P_3\n        x0>=0\n        >>> P_4 = NNC_Polyhedron(nnc_poly = P_3)\n        >>> P_4.add_constraint(A >= -10)\n        >>> P_4.add_constraint(A >= -5)\n        >>> P_4.add_constraint(A >= -2)\n        >>> P_4.add_constraint(A >= -1)\n        >>> P_4.add_constraint(A >= 0)\n        >>> P_3.equals(P_4)\n        True\n        >>> B = Variable(1)\n        >>> cons_list = [A >= 0, B == 5]\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraints(cons_list)\n        >>> P\n        x1-5==0, x0>=0\n        ";
static const char __pyx_k_Topology_type_conversion_failed[] = "Topology type conversion failed.";
static const char __pyx_k_class_NNC_Polyhedron_needs_to_b[] = ":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.";
static const char __pyx_k_expression_needs_to_be_of_class[] = "expression needs to be of :class:`Linear_Expression`.";
static const char __pyx_k_other_poly_needs_to_be_of_class[] = "other_poly needs to be of :class:`NNC_Polyhedron`";
static const char __pyx_k_A_class_PPliteGenerator_or_a_cla[] = "A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.";
static const char __pyx_k_A_class_Variable_or_a_class_Affi[] = "A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.";
static const char __pyx_k_NNC_Polyhedron___setstate_cython[] = "NNC_Polyhedron.__setstate_cython__";
static const char __pyx_k_NNC_Polyhedron_add_constraint_li[] = "NNC_Polyhedron.add_constraint (line 469)";
static const char __pyx_k_NNC_Polyhedron_add_constraints_l[] = "NNC_Polyhedron.add_constraints (line 524)";
static const char __pyx_k_NNC_Polyhedron_add_generator_lin[] = "NNC_Polyhedron.add_generator (line 542)";
static const char __pyx_k_NNC_Polyhedron_disjunct_constrai[] = "NNC_Polyhedron.disjunct_constraints";
static const char __pyx_k_NNC_Polyhedron_get_unconstrainte[] = "NNC_Polyhedron.get_unconstrainted";
static const char __pyx_k_NNC_Polyhedron_intersection_assi[] = "NNC_Polyhedron.intersection_assign";
static const char __pyx_k_NNC_Polyhedron_is_bounded_expres[] = "NNC_Polyhedron.is_bounded_expression";
static const char __pyx_k_NNC_Polyhedron_is_necessarily_cl[] = "NNC_Polyhedron.is_necessarily_closed";
static const char __pyx_k_NNC_Polyhedron_normalized_constr[] = "NNC_Polyhedron.normalized_constraints";
static const char __pyx_k_NNC_Polyhedron_num_min_constrain[] = "NNC_Polyhedron.num_min_constrains";
static const char __pyx_k_NNC_Polyhedron_num_min_generator[] = "NNC_Polyhedron.num_min_generators";
static const char __pyx_k_NNC_Polyhedron_parallel_affine_i[] = "NNC_Polyhedron.parallel_affine_image";
static const char __pyx_k_NNC_Polyhedron_poly_difference_a[] = "NNC_Polyhedron.poly_difference_assign";
static const char __pyx_k_NNC_Polyhedron_strictly_contains[] = "NNC_Polyhedron.strictly_contains";
static const char __pyx_k_NNC_Polyhedron_time_elapse_assig[] = "NNC_Polyhedron.time_elapse_assign";
static const char __pyx_k_NNC_Polyhedron_topological_closu[] = "NNC_Polyhedron.topological_closure_assign";
static const char __pyx_k_Polyhedron_Constraint_Rel___redu[] = "Polyhedron_Constraint_Rel.__reduce_cython__";
static const char __pyx_k_Polyhedron_Constraint_Rel___sets[] = "Polyhedron_Constraint_Rel.__setstate_cython__";
static const char __pyx_k_Polyhedron_Generator_Rel___reduc[] = "Polyhedron_Generator_Rel.__reduce_cython__";
static const char __pyx_k_Polyhedron_Generator_Rel___setst[] = "Polyhedron_Generator_Rel.__setstate_cython__";
static const char __pyx_k_Spec_Elem_type_conversion_failed[] = "Spec_Elem type conversion failed.";
static const char __pyx_k_double_check_inputs_of_construct[] = "double check inputs of constructor.";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_variable_needs_to_be_of_class_Va[] = "variable needs to be of :class:`Variable`.";
static const char __pyx_k_TESTS_from_pplite_import_NNC_Po_2[] = "\n        TESTS::\n        >>> from pplite import NNC_Polyhedron, Variable, Linear_Expression, Affine_Expression, Constraint, Point, Ray, Line, Closure_point\n        >>> A = Variable(0)\n        >>> P = NNC_Polyhedron(dim_type = 1, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraint(A >= 0)\n        >>> P\n        x0>=0\n        >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n        >>> P_2.add_constraint(A >= -10)\n        >>> P_2.add_constraint(A >= -5)\n        >>> P_2.add_constraint(A >= -2)\n        >>> P_2.add_constraint(A >= -1)\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.is_necessarily_closed()\n        False\n        >>> P_2.space_dim()\n        1\n        >>> P_2.equals(P)\n        True\n        >>> B = Variable(1)\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\") \n        >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n        >>> P.add_constraint(A == B)\n        >>> P_2 == P\n        True\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\") # addcons1 - test04\n        >>> P.add_constraint(A >= 0)\n        >>> P.add_constraint(A <= 2)\n        >>> P.add_constraint(A >= -1)\n        >>> P.add_constraint(B >= 1)\n        >>> P_2 =  NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.add_constraint(A <= 2)\n        >>> P_2.add_constraint(B >= 1)\n        >>> P_2 == P\n        True\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\") # addcons1 - test05\n        >>> P.add_constraint(B >= 0)\n        >>> P.add_constraint(B <= 2)\n        >>> P.add_constraint(A + B >= 1)\n        >>> P.add_constraint(A - B >= -1)\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\")\n        >>> P_2.add_generator(Point(B))\n        >>> P_2.add_generator(Ray(A))\n        >>> P_2.add_generator(Point(A+2*B))\n        >>> P_2.""add_generator(Point(A))\n        >>> P == P_2\n        True\n        ";
static const char __pyx_k_TESTS_from_pplite_import_NNC_Po_3[] = "\n        TESTS::\n        >>> from pplite import NNC_Polyhedron, Variable, Linear_Expression, Affine_Expression, Constraint\n        >>> A = Variable(0)\n        >>> B = Variable(1)\n        >>> cons_list = [A >= 0, B == 5]\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\") #TODO: Make nicer python constructors\n        >>> P.add_constraints(cons_list)\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.add_constraint(B == 5)\n        >>> P_2 == P\n        True\n        ";
static const char __pyx_k_TESTS_from_pplite_import_NNC_Po_4[] = "\n        TESTS::\n        >>> from pplite import NNC_Polyhedron, Variable, Linear_Expression, Affine_Expression, Constraint, Point, Closure_point, Ray, Line\n        >>> A = Variable(0)\n        >>> B = Variable(1)\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraint(A >= 0)\n        >>> P.add_constraint(B >= 0)\n        >>> P.add_constraint(A + B > 0)\n        >>> P.add_generator(Point())\n        >>> P.minimize()\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.add_constraint(B >= 0)\n        >>> P_2.minimize()\n        >>> P == P_2 # Test 01 finished\n        True\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraint(A >= 0)\n        >>> P.add_constraint(B >= 0)\n        >>> P.add_constraint(A + B > 0)\n        >>> P.add_generator(Ray(-A))\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(B >= 0)\n        >>> P == P_2 # Test 03 finished\n        True     \n        ";
/* #### Code section: decls ### */
static int __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron___init__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_kwrds); /* proto */
static int __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_2__cinit__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static void __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_4__dealloc__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_6__hash__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_8__repr__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_10__eq__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_12is_necessarily_closed(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_14check_inv(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_16is_empty(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_18is_universe(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_20is_minimized(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_22is_topologically_closed(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_24is_bounded(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_26is_bounded_expression(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_from_below, PyObject *__pyx_v_expression); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_28constrains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_30equals(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_32contains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_34strictly_contains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_36is_disjoint_from(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_38get_bounding_box(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_40boxed_contains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_42topology(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_44space_dim(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_46affine_dim(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_48_relation_with_c(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_constraint); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_50_relation_with_g(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_generator); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_52relation_with(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_gen_or_constraint); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_54min(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_affine_expr, PyObject *__pyx_v_value, PyObject *__pyx_v_included_pointer, PyObject *__pyx_v_gen_object); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_56max(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_affine_expr, PyObject *__pyx_v_value, PyObject *__pyx_v_included_pointer, PyObject *__pyx_v_gen_object); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_58_get_bounds_v(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_60_get_bounds_ae(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_affine_expr); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_62_get_boundes_itv(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_itv_expr); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_64get_bounds(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable_or_affine_expr); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_66get_unconstrainted(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_68constraints(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_70generators(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_72normalized_constraints(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_74num_min_constrains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_76num_min_generators(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_78collapse(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_80num_disjuncts(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_82disjunct_constraints(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_84geom_covers(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_86m_swap(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_88set_empty(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_90set_topology(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_topology); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_92add_constraint(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_constraint); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_94add_constraints(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_iter_of_cons); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_96add_generator(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_generator); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_98add_generators(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_iter_of_gens); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_100topological_closure_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_102unconstain(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_104unconstain_many(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_iter_of_var_or_index_set); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_106intersection_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_108join_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_110poly_hull_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_112con_hull_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly, PyObject *__pyx_v_boxed); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_114poly_difference_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_116affine_image(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable, PyObject *__pyx_v_linear_exp, PyObject *__pyx_v_inhomogenous_term, PyObject *__pyx_v_denominator); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_118affine_preimage(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable, PyObject *__pyx_v_linear_exp, PyObject *__pyx_v_inhomogenous_term, PyObject *__pyx_v_denominator); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_120parallel_affine_image(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_122widing_assign(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_124time_elapse_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_126minimize(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_128__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_130__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel___cinit__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self); /* proto */
static void __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_2__dealloc__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel___cinit__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self); /* proto */
static void __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_2__dealloc__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6pplite_10polyhedron_NNC_Polyhedron(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pplite_10polyhedron_Polyhedron_Constraint_Rel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pplite_10polyhedron_Polyhedron_Generator_Rel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpz;
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpq;
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpfr;
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_6pplite_14linear_algebra_Variable;
  PyTypeObject *__pyx_ptype_6pplite_14linear_algebra_Linear_Expression;
  PyTypeObject *__pyx_ptype_6pplite_14linear_algebra_Affine_Expression;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_6pplite_10constraint_Constraint;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_6pplite_10generators_PPliteGenerator;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_6pplite_9intervals_Interval;
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_6pplite_10polyhedron_NNC_Polyhedron;
  PyObject *__pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel;
  PyObject *__pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel;
  #endif
  PyTypeObject *__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron;
  PyTypeObject *__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel;
  PyTypeObject *__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel;
  PyObject *__pyx_kp_u_A_class_PPliteGenerator_or_a_cla;
  PyObject *__pyx_kp_u_A_class_Variable_or_a_class_Affi;
  PyObject *__pyx_kp_u_Comparison_with_NNC_polys_only;
  PyObject *__pyx_n_s_NNC_Polyhedron;
  PyObject *__pyx_kp_u_NNC_Polyhedron___init___line_94;
  PyObject *__pyx_n_s_NNC_Polyhedron___reduce_cython;
  PyObject *__pyx_n_s_NNC_Polyhedron___setstate_cython;
  PyObject *__pyx_n_s_NNC_Polyhedron__get_boundes_itv;
  PyObject *__pyx_n_s_NNC_Polyhedron__get_bounds_ae;
  PyObject *__pyx_n_s_NNC_Polyhedron__get_bounds_v;
  PyObject *__pyx_n_s_NNC_Polyhedron__relation_with_c;
  PyObject *__pyx_n_s_NNC_Polyhedron__relation_with_g;
  PyObject *__pyx_n_s_NNC_Polyhedron_add_constraint;
  PyObject *__pyx_kp_u_NNC_Polyhedron_add_constraint_li;
  PyObject *__pyx_n_s_NNC_Polyhedron_add_constraints;
  PyObject *__pyx_kp_u_NNC_Polyhedron_add_constraints_l;
  PyObject *__pyx_n_s_NNC_Polyhedron_add_generator;
  PyObject *__pyx_kp_u_NNC_Polyhedron_add_generator_lin;
  PyObject *__pyx_n_s_NNC_Polyhedron_add_generators;
  PyObject *__pyx_n_s_NNC_Polyhedron_affine_dim;
  PyObject *__pyx_n_s_NNC_Polyhedron_affine_image;
  PyObject *__pyx_n_s_NNC_Polyhedron_affine_preimage;
  PyObject *__pyx_n_s_NNC_Polyhedron_boxed_contains;
  PyObject *__pyx_n_s_NNC_Polyhedron_check_inv;
  PyObject *__pyx_n_s_NNC_Polyhedron_collapse;
  PyObject *__pyx_n_s_NNC_Polyhedron_con_hull_assign;
  PyObject *__pyx_n_s_NNC_Polyhedron_constrains;
  PyObject *__pyx_n_s_NNC_Polyhedron_constraints;
  PyObject *__pyx_n_s_NNC_Polyhedron_contains;
  PyObject *__pyx_n_s_NNC_Polyhedron_disjunct_constrai;
  PyObject *__pyx_n_s_NNC_Polyhedron_equals;
  PyObject *__pyx_n_s_NNC_Polyhedron_generators;
  PyObject *__pyx_n_s_NNC_Polyhedron_geom_covers;
  PyObject *__pyx_n_s_NNC_Polyhedron_get_bounding_box;
  PyObject *__pyx_n_s_NNC_Polyhedron_get_bounds;
  PyObject *__pyx_n_s_NNC_Polyhedron_get_unconstrainte;
  PyObject *__pyx_n_s_NNC_Polyhedron_intersection_assi;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_bounded;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_bounded_expres;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_disjoint_from;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_empty;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_minimized;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_necessarily_cl;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_topologically;
  PyObject *__pyx_n_s_NNC_Polyhedron_is_universe;
  PyObject *__pyx_n_s_NNC_Polyhedron_join_assign;
  PyObject *__pyx_n_s_NNC_Polyhedron_m_swap;
  PyObject *__pyx_n_s_NNC_Polyhedron_max;
  PyObject *__pyx_n_s_NNC_Polyhedron_min;
  PyObject *__pyx_n_s_NNC_Polyhedron_minimize;
  PyObject *__pyx_n_s_NNC_Polyhedron_normalized_constr;
  PyObject *__pyx_n_s_NNC_Polyhedron_num_disjuncts;
  PyObject *__pyx_n_s_NNC_Polyhedron_num_min_constrain;
  PyObject *__pyx_n_s_NNC_Polyhedron_num_min_generator;
  PyObject *__pyx_n_s_NNC_Polyhedron_parallel_affine_i;
  PyObject *__pyx_n_s_NNC_Polyhedron_poly_difference_a;
  PyObject *__pyx_n_s_NNC_Polyhedron_poly_hull_assign;
  PyObject *__pyx_n_s_NNC_Polyhedron_relation_with;
  PyObject *__pyx_n_s_NNC_Polyhedron_set_empty;
  PyObject *__pyx_n_s_NNC_Polyhedron_set_topology;
  PyObject *__pyx_n_s_NNC_Polyhedron_space_dim;
  PyObject *__pyx_n_s_NNC_Polyhedron_strictly_contains;
  PyObject *__pyx_n_s_NNC_Polyhedron_time_elapse_assig;
  PyObject *__pyx_n_s_NNC_Polyhedron_topological_closu;
  PyObject *__pyx_n_s_NNC_Polyhedron_topology;
  PyObject *__pyx_n_s_NNC_Polyhedron_unconstain;
  PyObject *__pyx_n_s_NNC_Polyhedron_unconstain_many;
  PyObject *__pyx_n_s_NNC_Polyhedron_widing_assign;
  PyObject *__pyx_kp_u_Poly_Construction_Failed;
  PyObject *__pyx_n_s_Polyhedron_Constraint_Rel;
  PyObject *__pyx_n_s_Polyhedron_Constraint_Rel___redu;
  PyObject *__pyx_n_s_Polyhedron_Constraint_Rel___sets;
  PyObject *__pyx_n_s_Polyhedron_Generator_Rel;
  PyObject *__pyx_n_s_Polyhedron_Generator_Rel___reduc;
  PyObject *__pyx_n_s_Polyhedron_Generator_Rel___setst;
  PyObject *__pyx_kp_u_Spec_Elem_type_conversion_failed;
  PyObject *__pyx_kp_u_TESTS_from_pplite_import_NNC_Po;
  PyObject *__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_2;
  PyObject *__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_3;
  PyObject *__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_4;
  PyObject *__pyx_kp_u_Topology_type_conversion_failed;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s__106;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_n_s_add_constraint;
  PyObject *__pyx_n_s_add_constraints;
  PyObject *__pyx_n_s_add_generator;
  PyObject *__pyx_n_s_add_generators;
  PyObject *__pyx_n_s_ae;
  PyObject *__pyx_n_s_affine_dim;
  PyObject *__pyx_n_s_affine_expr;
  PyObject *__pyx_n_s_affine_image;
  PyObject *__pyx_n_s_affine_preimage;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_bboxed;
  PyObject *__pyx_n_s_boxed;
  PyObject *__pyx_n_s_boxed_contains;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_s_cc;
  PyObject *__pyx_n_s_check_inv;
  PyObject *__pyx_kp_u_class_NNC_Polyhedron_needs_to_b;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_u_closed;
  PyObject *__pyx_n_s_collapse;
  PyObject *__pyx_n_s_con;
  PyObject *__pyx_n_s_con_hull_assign;
  PyObject *__pyx_n_u_cons;
  PyObject *__pyx_n_s_constrains;
  PyObject *__pyx_n_s_constraint;
  PyObject *__pyx_n_s_constraint_vector;
  PyObject *__pyx_n_s_constraints;
  PyObject *__pyx_n_s_contains;
  PyObject *__pyx_n_s_den;
  PyObject *__pyx_n_s_denominator;
  PyObject *__pyx_n_u_dim_type;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_disjunct_constraints;
  PyObject *__pyx_kp_u_double_check_inputs_of_construct;
  PyObject *__pyx_n_u_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_equals;
  PyObject *__pyx_n_s_expr;
  PyObject *__pyx_n_s_expression;
  PyObject *__pyx_kp_u_expression_needs_to_be_of_class;
  PyObject *__pyx_n_s_f_b;
  PyObject *__pyx_n_u_false;
  PyObject *__pyx_n_s_from_below;
  PyObject *__pyx_n_s_g;
  PyObject *__pyx_n_s_g_ptr;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_gen;
  PyObject *__pyx_n_s_gen_object;
  PyObject *__pyx_n_s_gen_or_constraint;
  PyObject *__pyx_n_s_generator;
  PyObject *__pyx_n_s_generator_vector;
  PyObject *__pyx_n_s_generators;
  PyObject *__pyx_n_u_gens;
  PyObject *__pyx_n_s_geom_covers;
  PyObject *__pyx_n_s_get_boundes_itv;
  PyObject *__pyx_n_s_get_bounding_box;
  PyObject *__pyx_n_s_get_bounds;
  PyObject *__pyx_n_s_get_bounds_ae;
  PyObject *__pyx_n_s_get_bounds_v;
  PyObject *__pyx_n_s_get_unconstrainted;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_gg;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_included_pointer;
  PyObject *__pyx_n_s_included_ptr;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_inhomo;
  PyObject *__pyx_n_s_inhomogenous_term;
  PyObject *__pyx_n_s_intersection_assign;
  PyObject *__pyx_n_s_is_bounded;
  PyObject *__pyx_n_s_is_bounded_expression;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_disjoint_from;
  PyObject *__pyx_n_s_is_empty;
  PyObject *__pyx_n_s_is_minimized;
  PyObject *__pyx_n_s_is_necessarily_closed;
  PyObject *__pyx_n_s_is_topologically_closed;
  PyObject *__pyx_n_s_is_universe;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_iter_of_cons;
  PyObject *__pyx_n_s_iter_of_gens;
  PyObject *__pyx_n_s_iter_of_var_or_index_set;
  PyObject *__pyx_n_s_itv;
  PyObject *__pyx_n_s_itv_expr;
  PyObject *__pyx_n_s_join_assign;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_linear_exp;
  PyObject *__pyx_n_s_m_swap;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_min;
  PyObject *__pyx_n_s_minimize;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_nn;
  PyObject *__pyx_n_u_nnc;
  PyObject *__pyx_n_u_nnc_poly;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_normalized_constraints;
  PyObject *__pyx_n_s_num_disjuncts;
  PyObject *__pyx_n_s_num_min_constrains;
  PyObject *__pyx_n_s_num_min_generators;
  PyObject *__pyx_n_s_other_poly;
  PyObject *__pyx_kp_u_other_poly_needs_to_be_of_class;
  PyObject *__pyx_n_s_p_c_r;
  PyObject *__pyx_n_s_p_g_r;
  PyObject *__pyx_n_s_parallel_affine_image;
  PyObject *__pyx_n_s_poly_difference_assign;
  PyObject *__pyx_n_s_poly_hull_assign;
  PyObject *__pyx_n_s_pop;
  PyObject *__pyx_n_s_pplite_polyhedron;
  PyObject *__pyx_kp_s_pplite_polyhedron_pyx;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_relation_with;
  PyObject *__pyx_n_s_relation_with_c;
  PyObject *__pyx_n_s_relation_with_g;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_set_empty;
  PyObject *__pyx_n_s_set_topology;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_space_dim;
  PyObject *__pyx_n_s_space_dimension;
  PyObject *__pyx_n_u_spec_elem;
  PyObject *__pyx_n_s_strictly_contains;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_time_elapse_assign;
  PyObject *__pyx_n_s_topological_closure_assign;
  PyObject *__pyx_n_s_topology;
  PyObject *__pyx_n_u_topology;
  PyObject *__pyx_n_s_tt;
  PyObject *__pyx_n_s_unconstain;
  PyObject *__pyx_n_s_unconstain_many;
  PyObject *__pyx_n_u_universe;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_val;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_var;
  PyObject *__pyx_n_s_variable;
  PyObject *__pyx_kp_u_variable_needs_to_be_of_class_Va;
  PyObject *__pyx_n_s_variable_or_affine_expr;
  PyObject *__pyx_n_s_vv;
  PyObject *__pyx_n_s_widing_assign;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_n_s_yy;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__83;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__94;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__84;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__105;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpz);
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpq);
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpfr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpc);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_14linear_algebra_Variable);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_10constraint_Constraint);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_10generators_PPliteGenerator);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_9intervals_Interval);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);
  Py_CLEAR(clear_module_state->__pyx_type_6pplite_10polyhedron_NNC_Polyhedron);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel);
  Py_CLEAR(clear_module_state->__pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel);
  Py_CLEAR(clear_module_state->__pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel);
  Py_CLEAR(clear_module_state->__pyx_kp_u_A_class_PPliteGenerator_or_a_cla);
  Py_CLEAR(clear_module_state->__pyx_kp_u_A_class_Variable_or_a_class_Affi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Comparison_with_NNC_polys_only);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron);
  Py_CLEAR(clear_module_state->__pyx_kp_u_NNC_Polyhedron___init___line_94);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron__get_boundes_itv);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron__get_bounds_ae);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron__get_bounds_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron__relation_with_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron__relation_with_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_add_constraint);
  Py_CLEAR(clear_module_state->__pyx_kp_u_NNC_Polyhedron_add_constraint_li);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_add_constraints);
  Py_CLEAR(clear_module_state->__pyx_kp_u_NNC_Polyhedron_add_constraints_l);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_add_generator);
  Py_CLEAR(clear_module_state->__pyx_kp_u_NNC_Polyhedron_add_generator_lin);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_add_generators);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_affine_dim);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_affine_image);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_affine_preimage);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_boxed_contains);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_check_inv);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_collapse);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_con_hull_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_constrains);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_constraints);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_contains);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_disjunct_constrai);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_equals);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_generators);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_geom_covers);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_get_bounding_box);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_get_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_get_unconstrainte);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_intersection_assi);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_bounded);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_bounded_expres);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_disjoint_from);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_empty);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_minimized);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_necessarily_cl);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_topologically);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_is_universe);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_join_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_m_swap);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_minimize);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_normalized_constr);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_num_disjuncts);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_num_min_constrain);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_num_min_generator);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_parallel_affine_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_poly_difference_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_poly_hull_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_relation_with);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_set_empty);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_set_topology);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_space_dim);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_strictly_contains);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_time_elapse_assig);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_topological_closu);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_topology);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_unconstain);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_unconstain_many);
  Py_CLEAR(clear_module_state->__pyx_n_s_NNC_Polyhedron_widing_assign);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Poly_Construction_Failed);
  Py_CLEAR(clear_module_state->__pyx_n_s_Polyhedron_Constraint_Rel);
  Py_CLEAR(clear_module_state->__pyx_n_s_Polyhedron_Constraint_Rel___redu);
  Py_CLEAR(clear_module_state->__pyx_n_s_Polyhedron_Constraint_Rel___sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_Polyhedron_Generator_Rel);
  Py_CLEAR(clear_module_state->__pyx_n_s_Polyhedron_Generator_Rel___reduc);
  Py_CLEAR(clear_module_state->__pyx_n_s_Polyhedron_Generator_Rel___setst);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Spec_Elem_type_conversion_failed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po);
  Py_CLEAR(clear_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_3);
  Py_CLEAR(clear_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_4);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Topology_type_conversion_failed);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s__106);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_kp_u__5);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_constraint);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_constraints);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_generator);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_generators);
  Py_CLEAR(clear_module_state->__pyx_n_s_ae);
  Py_CLEAR(clear_module_state->__pyx_n_s_affine_dim);
  Py_CLEAR(clear_module_state->__pyx_n_s_affine_expr);
  Py_CLEAR(clear_module_state->__pyx_n_s_affine_image);
  Py_CLEAR(clear_module_state->__pyx_n_s_affine_preimage);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_bboxed);
  Py_CLEAR(clear_module_state->__pyx_n_s_boxed);
  Py_CLEAR(clear_module_state->__pyx_n_s_boxed_contains);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_cc);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_inv);
  Py_CLEAR(clear_module_state->__pyx_kp_u_class_NNC_Polyhedron_needs_to_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_u_closed);
  Py_CLEAR(clear_module_state->__pyx_n_s_collapse);
  Py_CLEAR(clear_module_state->__pyx_n_s_con);
  Py_CLEAR(clear_module_state->__pyx_n_s_con_hull_assign);
  Py_CLEAR(clear_module_state->__pyx_n_u_cons);
  Py_CLEAR(clear_module_state->__pyx_n_s_constrains);
  Py_CLEAR(clear_module_state->__pyx_n_s_constraint);
  Py_CLEAR(clear_module_state->__pyx_n_s_constraint_vector);
  Py_CLEAR(clear_module_state->__pyx_n_s_constraints);
  Py_CLEAR(clear_module_state->__pyx_n_s_contains);
  Py_CLEAR(clear_module_state->__pyx_n_s_den);
  Py_CLEAR(clear_module_state->__pyx_n_s_denominator);
  Py_CLEAR(clear_module_state->__pyx_n_u_dim_type);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_disjunct_constraints);
  Py_CLEAR(clear_module_state->__pyx_kp_u_double_check_inputs_of_construct);
  Py_CLEAR(clear_module_state->__pyx_n_u_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_equals);
  Py_CLEAR(clear_module_state->__pyx_n_s_expr);
  Py_CLEAR(clear_module_state->__pyx_n_s_expression);
  Py_CLEAR(clear_module_state->__pyx_kp_u_expression_needs_to_be_of_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_f_b);
  Py_CLEAR(clear_module_state->__pyx_n_u_false);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_below);
  Py_CLEAR(clear_module_state->__pyx_n_s_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_g_ptr);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_gen);
  Py_CLEAR(clear_module_state->__pyx_n_s_gen_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_gen_or_constraint);
  Py_CLEAR(clear_module_state->__pyx_n_s_generator);
  Py_CLEAR(clear_module_state->__pyx_n_s_generator_vector);
  Py_CLEAR(clear_module_state->__pyx_n_s_generators);
  Py_CLEAR(clear_module_state->__pyx_n_u_gens);
  Py_CLEAR(clear_module_state->__pyx_n_s_geom_covers);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_boundes_itv);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_bounding_box);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_bounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_bounds_ae);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_bounds_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_unconstrainted);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_gg);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_included_pointer);
  Py_CLEAR(clear_module_state->__pyx_n_s_included_ptr);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_inhomo);
  Py_CLEAR(clear_module_state->__pyx_n_s_inhomogenous_term);
  Py_CLEAR(clear_module_state->__pyx_n_s_intersection_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_bounded);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_bounded_expression);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_disjoint_from);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_empty);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_minimized);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_necessarily_closed);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_topologically_closed);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_universe);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_of_cons);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_of_gens);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_of_var_or_index_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_itv);
  Py_CLEAR(clear_module_state->__pyx_n_s_itv_expr);
  Py_CLEAR(clear_module_state->__pyx_n_s_join_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_linear_exp);
  Py_CLEAR(clear_module_state->__pyx_n_s_m_swap);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_minimize);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_nn);
  Py_CLEAR(clear_module_state->__pyx_n_u_nnc);
  Py_CLEAR(clear_module_state->__pyx_n_u_nnc_poly);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_normalized_constraints);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_disjuncts);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_min_constrains);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_min_generators);
  Py_CLEAR(clear_module_state->__pyx_n_s_other_poly);
  Py_CLEAR(clear_module_state->__pyx_kp_u_other_poly_needs_to_be_of_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_p_c_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_p_g_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_parallel_affine_image);
  Py_CLEAR(clear_module_state->__pyx_n_s_poly_difference_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_poly_hull_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_pop);
  Py_CLEAR(clear_module_state->__pyx_n_s_pplite_polyhedron);
  Py_CLEAR(clear_module_state->__pyx_kp_s_pplite_polyhedron_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_relation_with);
  Py_CLEAR(clear_module_state->__pyx_n_s_relation_with_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_relation_with_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_empty);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_topology);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_space_dim);
  Py_CLEAR(clear_module_state->__pyx_n_s_space_dimension);
  Py_CLEAR(clear_module_state->__pyx_n_u_spec_elem);
  Py_CLEAR(clear_module_state->__pyx_n_s_strictly_contains);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_time_elapse_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_topological_closure_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_topology);
  Py_CLEAR(clear_module_state->__pyx_n_u_topology);
  Py_CLEAR(clear_module_state->__pyx_n_s_tt);
  Py_CLEAR(clear_module_state->__pyx_n_s_unconstain);
  Py_CLEAR(clear_module_state->__pyx_n_s_unconstain_many);
  Py_CLEAR(clear_module_state->__pyx_n_u_universe);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_val);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_var);
  Py_CLEAR(clear_module_state->__pyx_n_s_variable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_variable_needs_to_be_of_class_Va);
  Py_CLEAR(clear_module_state->__pyx_n_s_variable_or_affine_expr);
  Py_CLEAR(clear_module_state->__pyx_n_s_vv);
  Py_CLEAR(clear_module_state->__pyx_n_s_widing_assign);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_n_s_yy);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__83);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__94);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__84);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpz);
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpq);
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpfr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpc);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_14linear_algebra_Variable);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_10constraint_Constraint);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_10generators_PPliteGenerator);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_9intervals_Interval);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);
  Py_VISIT(traverse_module_state->__pyx_type_6pplite_10polyhedron_NNC_Polyhedron);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel);
  Py_VISIT(traverse_module_state->__pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel);
  Py_VISIT(traverse_module_state->__pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel);
  Py_VISIT(traverse_module_state->__pyx_kp_u_A_class_PPliteGenerator_or_a_cla);
  Py_VISIT(traverse_module_state->__pyx_kp_u_A_class_Variable_or_a_class_Affi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Comparison_with_NNC_polys_only);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron);
  Py_VISIT(traverse_module_state->__pyx_kp_u_NNC_Polyhedron___init___line_94);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron__get_boundes_itv);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron__get_bounds_ae);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron__get_bounds_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron__relation_with_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron__relation_with_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_add_constraint);
  Py_VISIT(traverse_module_state->__pyx_kp_u_NNC_Polyhedron_add_constraint_li);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_add_constraints);
  Py_VISIT(traverse_module_state->__pyx_kp_u_NNC_Polyhedron_add_constraints_l);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_add_generator);
  Py_VISIT(traverse_module_state->__pyx_kp_u_NNC_Polyhedron_add_generator_lin);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_add_generators);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_affine_dim);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_affine_image);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_affine_preimage);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_boxed_contains);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_check_inv);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_collapse);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_con_hull_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_constrains);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_constraints);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_contains);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_disjunct_constrai);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_equals);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_generators);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_geom_covers);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_get_bounding_box);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_get_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_get_unconstrainte);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_intersection_assi);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_bounded);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_bounded_expres);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_disjoint_from);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_empty);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_minimized);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_necessarily_cl);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_topologically);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_is_universe);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_join_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_m_swap);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_minimize);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_normalized_constr);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_num_disjuncts);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_num_min_constrain);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_num_min_generator);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_parallel_affine_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_poly_difference_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_poly_hull_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_relation_with);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_set_empty);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_set_topology);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_space_dim);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_strictly_contains);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_time_elapse_assig);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_topological_closu);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_topology);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_unconstain);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_unconstain_many);
  Py_VISIT(traverse_module_state->__pyx_n_s_NNC_Polyhedron_widing_assign);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Poly_Construction_Failed);
  Py_VISIT(traverse_module_state->__pyx_n_s_Polyhedron_Constraint_Rel);
  Py_VISIT(traverse_module_state->__pyx_n_s_Polyhedron_Constraint_Rel___redu);
  Py_VISIT(traverse_module_state->__pyx_n_s_Polyhedron_Constraint_Rel___sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_Polyhedron_Generator_Rel);
  Py_VISIT(traverse_module_state->__pyx_n_s_Polyhedron_Generator_Rel___reduc);
  Py_VISIT(traverse_module_state->__pyx_n_s_Polyhedron_Generator_Rel___setst);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Spec_Elem_type_conversion_failed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po);
  Py_VISIT(traverse_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_3);
  Py_VISIT(traverse_module_state->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_4);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Topology_type_conversion_failed);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s__106);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_kp_u__5);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_constraint);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_constraints);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_generator);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_generators);
  Py_VISIT(traverse_module_state->__pyx_n_s_ae);
  Py_VISIT(traverse_module_state->__pyx_n_s_affine_dim);
  Py_VISIT(traverse_module_state->__pyx_n_s_affine_expr);
  Py_VISIT(traverse_module_state->__pyx_n_s_affine_image);
  Py_VISIT(traverse_module_state->__pyx_n_s_affine_preimage);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_bboxed);
  Py_VISIT(traverse_module_state->__pyx_n_s_boxed);
  Py_VISIT(traverse_module_state->__pyx_n_s_boxed_contains);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_cc);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_inv);
  Py_VISIT(traverse_module_state->__pyx_kp_u_class_NNC_Polyhedron_needs_to_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_u_closed);
  Py_VISIT(traverse_module_state->__pyx_n_s_collapse);
  Py_VISIT(traverse_module_state->__pyx_n_s_con);
  Py_VISIT(traverse_module_state->__pyx_n_s_con_hull_assign);
  Py_VISIT(traverse_module_state->__pyx_n_u_cons);
  Py_VISIT(traverse_module_state->__pyx_n_s_constrains);
  Py_VISIT(traverse_module_state->__pyx_n_s_constraint);
  Py_VISIT(traverse_module_state->__pyx_n_s_constraint_vector);
  Py_VISIT(traverse_module_state->__pyx_n_s_constraints);
  Py_VISIT(traverse_module_state->__pyx_n_s_contains);
  Py_VISIT(traverse_module_state->__pyx_n_s_den);
  Py_VISIT(traverse_module_state->__pyx_n_s_denominator);
  Py_VISIT(traverse_module_state->__pyx_n_u_dim_type);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_disjunct_constraints);
  Py_VISIT(traverse_module_state->__pyx_kp_u_double_check_inputs_of_construct);
  Py_VISIT(traverse_module_state->__pyx_n_u_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_equals);
  Py_VISIT(traverse_module_state->__pyx_n_s_expr);
  Py_VISIT(traverse_module_state->__pyx_n_s_expression);
  Py_VISIT(traverse_module_state->__pyx_kp_u_expression_needs_to_be_of_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_f_b);
  Py_VISIT(traverse_module_state->__pyx_n_u_false);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_below);
  Py_VISIT(traverse_module_state->__pyx_n_s_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_g_ptr);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_gen);
  Py_VISIT(traverse_module_state->__pyx_n_s_gen_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_gen_or_constraint);
  Py_VISIT(traverse_module_state->__pyx_n_s_generator);
  Py_VISIT(traverse_module_state->__pyx_n_s_generator_vector);
  Py_VISIT(traverse_module_state->__pyx_n_s_generators);
  Py_VISIT(traverse_module_state->__pyx_n_u_gens);
  Py_VISIT(traverse_module_state->__pyx_n_s_geom_covers);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_boundes_itv);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_bounding_box);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_bounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_bounds_ae);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_bounds_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_unconstrainted);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_gg);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_included_pointer);
  Py_VISIT(traverse_module_state->__pyx_n_s_included_ptr);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_inhomo);
  Py_VISIT(traverse_module_state->__pyx_n_s_inhomogenous_term);
  Py_VISIT(traverse_module_state->__pyx_n_s_intersection_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_bounded);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_bounded_expression);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_disjoint_from);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_empty);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_minimized);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_necessarily_closed);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_topologically_closed);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_universe);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_of_cons);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_of_gens);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_of_var_or_index_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_itv);
  Py_VISIT(traverse_module_state->__pyx_n_s_itv_expr);
  Py_VISIT(traverse_module_state->__pyx_n_s_join_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_linear_exp);
  Py_VISIT(traverse_module_state->__pyx_n_s_m_swap);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_minimize);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_nn);
  Py_VISIT(traverse_module_state->__pyx_n_u_nnc);
  Py_VISIT(traverse_module_state->__pyx_n_u_nnc_poly);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_normalized_constraints);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_disjuncts);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_min_constrains);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_min_generators);
  Py_VISIT(traverse_module_state->__pyx_n_s_other_poly);
  Py_VISIT(traverse_module_state->__pyx_kp_u_other_poly_needs_to_be_of_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_p_c_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_p_g_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_parallel_affine_image);
  Py_VISIT(traverse_module_state->__pyx_n_s_poly_difference_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_poly_hull_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_pop);
  Py_VISIT(traverse_module_state->__pyx_n_s_pplite_polyhedron);
  Py_VISIT(traverse_module_state->__pyx_kp_s_pplite_polyhedron_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_relation_with);
  Py_VISIT(traverse_module_state->__pyx_n_s_relation_with_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_relation_with_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_empty);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_topology);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_space_dim);
  Py_VISIT(traverse_module_state->__pyx_n_s_space_dimension);
  Py_VISIT(traverse_module_state->__pyx_n_u_spec_elem);
  Py_VISIT(traverse_module_state->__pyx_n_s_strictly_contains);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_time_elapse_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_topological_closure_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_topology);
  Py_VISIT(traverse_module_state->__pyx_n_u_topology);
  Py_VISIT(traverse_module_state->__pyx_n_s_tt);
  Py_VISIT(traverse_module_state->__pyx_n_s_unconstain);
  Py_VISIT(traverse_module_state->__pyx_n_s_unconstain_many);
  Py_VISIT(traverse_module_state->__pyx_n_u_universe);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_val);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_var);
  Py_VISIT(traverse_module_state->__pyx_n_s_variable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_variable_needs_to_be_of_class_Va);
  Py_VISIT(traverse_module_state->__pyx_n_s_variable_or_affine_expr);
  Py_VISIT(traverse_module_state->__pyx_n_s_vv);
  Py_VISIT(traverse_module_state->__pyx_n_s_widing_assign);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_n_s_yy);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__83);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__94);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__84);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5gmpy2_5gmpy2_mpz __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpz
#define __pyx_ptype_5gmpy2_5gmpy2_mpq __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpq
#define __pyx_ptype_5gmpy2_5gmpy2_mpfr __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpfr
#define __pyx_ptype_5gmpy2_5gmpy2_mpc __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_6pplite_14linear_algebra_Variable __pyx_mstate_global->__pyx_ptype_6pplite_14linear_algebra_Variable
#define __pyx_ptype_6pplite_14linear_algebra_Linear_Expression __pyx_mstate_global->__pyx_ptype_6pplite_14linear_algebra_Linear_Expression
#define __pyx_ptype_6pplite_14linear_algebra_Affine_Expression __pyx_mstate_global->__pyx_ptype_6pplite_14linear_algebra_Affine_Expression
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_6pplite_10constraint_Constraint __pyx_mstate_global->__pyx_ptype_6pplite_10constraint_Constraint
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_6pplite_10generators_PPliteGenerator __pyx_mstate_global->__pyx_ptype_6pplite_10generators_PPliteGenerator
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_6pplite_9intervals_Interval __pyx_mstate_global->__pyx_ptype_6pplite_9intervals_Interval
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_6pplite_10polyhedron_NNC_Polyhedron __pyx_mstate_global->__pyx_type_6pplite_10polyhedron_NNC_Polyhedron
#define __pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel __pyx_mstate_global->__pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel
#define __pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel __pyx_mstate_global->__pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel
#endif
#define __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron __pyx_mstate_global->__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron
#define __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel __pyx_mstate_global->__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel
#define __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel __pyx_mstate_global->__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel
#define __pyx_kp_u_A_class_PPliteGenerator_or_a_cla __pyx_mstate_global->__pyx_kp_u_A_class_PPliteGenerator_or_a_cla
#define __pyx_kp_u_A_class_Variable_or_a_class_Affi __pyx_mstate_global->__pyx_kp_u_A_class_Variable_or_a_class_Affi
#define __pyx_kp_u_Comparison_with_NNC_polys_only __pyx_mstate_global->__pyx_kp_u_Comparison_with_NNC_polys_only
#define __pyx_n_s_NNC_Polyhedron __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron
#define __pyx_kp_u_NNC_Polyhedron___init___line_94 __pyx_mstate_global->__pyx_kp_u_NNC_Polyhedron___init___line_94
#define __pyx_n_s_NNC_Polyhedron___reduce_cython __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron___reduce_cython
#define __pyx_n_s_NNC_Polyhedron___setstate_cython __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron___setstate_cython
#define __pyx_n_s_NNC_Polyhedron__get_boundes_itv __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron__get_boundes_itv
#define __pyx_n_s_NNC_Polyhedron__get_bounds_ae __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron__get_bounds_ae
#define __pyx_n_s_NNC_Polyhedron__get_bounds_v __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron__get_bounds_v
#define __pyx_n_s_NNC_Polyhedron__relation_with_c __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron__relation_with_c
#define __pyx_n_s_NNC_Polyhedron__relation_with_g __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron__relation_with_g
#define __pyx_n_s_NNC_Polyhedron_add_constraint __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_add_constraint
#define __pyx_kp_u_NNC_Polyhedron_add_constraint_li __pyx_mstate_global->__pyx_kp_u_NNC_Polyhedron_add_constraint_li
#define __pyx_n_s_NNC_Polyhedron_add_constraints __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_add_constraints
#define __pyx_kp_u_NNC_Polyhedron_add_constraints_l __pyx_mstate_global->__pyx_kp_u_NNC_Polyhedron_add_constraints_l
#define __pyx_n_s_NNC_Polyhedron_add_generator __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_add_generator
#define __pyx_kp_u_NNC_Polyhedron_add_generator_lin __pyx_mstate_global->__pyx_kp_u_NNC_Polyhedron_add_generator_lin
#define __pyx_n_s_NNC_Polyhedron_add_generators __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_add_generators
#define __pyx_n_s_NNC_Polyhedron_affine_dim __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_affine_dim
#define __pyx_n_s_NNC_Polyhedron_affine_image __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_affine_image
#define __pyx_n_s_NNC_Polyhedron_affine_preimage __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_affine_preimage
#define __pyx_n_s_NNC_Polyhedron_boxed_contains __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_boxed_contains
#define __pyx_n_s_NNC_Polyhedron_check_inv __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_check_inv
#define __pyx_n_s_NNC_Polyhedron_collapse __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_collapse
#define __pyx_n_s_NNC_Polyhedron_con_hull_assign __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_con_hull_assign
#define __pyx_n_s_NNC_Polyhedron_constrains __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_constrains
#define __pyx_n_s_NNC_Polyhedron_constraints __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_constraints
#define __pyx_n_s_NNC_Polyhedron_contains __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_contains
#define __pyx_n_s_NNC_Polyhedron_disjunct_constrai __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_disjunct_constrai
#define __pyx_n_s_NNC_Polyhedron_equals __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_equals
#define __pyx_n_s_NNC_Polyhedron_generators __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_generators
#define __pyx_n_s_NNC_Polyhedron_geom_covers __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_geom_covers
#define __pyx_n_s_NNC_Polyhedron_get_bounding_box __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_get_bounding_box
#define __pyx_n_s_NNC_Polyhedron_get_bounds __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_get_bounds
#define __pyx_n_s_NNC_Polyhedron_get_unconstrainte __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_get_unconstrainte
#define __pyx_n_s_NNC_Polyhedron_intersection_assi __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_intersection_assi
#define __pyx_n_s_NNC_Polyhedron_is_bounded __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_bounded
#define __pyx_n_s_NNC_Polyhedron_is_bounded_expres __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_bounded_expres
#define __pyx_n_s_NNC_Polyhedron_is_disjoint_from __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_disjoint_from
#define __pyx_n_s_NNC_Polyhedron_is_empty __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_empty
#define __pyx_n_s_NNC_Polyhedron_is_minimized __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_minimized
#define __pyx_n_s_NNC_Polyhedron_is_necessarily_cl __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_necessarily_cl
#define __pyx_n_s_NNC_Polyhedron_is_topologically __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_topologically
#define __pyx_n_s_NNC_Polyhedron_is_universe __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_is_universe
#define __pyx_n_s_NNC_Polyhedron_join_assign __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_join_assign
#define __pyx_n_s_NNC_Polyhedron_m_swap __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_m_swap
#define __pyx_n_s_NNC_Polyhedron_max __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_max
#define __pyx_n_s_NNC_Polyhedron_min __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_min
#define __pyx_n_s_NNC_Polyhedron_minimize __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_minimize
#define __pyx_n_s_NNC_Polyhedron_normalized_constr __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_normalized_constr
#define __pyx_n_s_NNC_Polyhedron_num_disjuncts __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_num_disjuncts
#define __pyx_n_s_NNC_Polyhedron_num_min_constrain __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_num_min_constrain
#define __pyx_n_s_NNC_Polyhedron_num_min_generator __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_num_min_generator
#define __pyx_n_s_NNC_Polyhedron_parallel_affine_i __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_parallel_affine_i
#define __pyx_n_s_NNC_Polyhedron_poly_difference_a __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_poly_difference_a
#define __pyx_n_s_NNC_Polyhedron_poly_hull_assign __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_poly_hull_assign
#define __pyx_n_s_NNC_Polyhedron_relation_with __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_relation_with
#define __pyx_n_s_NNC_Polyhedron_set_empty __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_set_empty
#define __pyx_n_s_NNC_Polyhedron_set_topology __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_set_topology
#define __pyx_n_s_NNC_Polyhedron_space_dim __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_space_dim
#define __pyx_n_s_NNC_Polyhedron_strictly_contains __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_strictly_contains
#define __pyx_n_s_NNC_Polyhedron_time_elapse_assig __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_time_elapse_assig
#define __pyx_n_s_NNC_Polyhedron_topological_closu __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_topological_closu
#define __pyx_n_s_NNC_Polyhedron_topology __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_topology
#define __pyx_n_s_NNC_Polyhedron_unconstain __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_unconstain
#define __pyx_n_s_NNC_Polyhedron_unconstain_many __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_unconstain_many
#define __pyx_n_s_NNC_Polyhedron_widing_assign __pyx_mstate_global->__pyx_n_s_NNC_Polyhedron_widing_assign
#define __pyx_kp_u_Poly_Construction_Failed __pyx_mstate_global->__pyx_kp_u_Poly_Construction_Failed
#define __pyx_n_s_Polyhedron_Constraint_Rel __pyx_mstate_global->__pyx_n_s_Polyhedron_Constraint_Rel
#define __pyx_n_s_Polyhedron_Constraint_Rel___redu __pyx_mstate_global->__pyx_n_s_Polyhedron_Constraint_Rel___redu
#define __pyx_n_s_Polyhedron_Constraint_Rel___sets __pyx_mstate_global->__pyx_n_s_Polyhedron_Constraint_Rel___sets
#define __pyx_n_s_Polyhedron_Generator_Rel __pyx_mstate_global->__pyx_n_s_Polyhedron_Generator_Rel
#define __pyx_n_s_Polyhedron_Generator_Rel___reduc __pyx_mstate_global->__pyx_n_s_Polyhedron_Generator_Rel___reduc
#define __pyx_n_s_Polyhedron_Generator_Rel___setst __pyx_mstate_global->__pyx_n_s_Polyhedron_Generator_Rel___setst
#define __pyx_kp_u_Spec_Elem_type_conversion_failed __pyx_mstate_global->__pyx_kp_u_Spec_Elem_type_conversion_failed
#define __pyx_kp_u_TESTS_from_pplite_import_NNC_Po __pyx_mstate_global->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po
#define __pyx_kp_u_TESTS_from_pplite_import_NNC_Po_2 __pyx_mstate_global->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_2
#define __pyx_kp_u_TESTS_from_pplite_import_NNC_Po_3 __pyx_mstate_global->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_3
#define __pyx_kp_u_TESTS_from_pplite_import_NNC_Po_4 __pyx_mstate_global->__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_4
#define __pyx_kp_u_Topology_type_conversion_failed __pyx_mstate_global->__pyx_kp_u_Topology_type_conversion_failed
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s__106 __pyx_mstate_global->__pyx_n_s__106
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_kp_u__5 __pyx_mstate_global->__pyx_kp_u__5
#define __pyx_n_s_add_constraint __pyx_mstate_global->__pyx_n_s_add_constraint
#define __pyx_n_s_add_constraints __pyx_mstate_global->__pyx_n_s_add_constraints
#define __pyx_n_s_add_generator __pyx_mstate_global->__pyx_n_s_add_generator
#define __pyx_n_s_add_generators __pyx_mstate_global->__pyx_n_s_add_generators
#define __pyx_n_s_ae __pyx_mstate_global->__pyx_n_s_ae
#define __pyx_n_s_affine_dim __pyx_mstate_global->__pyx_n_s_affine_dim
#define __pyx_n_s_affine_expr __pyx_mstate_global->__pyx_n_s_affine_expr
#define __pyx_n_s_affine_image __pyx_mstate_global->__pyx_n_s_affine_image
#define __pyx_n_s_affine_preimage __pyx_mstate_global->__pyx_n_s_affine_preimage
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_bboxed __pyx_mstate_global->__pyx_n_s_bboxed
#define __pyx_n_s_boxed __pyx_mstate_global->__pyx_n_s_boxed
#define __pyx_n_s_boxed_contains __pyx_mstate_global->__pyx_n_s_boxed_contains
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_s_cc __pyx_mstate_global->__pyx_n_s_cc
#define __pyx_n_s_check_inv __pyx_mstate_global->__pyx_n_s_check_inv
#define __pyx_kp_u_class_NNC_Polyhedron_needs_to_b __pyx_mstate_global->__pyx_kp_u_class_NNC_Polyhedron_needs_to_b
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_u_closed __pyx_mstate_global->__pyx_n_u_closed
#define __pyx_n_s_collapse __pyx_mstate_global->__pyx_n_s_collapse
#define __pyx_n_s_con __pyx_mstate_global->__pyx_n_s_con
#define __pyx_n_s_con_hull_assign __pyx_mstate_global->__pyx_n_s_con_hull_assign
#define __pyx_n_u_cons __pyx_mstate_global->__pyx_n_u_cons
#define __pyx_n_s_constrains __pyx_mstate_global->__pyx_n_s_constrains
#define __pyx_n_s_constraint __pyx_mstate_global->__pyx_n_s_constraint
#define __pyx_n_s_constraint_vector __pyx_mstate_global->__pyx_n_s_constraint_vector
#define __pyx_n_s_constraints __pyx_mstate_global->__pyx_n_s_constraints
#define __pyx_n_s_contains __pyx_mstate_global->__pyx_n_s_contains
#define __pyx_n_s_den __pyx_mstate_global->__pyx_n_s_den
#define __pyx_n_s_denominator __pyx_mstate_global->__pyx_n_s_denominator
#define __pyx_n_u_dim_type __pyx_mstate_global->__pyx_n_u_dim_type
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_disjunct_constraints __pyx_mstate_global->__pyx_n_s_disjunct_constraints
#define __pyx_kp_u_double_check_inputs_of_construct __pyx_mstate_global->__pyx_kp_u_double_check_inputs_of_construct
#define __pyx_n_u_empty __pyx_mstate_global->__pyx_n_u_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_equals __pyx_mstate_global->__pyx_n_s_equals
#define __pyx_n_s_expr __pyx_mstate_global->__pyx_n_s_expr
#define __pyx_n_s_expression __pyx_mstate_global->__pyx_n_s_expression
#define __pyx_kp_u_expression_needs_to_be_of_class __pyx_mstate_global->__pyx_kp_u_expression_needs_to_be_of_class
#define __pyx_n_s_f_b __pyx_mstate_global->__pyx_n_s_f_b
#define __pyx_n_u_false __pyx_mstate_global->__pyx_n_u_false
#define __pyx_n_s_from_below __pyx_mstate_global->__pyx_n_s_from_below
#define __pyx_n_s_g __pyx_mstate_global->__pyx_n_s_g
#define __pyx_n_s_g_ptr __pyx_mstate_global->__pyx_n_s_g_ptr
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_gen __pyx_mstate_global->__pyx_n_s_gen
#define __pyx_n_s_gen_object __pyx_mstate_global->__pyx_n_s_gen_object
#define __pyx_n_s_gen_or_constraint __pyx_mstate_global->__pyx_n_s_gen_or_constraint
#define __pyx_n_s_generator __pyx_mstate_global->__pyx_n_s_generator
#define __pyx_n_s_generator_vector __pyx_mstate_global->__pyx_n_s_generator_vector
#define __pyx_n_s_generators __pyx_mstate_global->__pyx_n_s_generators
#define __pyx_n_u_gens __pyx_mstate_global->__pyx_n_u_gens
#define __pyx_n_s_geom_covers __pyx_mstate_global->__pyx_n_s_geom_covers
#define __pyx_n_s_get_boundes_itv __pyx_mstate_global->__pyx_n_s_get_boundes_itv
#define __pyx_n_s_get_bounding_box __pyx_mstate_global->__pyx_n_s_get_bounding_box
#define __pyx_n_s_get_bounds __pyx_mstate_global->__pyx_n_s_get_bounds
#define __pyx_n_s_get_bounds_ae __pyx_mstate_global->__pyx_n_s_get_bounds_ae
#define __pyx_n_s_get_bounds_v __pyx_mstate_global->__pyx_n_s_get_bounds_v
#define __pyx_n_s_get_unconstrainted __pyx_mstate_global->__pyx_n_s_get_unconstrainted
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_gg __pyx_mstate_global->__pyx_n_s_gg
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_included_pointer __pyx_mstate_global->__pyx_n_s_included_pointer
#define __pyx_n_s_included_ptr __pyx_mstate_global->__pyx_n_s_included_ptr
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_inhomo __pyx_mstate_global->__pyx_n_s_inhomo
#define __pyx_n_s_inhomogenous_term __pyx_mstate_global->__pyx_n_s_inhomogenous_term
#define __pyx_n_s_intersection_assign __pyx_mstate_global->__pyx_n_s_intersection_assign
#define __pyx_n_s_is_bounded __pyx_mstate_global->__pyx_n_s_is_bounded
#define __pyx_n_s_is_bounded_expression __pyx_mstate_global->__pyx_n_s_is_bounded_expression
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_disjoint_from __pyx_mstate_global->__pyx_n_s_is_disjoint_from
#define __pyx_n_s_is_empty __pyx_mstate_global->__pyx_n_s_is_empty
#define __pyx_n_s_is_minimized __pyx_mstate_global->__pyx_n_s_is_minimized
#define __pyx_n_s_is_necessarily_closed __pyx_mstate_global->__pyx_n_s_is_necessarily_closed
#define __pyx_n_s_is_topologically_closed __pyx_mstate_global->__pyx_n_s_is_topologically_closed
#define __pyx_n_s_is_universe __pyx_mstate_global->__pyx_n_s_is_universe
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_iter_of_cons __pyx_mstate_global->__pyx_n_s_iter_of_cons
#define __pyx_n_s_iter_of_gens __pyx_mstate_global->__pyx_n_s_iter_of_gens
#define __pyx_n_s_iter_of_var_or_index_set __pyx_mstate_global->__pyx_n_s_iter_of_var_or_index_set
#define __pyx_n_s_itv __pyx_mstate_global->__pyx_n_s_itv
#define __pyx_n_s_itv_expr __pyx_mstate_global->__pyx_n_s_itv_expr
#define __pyx_n_s_join_assign __pyx_mstate_global->__pyx_n_s_join_assign
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_linear_exp __pyx_mstate_global->__pyx_n_s_linear_exp
#define __pyx_n_s_m_swap __pyx_mstate_global->__pyx_n_s_m_swap
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_min __pyx_mstate_global->__pyx_n_s_min
#define __pyx_n_s_minimize __pyx_mstate_global->__pyx_n_s_minimize
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_nn __pyx_mstate_global->__pyx_n_s_nn
#define __pyx_n_u_nnc __pyx_mstate_global->__pyx_n_u_nnc
#define __pyx_n_u_nnc_poly __pyx_mstate_global->__pyx_n_u_nnc_poly
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_normalized_constraints __pyx_mstate_global->__pyx_n_s_normalized_constraints
#define __pyx_n_s_num_disjuncts __pyx_mstate_global->__pyx_n_s_num_disjuncts
#define __pyx_n_s_num_min_constrains __pyx_mstate_global->__pyx_n_s_num_min_constrains
#define __pyx_n_s_num_min_generators __pyx_mstate_global->__pyx_n_s_num_min_generators
#define __pyx_n_s_other_poly __pyx_mstate_global->__pyx_n_s_other_poly
#define __pyx_kp_u_other_poly_needs_to_be_of_class __pyx_mstate_global->__pyx_kp_u_other_poly_needs_to_be_of_class
#define __pyx_n_s_p_c_r __pyx_mstate_global->__pyx_n_s_p_c_r
#define __pyx_n_s_p_g_r __pyx_mstate_global->__pyx_n_s_p_g_r
#define __pyx_n_s_parallel_affine_image __pyx_mstate_global->__pyx_n_s_parallel_affine_image
#define __pyx_n_s_poly_difference_assign __pyx_mstate_global->__pyx_n_s_poly_difference_assign
#define __pyx_n_s_poly_hull_assign __pyx_mstate_global->__pyx_n_s_poly_hull_assign
#define __pyx_n_s_pop __pyx_mstate_global->__pyx_n_s_pop
#define __pyx_n_s_pplite_polyhedron __pyx_mstate_global->__pyx_n_s_pplite_polyhedron
#define __pyx_kp_s_pplite_polyhedron_pyx __pyx_mstate_global->__pyx_kp_s_pplite_polyhedron_pyx
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_relation_with __pyx_mstate_global->__pyx_n_s_relation_with
#define __pyx_n_s_relation_with_c __pyx_mstate_global->__pyx_n_s_relation_with_c
#define __pyx_n_s_relation_with_g __pyx_mstate_global->__pyx_n_s_relation_with_g
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_set_empty __pyx_mstate_global->__pyx_n_s_set_empty
#define __pyx_n_s_set_topology __pyx_mstate_global->__pyx_n_s_set_topology
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_space_dim __pyx_mstate_global->__pyx_n_s_space_dim
#define __pyx_n_s_space_dimension __pyx_mstate_global->__pyx_n_s_space_dimension
#define __pyx_n_u_spec_elem __pyx_mstate_global->__pyx_n_u_spec_elem
#define __pyx_n_s_strictly_contains __pyx_mstate_global->__pyx_n_s_strictly_contains
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_time_elapse_assign __pyx_mstate_global->__pyx_n_s_time_elapse_assign
#define __pyx_n_s_topological_closure_assign __pyx_mstate_global->__pyx_n_s_topological_closure_assign
#define __pyx_n_s_topology __pyx_mstate_global->__pyx_n_s_topology
#define __pyx_n_u_topology __pyx_mstate_global->__pyx_n_u_topology
#define __pyx_n_s_tt __pyx_mstate_global->__pyx_n_s_tt
#define __pyx_n_s_unconstain __pyx_mstate_global->__pyx_n_s_unconstain
#define __pyx_n_s_unconstain_many __pyx_mstate_global->__pyx_n_s_unconstain_many
#define __pyx_n_u_universe __pyx_mstate_global->__pyx_n_u_universe
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_val __pyx_mstate_global->__pyx_n_s_val
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_var __pyx_mstate_global->__pyx_n_s_var
#define __pyx_n_s_variable __pyx_mstate_global->__pyx_n_s_variable
#define __pyx_kp_u_variable_needs_to_be_of_class_Va __pyx_mstate_global->__pyx_kp_u_variable_needs_to_be_of_class_Va
#define __pyx_n_s_variable_or_affine_expr __pyx_mstate_global->__pyx_n_s_variable_or_affine_expr
#define __pyx_n_s_vv __pyx_mstate_global->__pyx_n_s_vv
#define __pyx_n_s_widing_assign __pyx_mstate_global->__pyx_n_s_widing_assign
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_n_s_yy __pyx_mstate_global->__pyx_n_s_yy
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__83 __pyx_mstate_global->__pyx_tuple__83
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__94 __pyx_mstate_global->__pyx_tuple__94
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__84 __pyx_mstate_global->__pyx_codeobj__84
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
/* #### Code section: module_code ### */

/* "gmpy2/gmpy2.pxd":129
 * 
 * # Build a gmpy2 mpz from a gmp mpz
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):             # <<<<<<<<<<<<<<
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)
 */

static CYTHON_INLINE MPZ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPZ_From_mpz(mpz_srcptr __pyx_v_z) {
  MPZ_Object *__pyx_v_res = 0;
  MPZ_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPZ_From_mpz", 1);

  /* "gmpy2/gmpy2.pxd":130
 * # Build a gmpy2 mpz from a gmp mpz
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):
 *     cdef mpz res = GMPy_MPZ_New(NULL)             # <<<<<<<<<<<<<<
 *     mpz_set(res.z, z)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPZ_New(NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPZ_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":131
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  mpz_set(__pyx_v_res->z, __pyx_v_z);

  /* "gmpy2/gmpy2.pxd":132
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpq from a gmp mpq
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":129
 * 
 * # Build a gmpy2 mpz from a gmp mpz
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):             # <<<<<<<<<<<<<<
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPZ_From_mpz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":135
 * 
 * # Build a gmpy2 mpq from a gmp mpq
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)
 */

static CYTHON_INLINE MPQ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPQ_From_mpq(mpq_srcptr __pyx_v_q) {
  MPQ_Object *__pyx_v_res = 0;
  MPQ_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPQ_From_mpq", 1);

  /* "gmpy2/gmpy2.pxd":136
 * # Build a gmpy2 mpq from a gmp mpq
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):
 *     cdef mpq res = GMPy_MPQ_New(NULL)             # <<<<<<<<<<<<<<
 *     mpq_set(res.q, q)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPQ_New(NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPQ_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":137
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  mpq_set(__pyx_v_res->q, __pyx_v_q);

  /* "gmpy2/gmpy2.pxd":138
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":135
 * 
 * # Build a gmpy2 mpq from a gmp mpq
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPQ_From_mpq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":141
 * 
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)
 */

static CYTHON_INLINE MPQ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPQ_From_mpz(mpz_srcptr __pyx_v_num, mpz_srcptr __pyx_v_den) {
  MPQ_Object *__pyx_v_res = 0;
  MPQ_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPQ_From_mpz", 1);

  /* "gmpy2/gmpy2.pxd":142
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):
 *     cdef mpq res = GMPy_MPQ_New(NULL)             # <<<<<<<<<<<<<<
 *     mpq_set_num(res.q, num)
 *     mpq_set_den(res.q, den)
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPQ_New(NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPQ_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":143
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)             # <<<<<<<<<<<<<<
 *     mpq_set_den(res.q, den)
 *     return res
 */
  mpq_set_num(__pyx_v_res->q, __pyx_v_num);

  /* "gmpy2/gmpy2.pxd":144
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)
 *     mpq_set_den(res.q, den)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  mpq_set_den(__pyx_v_res->q, __pyx_v_den);

  /* "gmpy2/gmpy2.pxd":145
 *     mpq_set_num(res.q, num)
 *     mpq_set_den(res.q, den)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpfr from a mpfr
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":141
 * 
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPQ_From_mpz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":148
 * 
 * # Build a gmpy2 mpfr from a mpfr
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):             # <<<<<<<<<<<<<<
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)
 */

static CYTHON_INLINE MPFR_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPFR_From_mpfr(mpfr_srcptr __pyx_v_x) {
  MPFR_Object *__pyx_v_res = 0;
  MPFR_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPFR_From_mpfr", 1);

  /* "gmpy2/gmpy2.pxd":149
 * # Build a gmpy2 mpfr from a mpfr
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)             # <<<<<<<<<<<<<<
 *     mpfr_set(res.f, x, MPFR_RNDN)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPFR_New(mpfr_get_prec(__pyx_v_x), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPFR_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":150
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  (void)(mpfr_set(__pyx_v_res->f, __pyx_v_x, MPFR_RNDN));

  /* "gmpy2/gmpy2.pxd":151
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpc from a mpc
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":148
 * 
 * # Build a gmpy2 mpfr from a mpfr
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):             # <<<<<<<<<<<<<<
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPFR_From_mpfr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":154
 * 
 * # Build a gmpy2 mpc from a mpc
 * cdef inline mpc GMPy_MPC_From_mpc(mpc_srcptr c):             # <<<<<<<<<<<<<<
 *     cdef mpfr_prec_t pr
 *     cdef mpfr_prec_t pi
 */

static CYTHON_INLINE MPC_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPC_From_mpc(mpc_srcptr __pyx_v_c) {
  mpfr_prec_t __pyx_v_pr;
  mpfr_prec_t __pyx_v_pi;
  MPC_Object *__pyx_v_res = 0;
  MPC_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPC_From_mpc", 1);

  /* "gmpy2/gmpy2.pxd":157
 *     cdef mpfr_prec_t pr
 *     cdef mpfr_prec_t pi
 *     mpc_get_prec2(&pr, &pi, c)             # <<<<<<<<<<<<<<
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)
 *     mpc_set(res.c, c, MPC_RNDNN)
 */
  mpc_get_prec2((&__pyx_v_pr), (&__pyx_v_pi), __pyx_v_c);

  /* "gmpy2/gmpy2.pxd":158
 *     cdef mpfr_prec_t pi
 *     mpc_get_prec2(&pr, &pi, c)
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)             # <<<<<<<<<<<<<<
 *     mpc_set(res.c, c, MPC_RNDNN)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPC_New(__pyx_v_pr, __pyx_v_pi, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPC_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":159
 *     mpc_get_prec2(&pr, &pi, c)
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)
 *     mpc_set(res.c, c, MPC_RNDNN)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  (void)(mpc_set(__pyx_v_res->c, __pyx_v_c, MPC_RNDNN));

  /* "gmpy2/gmpy2.pxd":160
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)
 *     mpc_set(res.c, c, MPC_RNDNN)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":154
 * 
 * # Build a gmpy2 mpc from a mpc
 * cdef inline mpc GMPy_MPC_From_mpc(mpc_srcptr c):             # <<<<<<<<<<<<<<
 *     cdef mpfr_prec_t pr
 *     cdef mpfr_prec_t pi
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPC_From_mpc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":163
 * 
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 * cdef inline mpc GMPy_MPC_From_mpfr(mpfr_srcptr re, mpfr_srcptr im):             # <<<<<<<<<<<<<<
 *     cdef mpc res = GMPy_MPC_New(mpfr_get_prec(re), mpfr_get_prec(im), NULL)
 *     # We intentionally use MPFR funtions instead of MPC functions here
 */

static CYTHON_INLINE MPC_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPC_From_mpfr(mpfr_srcptr __pyx_v_re, mpfr_srcptr __pyx_v_im) {
  MPC_Object *__pyx_v_res = 0;
  MPC_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPC_From_mpfr", 1);

  /* "gmpy2/gmpy2.pxd":164
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 * cdef inline mpc GMPy_MPC_From_mpfr(mpfr_srcptr re, mpfr_srcptr im):
 *     cdef mpc res = GMPy_MPC_New(mpfr_get_prec(re), mpfr_get_prec(im), NULL)             # <<<<<<<<<<<<<<
 *     # We intentionally use MPFR funtions instead of MPC functions here
 *     # in order not to add an unneeded dependency on MPC. It's probably
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPC_New(mpfr_get_prec(__pyx_v_re), mpfr_get_prec(__pyx_v_im), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPC_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":168
 *     # in order not to add an unneeded dependency on MPC. It's probably
 *     # faster too this way.
 *     mpfr_set(res.c.re, re, MPFR_RNDN)             # <<<<<<<<<<<<<<
 *     mpfr_set(res.c.im, im, MPFR_RNDN)
 *     return res
 */
  (void)(mpfr_set(__pyx_v_res->c->re, __pyx_v_re, MPFR_RNDN));

  /* "gmpy2/gmpy2.pxd":169
 *     # faster too this way.
 *     mpfr_set(res.c.re, re, MPFR_RNDN)
 *     mpfr_set(res.c.im, im, MPFR_RNDN)             # <<<<<<<<<<<<<<
 *     return res
 */
  (void)(mpfr_set(__pyx_v_res->c->im, __pyx_v_im, MPFR_RNDN));

  /* "gmpy2/gmpy2.pxd":170
 *     mpfr_set(res.c.re, re, MPFR_RNDN)
 *     mpfr_set(res.c.im, im, MPFR_RNDN)
 *     return res             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":163
 * 
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 * cdef inline mpc GMPy_MPC_From_mpfr(mpfr_srcptr re, mpfr_srcptr im):             # <<<<<<<<<<<<<<
 *     cdef mpc res = GMPy_MPC_New(mpfr_get_prec(re), mpfr_get_prec(im), NULL)
 *     # We intentionally use MPFR funtions instead of MPC functions here
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPC_From_mpfr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":94
 *     True
 *     """
 *     def __init__(self, **kwrds):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */

/* Python wrapper */
static int __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron___init__, "\n        TESTS::\n        >>> from pplite import NNC_Polyhedron\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\")\n        >>> P\n        false\n        >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n        >>> P_2\n        false\n        >>> P_2.equals(P)\n        True\n        >>> from pplite import Variable, Linear_Expression, Affine_Expression, Constraint\n        >>> A = Variable(0)\n        >>> P_3 = NNC_Polyhedron(dim_type = 1, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_3.add_constraint(A >= 0)\n        >>> P_3\n        x0>=0\n        >>> P_4 = NNC_Polyhedron(nnc_poly = P_3)\n        >>> P_4.add_constraint(A >= -10)\n        >>> P_4.add_constraint(A >= -5)\n        >>> P_4.add_constraint(A >= -2)\n        >>> P_4.add_constraint(A >= -1)\n        >>> P_4.add_constraint(A >= 0)\n        >>> P_3.equals(P_4)\n        True\n        >>> B = Variable(1)\n        >>> cons_list = [A >= 0, B == 5]\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraints(cons_list)\n        >>> P\n        x1-5==0, x0>=0\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_10polyhedron_14NNC_Polyhedron___init__;
#endif
static int __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwrds = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (__pyx_kwds) {
    __pyx_v_kwrds = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwrds)) return -1;
    __Pyx_GOTREF(__pyx_v_kwrds);
  } else {
    __pyx_v_kwrds = PyDict_New();
    if (unlikely(!__pyx_v_kwrds)) return -1;
    __Pyx_GOTREF(__pyx_v_kwrds);
  }
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron___init__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_kwrds);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwrds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron___init__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_kwrds) {
  pplite::dim_type __pyx_v_dd;
  __PYX_ENUM_CLASS_DECL pplite::Spec_Elem __pyx_v_ss;
  __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_v_tt;
  pplite::Poly *__pyx_v_yy;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_nnc_poly = NULL;
  PyObject *__pyx_v_cons = NULL;
  PyObject *__pyx_v_d_cons = NULL;
  PyObject *__pyx_v_d_in = NULL;
  PyObject *__pyx_v_c = NULL;
  pplite::Con __pyx_v_cc;
  PyObject *__pyx_v_gens = NULL;
  PyObject *__pyx_v_d_gens = NULL;
  PyObject *__pyx_v_g = NULL;
  pplite::Gen __pyx_v_gg;
  PyObject *__pyx_7genexpr__pyx_v_c = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_g = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::dim_type __pyx_t_4;
  __PYX_ENUM_CLASS_DECL pplite::Spec_Elem __pyx_t_5;
  __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_t_6;
  pplite::Poly *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  unsigned int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "pplite/polyhedron.pyx":131
 *         cdef Topol tt
 *         cdef Poly* yy
 *         if len(kwrds) == 3:             # <<<<<<<<<<<<<<
 *             d = kwrds.pop("dim_type")
 *             s = kwrds.pop("spec_elem")
 */
  __pyx_t_1 = PyDict_Size(__pyx_v_kwrds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 3);
  if (__pyx_t_2) {

    /* "pplite/polyhedron.pyx":132
 *         cdef Poly* yy
 *         if len(kwrds) == 3:
 *             d = kwrds.pop("dim_type")             # <<<<<<<<<<<<<<
 *             s = kwrds.pop("spec_elem")
 *             t = kwrds.pop("topology")
 */
    __pyx_t_3 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_dim_type, ((PyObject *)NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_d = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/polyhedron.pyx":133
 *         if len(kwrds) == 3:
 *             d = kwrds.pop("dim_type")
 *             s = kwrds.pop("spec_elem")             # <<<<<<<<<<<<<<
 *             t = kwrds.pop("topology")
 *             if isinstance(d, int):
 */
    __pyx_t_3 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_spec_elem, ((PyObject *)NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_s = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/polyhedron.pyx":134
 *             d = kwrds.pop("dim_type")
 *             s = kwrds.pop("spec_elem")
 *             t = kwrds.pop("topology")             # <<<<<<<<<<<<<<
 *             if isinstance(d, int):
 *                 dd = d # needs to be a python int? Gotta figure out how to typed integer conversions. Ask about this
 */
    __pyx_t_3 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_topology, ((PyObject *)NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_t = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/polyhedron.pyx":135
 *             s = kwrds.pop("spec_elem")
 *             t = kwrds.pop("topology")
 *             if isinstance(d, int):             # <<<<<<<<<<<<<<
 *                 dd = d # needs to be a python int? Gotta figure out how to typed integer conversions. Ask about this
 *                 ss = string_to_Spec_Elem(s)
 */
    __pyx_t_2 = PyInt_Check(__pyx_v_d); 
    if (__pyx_t_2) {

      /* "pplite/polyhedron.pyx":136
 *             t = kwrds.pop("topology")
 *             if isinstance(d, int):
 *                 dd = d # needs to be a python int? Gotta figure out how to typed integer conversions. Ask about this             # <<<<<<<<<<<<<<
 *                 ss = string_to_Spec_Elem(s)
 *                 tt = string_to_Topol(t)
 */
      __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_d); if (unlikely((__pyx_t_4 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
      __pyx_v_dd = __pyx_t_4;

      /* "pplite/polyhedron.pyx":137
 *             if isinstance(d, int):
 *                 dd = d # needs to be a python int? Gotta figure out how to typed integer conversions. Ask about this
 *                 ss = string_to_Spec_Elem(s)             # <<<<<<<<<<<<<<
 *                 tt = string_to_Topol(t)
 *                 self.thisptr = new Poly(dd, ss, tt)
 */
      __pyx_t_5 = __pyx_f_6pplite_10polyhedron_string_to_Spec_Elem(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L1_error)
      __pyx_v_ss = __pyx_t_5;

      /* "pplite/polyhedron.pyx":138
 *                 dd = d # needs to be a python int? Gotta figure out how to typed integer conversions. Ask about this
 *                 ss = string_to_Spec_Elem(s)
 *                 tt = string_to_Topol(t)             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Poly(dd, ss, tt)
 *                 return
 */
      __pyx_t_6 = __pyx_f_6pplite_10polyhedron_string_to_Topol(__pyx_v_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
      __pyx_v_tt = __pyx_t_6;

      /* "pplite/polyhedron.pyx":139
 *                 ss = string_to_Spec_Elem(s)
 *                 tt = string_to_Topol(t)
 *                 self.thisptr = new Poly(dd, ss, tt)             # <<<<<<<<<<<<<<
 *                 return
 *             raise ValueError("double check inputs of constructor.")
 */
      __pyx_v_self->thisptr = new pplite::Poly(__pyx_v_dd, __pyx_v_ss, __pyx_v_tt);

      /* "pplite/polyhedron.pyx":140
 *                 tt = string_to_Topol(t)
 *                 self.thisptr = new Poly(dd, ss, tt)
 *                 return             # <<<<<<<<<<<<<<
 *             raise ValueError("double check inputs of constructor.")
 *         if "nnc_poly" in kwrds.keys():
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/polyhedron.pyx":135
 *             s = kwrds.pop("spec_elem")
 *             t = kwrds.pop("topology")
 *             if isinstance(d, int):             # <<<<<<<<<<<<<<
 *                 dd = d # needs to be a python int? Gotta figure out how to typed integer conversions. Ask about this
 *                 ss = string_to_Spec_Elem(s)
 */
    }

    /* "pplite/polyhedron.pyx":141
 *                 self.thisptr = new Poly(dd, ss, tt)
 *                 return
 *             raise ValueError("double check inputs of constructor.")             # <<<<<<<<<<<<<<
 *         if "nnc_poly" in kwrds.keys():
 *             nnc_poly = kwrds.pop("nnc_poly")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 141, __pyx_L1_error)

    /* "pplite/polyhedron.pyx":131
 *         cdef Topol tt
 *         cdef Poly* yy
 *         if len(kwrds) == 3:             # <<<<<<<<<<<<<<
 *             d = kwrds.pop("dim_type")
 *             s = kwrds.pop("spec_elem")
 */
  }

  /* "pplite/polyhedron.pyx":142
 *                 return
 *             raise ValueError("double check inputs of constructor.")
 *         if "nnc_poly" in kwrds.keys():             # <<<<<<<<<<<<<<
 *             nnc_poly = kwrds.pop("nnc_poly")
 *             if isinstance(nnc_poly, NNC_Polyhedron):
 */
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwrds); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_nnc_poly, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "pplite/polyhedron.pyx":143
 *             raise ValueError("double check inputs of constructor.")
 *         if "nnc_poly" in kwrds.keys():
 *             nnc_poly = kwrds.pop("nnc_poly")             # <<<<<<<<<<<<<<
 *             if isinstance(nnc_poly, NNC_Polyhedron):
 *                 yy = (<NNC_Polyhedron> nnc_poly).thisptr
 */
    __pyx_t_3 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_nnc_poly, ((PyObject *)NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_nnc_poly = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/polyhedron.pyx":144
 *         if "nnc_poly" in kwrds.keys():
 *             nnc_poly = kwrds.pop("nnc_poly")
 *             if isinstance(nnc_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *                 yy = (<NNC_Polyhedron> nnc_poly).thisptr
 *                 self.thisptr = new Poly(yy[0])
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_nnc_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
    if (__pyx_t_2) {

      /* "pplite/polyhedron.pyx":145
 *             nnc_poly = kwrds.pop("nnc_poly")
 *             if isinstance(nnc_poly, NNC_Polyhedron):
 *                 yy = (<NNC_Polyhedron> nnc_poly).thisptr             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Poly(yy[0])
 *                 return
 */
      __pyx_t_7 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_nnc_poly)->thisptr;
      __pyx_v_yy = __pyx_t_7;

      /* "pplite/polyhedron.pyx":146
 *             if isinstance(nnc_poly, NNC_Polyhedron):
 *                 yy = (<NNC_Polyhedron> nnc_poly).thisptr
 *                 self.thisptr = new Poly(yy[0])             # <<<<<<<<<<<<<<
 *                 return
 *             raise ValueError(":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.")
 */
      __pyx_v_self->thisptr = new pplite::Poly((__pyx_v_yy[0]));

      /* "pplite/polyhedron.pyx":147
 *                 yy = (<NNC_Polyhedron> nnc_poly).thisptr
 *                 self.thisptr = new Poly(yy[0])
 *                 return             # <<<<<<<<<<<<<<
 *             raise ValueError(":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.")
 *         if "cons" in kwrds.keys():
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/polyhedron.pyx":144
 *         if "nnc_poly" in kwrds.keys():
 *             nnc_poly = kwrds.pop("nnc_poly")
 *             if isinstance(nnc_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *                 yy = (<NNC_Polyhedron> nnc_poly).thisptr
 *                 self.thisptr = new Poly(yy[0])
 */
    }

    /* "pplite/polyhedron.pyx":148
 *                 self.thisptr = new Poly(yy[0])
 *                 return
 *             raise ValueError(":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.")             # <<<<<<<<<<<<<<
 *         if "cons" in kwrds.keys():
 *             cons = kwrds.pop("cons")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 148, __pyx_L1_error)

    /* "pplite/polyhedron.pyx":142
 *                 return
 *             raise ValueError("double check inputs of constructor.")
 *         if "nnc_poly" in kwrds.keys():             # <<<<<<<<<<<<<<
 *             nnc_poly = kwrds.pop("nnc_poly")
 *             if isinstance(nnc_poly, NNC_Polyhedron):
 */
  }

  /* "pplite/polyhedron.pyx":149
 *                 return
 *             raise ValueError(":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.")
 *         if "cons" in kwrds.keys():             # <<<<<<<<<<<<<<
 *             cons = kwrds.pop("cons")
 *             d_cons = max([c.space_dimension() for c in cons])
 */
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_kwrds); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_cons, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "pplite/polyhedron.pyx":150
 *             raise ValueError(":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.")
 *         if "cons" in kwrds.keys():
 *             cons = kwrds.pop("cons")             # <<<<<<<<<<<<<<
 *             d_cons = max([c.space_dimension() for c in cons])
 *             if "dim_type" in kwrds.keys():
 */
    __pyx_t_3 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_cons, ((PyObject *)NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_cons = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/polyhedron.pyx":151
 *         if "cons" in kwrds.keys():
 *             cons = kwrds.pop("cons")
 *             d_cons = max([c.space_dimension() for c in cons])             # <<<<<<<<<<<<<<
 *             if "dim_type" in kwrds.keys():
 *                 d_in = kwrds.pop("dim_type")
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_cons)) || PyTuple_CheckExact(__pyx_v_cons)) {
        __pyx_t_8 = __pyx_v_cons; __Pyx_INCREF(__pyx_t_8);
        __pyx_t_1 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_cons); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 151, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 151, __pyx_L10_error)
      }
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 151, __pyx_L10_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_10); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 151, __pyx_L10_error)
            #else
            __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 151, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 151, __pyx_L10_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_10); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 151, __pyx_L10_error)
            #else
            __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 151, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_9(__pyx_t_8);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 151, __pyx_L10_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_c, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_c, __pyx_n_s_space_dimension); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 151, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 151, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 151, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_c); __pyx_7genexpr__pyx_v_c = 0;
      goto __pyx_L14_exit_scope;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_c); __pyx_7genexpr__pyx_v_c = 0;
      goto __pyx_L1_error;
      __pyx_L14_exit_scope:;
    } /* exit inner scope */
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_d_cons = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "pplite/polyhedron.pyx":152
 *             cons = kwrds.pop("cons")
 *             d_cons = max([c.space_dimension() for c in cons])
 *             if "dim_type" in kwrds.keys():             # <<<<<<<<<<<<<<
 *                 d_in = kwrds.pop("dim_type")
 *                 d = max(d_cons, d_in)
 */
    __pyx_t_8 = __Pyx_PyDict_Keys(__pyx_v_kwrds); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_dim_type, __pyx_t_8, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_2) {

      /* "pplite/polyhedron.pyx":153
 *             d_cons = max([c.space_dimension() for c in cons])
 *             if "dim_type" in kwrds.keys():
 *                 d_in = kwrds.pop("dim_type")             # <<<<<<<<<<<<<<
 *                 d = max(d_cons, d_in)
 *             else:
 */
      __pyx_t_8 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_dim_type, ((PyObject *)NULL)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_v_d_in = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "pplite/polyhedron.pyx":154
 *             if "dim_type" in kwrds.keys():
 *                 d_in = kwrds.pop("dim_type")
 *                 d = max(d_cons, d_in)             # <<<<<<<<<<<<<<
 *             else:
 *                 d = d_cons
 */
      __Pyx_INCREF(__pyx_v_d_in);
      __pyx_t_8 = __pyx_v_d_in;
      __Pyx_INCREF(__pyx_v_d_cons);
      __pyx_t_3 = __pyx_v_d_cons;
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 154, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_2) {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_10 = __pyx_t_8;
      } else {
        __Pyx_INCREF(__pyx_t_3);
        __pyx_t_10 = __pyx_t_3;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __pyx_t_10;
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_d = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "pplite/polyhedron.pyx":152
 *             cons = kwrds.pop("cons")
 *             d_cons = max([c.space_dimension() for c in cons])
 *             if "dim_type" in kwrds.keys():             # <<<<<<<<<<<<<<
 *                 d_in = kwrds.pop("dim_type")
 *                 d = max(d_cons, d_in)
 */
      goto __pyx_L15;
    }

    /* "pplite/polyhedron.pyx":156
 *                 d = max(d_cons, d_in)
 *             else:
 *                 d = d_cons             # <<<<<<<<<<<<<<
 *             dd = d
 *             ss =  string_to_Spec_Elem("universe")
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_v_d_cons);
      __pyx_v_d = __pyx_v_d_cons;
    }
    __pyx_L15:;

    /* "pplite/polyhedron.pyx":157
 *             else:
 *                 d = d_cons
 *             dd = d             # <<<<<<<<<<<<<<
 *             ss =  string_to_Spec_Elem("universe")
 *             tt = string_to_Topol("nnc")
 */
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_d); if (unlikely((__pyx_t_4 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L1_error)
    __pyx_v_dd = __pyx_t_4;

    /* "pplite/polyhedron.pyx":158
 *                 d = d_cons
 *             dd = d
 *             ss =  string_to_Spec_Elem("universe")             # <<<<<<<<<<<<<<
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)
 */
    __pyx_t_5 = __pyx_f_6pplite_10polyhedron_string_to_Spec_Elem(__pyx_n_u_universe); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L1_error)
    __pyx_v_ss = __pyx_t_5;

    /* "pplite/polyhedron.pyx":159
 *             dd = d
 *             ss =  string_to_Spec_Elem("universe")
 *             tt = string_to_Topol("nnc")             # <<<<<<<<<<<<<<
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for c in cons:
 */
    __pyx_t_6 = __pyx_f_6pplite_10polyhedron_string_to_Topol(__pyx_n_u_nnc); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L1_error)
    __pyx_v_tt = __pyx_t_6;

    /* "pplite/polyhedron.pyx":160
 *             ss =  string_to_Spec_Elem("universe")
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)             # <<<<<<<<<<<<<<
 *             for c in cons:
 *                 cc = (<Constraint> c).thisptr[0]
 */
    __pyx_v_self->thisptr = new pplite::Poly(__pyx_v_dd, __pyx_v_ss, __pyx_v_tt);

    /* "pplite/polyhedron.pyx":161
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for c in cons:             # <<<<<<<<<<<<<<
 *                 cc = (<Constraint> c).thisptr[0]
 *                 self.thisptr.add_con(cc)
 */
    if (likely(PyList_CheckExact(__pyx_v_cons)) || PyTuple_CheckExact(__pyx_v_cons)) {
      __pyx_t_8 = __pyx_v_cons; __Pyx_INCREF(__pyx_t_8);
      __pyx_t_1 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_cons); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 161, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 161, __pyx_L1_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_10); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 161, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 161, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 161, __pyx_L1_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_10); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 161, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 161, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_8);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 161, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "pplite/polyhedron.pyx":162
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for c in cons:
 *                 cc = (<Constraint> c).thisptr[0]             # <<<<<<<<<<<<<<
 *                 self.thisptr.add_con(cc)
 *             return
 */
      __pyx_v_cc = (((struct __pyx_obj_6pplite_10constraint_Constraint *)__pyx_v_c)->thisptr[0]);

      /* "pplite/polyhedron.pyx":163
 *             for c in cons:
 *                 cc = (<Constraint> c).thisptr[0]
 *                 self.thisptr.add_con(cc)             # <<<<<<<<<<<<<<
 *             return
 *         if kwrds["gens"]:
 */
      __pyx_v_self->thisptr->add_con(__pyx_v_cc);

      /* "pplite/polyhedron.pyx":161
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for c in cons:             # <<<<<<<<<<<<<<
 *                 cc = (<Constraint> c).thisptr[0]
 *                 self.thisptr.add_con(cc)
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pplite/polyhedron.pyx":164
 *                 cc = (<Constraint> c).thisptr[0]
 *                 self.thisptr.add_con(cc)
 *             return             # <<<<<<<<<<<<<<
 *         if kwrds["gens"]:
 *             gens = kwrds.pop("gens")
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":149
 *                 return
 *             raise ValueError(":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.")
 *         if "cons" in kwrds.keys():             # <<<<<<<<<<<<<<
 *             cons = kwrds.pop("cons")
 *             d_cons = max([c.space_dimension() for c in cons])
 */
  }

  /* "pplite/polyhedron.pyx":165
 *                 self.thisptr.add_con(cc)
 *             return
 *         if kwrds["gens"]:             # <<<<<<<<<<<<<<
 *             gens = kwrds.pop("gens")
 *             d_gens = max([g.space_dimension() for g in gens])
 */
  __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_kwrds, __pyx_n_u_gens); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_2) {

    /* "pplite/polyhedron.pyx":166
 *             return
 *         if kwrds["gens"]:
 *             gens = kwrds.pop("gens")             # <<<<<<<<<<<<<<
 *             d_gens = max([g.space_dimension() for g in gens])
 *             if kwrds["dim_type"]:
 */
    __pyx_t_8 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_gens, ((PyObject *)NULL)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_gens = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "pplite/polyhedron.pyx":167
 *         if kwrds["gens"]:
 *             gens = kwrds.pop("gens")
 *             d_gens = max([g.space_dimension() for g in gens])             # <<<<<<<<<<<<<<
 *             if kwrds["dim_type"]:
 *                 d_in = kwrds.pop("dim_type")
 */
    { /* enter inner scope */
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 167, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (likely(PyList_CheckExact(__pyx_v_gens)) || PyTuple_CheckExact(__pyx_v_gens)) {
        __pyx_t_10 = __pyx_v_gens; __Pyx_INCREF(__pyx_t_10);
        __pyx_t_1 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_gens); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 167, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L22_error)
      }
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_10);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 167, __pyx_L22_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 167, __pyx_L22_error)
            #else
            __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_10);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 167, __pyx_L22_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 167, __pyx_L22_error)
            #else
            __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_9(__pyx_t_10);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 167, __pyx_L22_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_g, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_g, __pyx_n_s_space_dimension); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 167, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 167, __pyx_L22_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_g); __pyx_8genexpr1__pyx_v_g = 0;
      goto __pyx_L26_exit_scope;
      __pyx_L22_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_g); __pyx_8genexpr1__pyx_v_g = 0;
      goto __pyx_L1_error;
      __pyx_L26_exit_scope:;
    } /* exit inner scope */
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_d_gens = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "pplite/polyhedron.pyx":168
 *             gens = kwrds.pop("gens")
 *             d_gens = max([g.space_dimension() for g in gens])
 *             if kwrds["dim_type"]:             # <<<<<<<<<<<<<<
 *                 d_in = kwrds.pop("dim_type")
 *                 d = max(d_gens, d_in)
 */
    __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_kwrds, __pyx_n_u_dim_type); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__pyx_t_2) {

      /* "pplite/polyhedron.pyx":169
 *             d_gens = max([g.space_dimension() for g in gens])
 *             if kwrds["dim_type"]:
 *                 d_in = kwrds.pop("dim_type")             # <<<<<<<<<<<<<<
 *                 d = max(d_gens, d_in)
 *             else:
 */
      __pyx_t_10 = __Pyx_PyDict_Pop(__pyx_v_kwrds, __pyx_n_u_dim_type, ((PyObject *)NULL)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_v_d_in = __pyx_t_10;
      __pyx_t_10 = 0;

      /* "pplite/polyhedron.pyx":170
 *             if kwrds["dim_type"]:
 *                 d_in = kwrds.pop("dim_type")
 *                 d = max(d_gens, d_in)             # <<<<<<<<<<<<<<
 *             else:
 *                 d = d_gens
 */
      __Pyx_INCREF(__pyx_v_d_in);
      __pyx_t_10 = __pyx_v_d_in;
      __Pyx_INCREF(__pyx_v_d_gens);
      __pyx_t_8 = __pyx_v_d_gens;
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_10, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 170, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_2) {
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_3 = __pyx_t_10;
      } else {
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_3 = __pyx_t_8;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_t_3;
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_d = __pyx_t_10;
      __pyx_t_10 = 0;

      /* "pplite/polyhedron.pyx":168
 *             gens = kwrds.pop("gens")
 *             d_gens = max([g.space_dimension() for g in gens])
 *             if kwrds["dim_type"]:             # <<<<<<<<<<<<<<
 *                 d_in = kwrds.pop("dim_type")
 *                 d = max(d_gens, d_in)
 */
      goto __pyx_L27;
    }

    /* "pplite/polyhedron.pyx":172
 *                 d = max(d_gens, d_in)
 *             else:
 *                 d = d_gens             # <<<<<<<<<<<<<<
 *             dd = d
 *             ss =  string_to_Spec_Elem("universe")
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_v_d_gens);
      __pyx_v_d = __pyx_v_d_gens;
    }
    __pyx_L27:;

    /* "pplite/polyhedron.pyx":173
 *             else:
 *                 d = d_gens
 *             dd = d             # <<<<<<<<<<<<<<
 *             ss =  string_to_Spec_Elem("universe")
 *             tt = string_to_Topol("nnc")
 */
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_d); if (unlikely((__pyx_t_4 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
    __pyx_v_dd = __pyx_t_4;

    /* "pplite/polyhedron.pyx":174
 *                 d = d_gens
 *             dd = d
 *             ss =  string_to_Spec_Elem("universe")             # <<<<<<<<<<<<<<
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)
 */
    __pyx_t_5 = __pyx_f_6pplite_10polyhedron_string_to_Spec_Elem(__pyx_n_u_universe); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __pyx_v_ss = __pyx_t_5;

    /* "pplite/polyhedron.pyx":175
 *             dd = d
 *             ss =  string_to_Spec_Elem("universe")
 *             tt = string_to_Topol("nnc")             # <<<<<<<<<<<<<<
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for g in gens:
 */
    __pyx_t_6 = __pyx_f_6pplite_10polyhedron_string_to_Topol(__pyx_n_u_nnc); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __pyx_v_tt = __pyx_t_6;

    /* "pplite/polyhedron.pyx":176
 *             ss =  string_to_Spec_Elem("universe")
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)             # <<<<<<<<<<<<<<
 *             for g in gens:
 *                 gg = (<PPliteGenerator> g).thisptr[0]
 */
    __pyx_v_self->thisptr = new pplite::Poly(__pyx_v_dd, __pyx_v_ss, __pyx_v_tt);

    /* "pplite/polyhedron.pyx":177
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for g in gens:             # <<<<<<<<<<<<<<
 *                 gg = (<PPliteGenerator> g).thisptr[0]
 *                 self.thisptr.add_gen(gg)
 */
    if (likely(PyList_CheckExact(__pyx_v_gens)) || PyTuple_CheckExact(__pyx_v_gens)) {
      __pyx_t_10 = __pyx_v_gens; __Pyx_INCREF(__pyx_t_10);
      __pyx_t_1 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_gens); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 177, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_10);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 177, __pyx_L1_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 177, __pyx_L1_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_10);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 177, __pyx_L1_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 177, __pyx_L1_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_10);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 177, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pplite/polyhedron.pyx":178
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for g in gens:
 *                 gg = (<PPliteGenerator> g).thisptr[0]             # <<<<<<<<<<<<<<
 *                 self.thisptr.add_gen(gg)
 *             return
 */
      __pyx_v_gg = (((struct __pyx_obj_6pplite_10generators_PPliteGenerator *)__pyx_v_g)->thisptr[0]);

      /* "pplite/polyhedron.pyx":179
 *             for g in gens:
 *                 gg = (<PPliteGenerator> g).thisptr[0]
 *                 self.thisptr.add_gen(gg)             # <<<<<<<<<<<<<<
 *             return
 *         raise ValueError("Poly Construction Failed")
 */
      __pyx_v_self->thisptr->add_gen(__pyx_v_gg);

      /* "pplite/polyhedron.pyx":177
 *             tt = string_to_Topol("nnc")
 *             self.thisptr = new Poly(dd, ss, tt)
 *             for g in gens:             # <<<<<<<<<<<<<<
 *                 gg = (<PPliteGenerator> g).thisptr[0]
 *                 self.thisptr.add_gen(gg)
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pplite/polyhedron.pyx":180
 *                 gg = (<PPliteGenerator> g).thisptr[0]
 *                 self.thisptr.add_gen(gg)
 *             return             # <<<<<<<<<<<<<<
 *         raise ValueError("Poly Construction Failed")
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":165
 *                 self.thisptr.add_con(cc)
 *             return
 *         if kwrds["gens"]:             # <<<<<<<<<<<<<<
 *             gens = kwrds.pop("gens")
 *             d_gens = max([g.space_dimension() for g in gens])
 */
  }

  /* "pplite/polyhedron.pyx":181
 *                 self.thisptr.add_gen(gg)
 *             return
 *         raise ValueError("Poly Construction Failed")             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_Raise(__pyx_t_10, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __PYX_ERR(0, 181, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":94
 *     True
 *     """
 *     def __init__(self, **kwrds):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_nnc_poly);
  __Pyx_XDECREF(__pyx_v_cons);
  __Pyx_XDECREF(__pyx_v_d_cons);
  __Pyx_XDECREF(__pyx_v_d_in);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_gens);
  __Pyx_XDECREF(__pyx_v_d_gens);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_c);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_g);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":183
 *         raise ValueError("Poly Construction Failed")
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_2__cinit__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_2__cinit__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  int __pyx_r;

  /* "pplite/polyhedron.pyx":184
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pplite/polyhedron.pyx":183
 *         raise ValueError("Poly Construction Failed")
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":186
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_4__dealloc__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_4__dealloc__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {

  /* "pplite/polyhedron.pyx":187
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pplite/polyhedron.pyx":186
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
}

/* "pplite/polyhedron.pyx":189
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].hash()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_7__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_7__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_6__hash__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_6__hash__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  Py_hash_t __pyx_r;

  /* "pplite/polyhedron.pyx":190
 * 
 *     def __hash__(self):
 *         return self.thisptr[0].hash()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = (__pyx_v_self->thisptr[0]).hash();
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":189
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].hash()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":192
 *         return self.thisptr[0].hash()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = ""
 *         if self.is_empty():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_9__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_9__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_8__repr__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_8__repr__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  int __pyx_v_comma;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "pplite/polyhedron.pyx":193
 * 
 *     def __repr__(self):
 *         s = ""             # <<<<<<<<<<<<<<
 *         if self.is_empty():
 *             s = "false" # from pplite::Poly_Impl::print()
 */
  __Pyx_INCREF(__pyx_kp_u__4);
  __pyx_v_s = __pyx_kp_u__4;

  /* "pplite/polyhedron.pyx":194
 *     def __repr__(self):
 *         s = ""
 *         if self.is_empty():             # <<<<<<<<<<<<<<
 *             s = "false" # from pplite::Poly_Impl::print()
 *             return s
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "pplite/polyhedron.pyx":195
 *         s = ""
 *         if self.is_empty():
 *             s = "false" # from pplite::Poly_Impl::print()             # <<<<<<<<<<<<<<
 *             return s
 *         self.minimize()
 */
    __Pyx_INCREF(__pyx_n_u_false);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_n_u_false);

    /* "pplite/polyhedron.pyx":196
 *         if self.is_empty():
 *             s = "false" # from pplite::Poly_Impl::print()
 *             return s             # <<<<<<<<<<<<<<
 *         self.minimize()
 *         comma = False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_s);
    __pyx_r = __pyx_v_s;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":194
 *     def __repr__(self):
 *         s = ""
 *         if self.is_empty():             # <<<<<<<<<<<<<<
 *             s = "false" # from pplite::Poly_Impl::print()
 *             return s
 */
  }

  /* "pplite/polyhedron.pyx":197
 *             s = "false" # from pplite::Poly_Impl::print()
 *             return s
 *         self.minimize()             # <<<<<<<<<<<<<<
 *         comma = False
 *         for c in self.constraints():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_minimize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pplite/polyhedron.pyx":198
 *             return s
 *         self.minimize()
 *         comma = False             # <<<<<<<<<<<<<<
 *         for c in self.constraints():
 *             if comma:
 */
  __pyx_v_comma = 0;

  /* "pplite/polyhedron.pyx":199
 *         self.minimize()
 *         comma = False
 *         for c in self.constraints():             # <<<<<<<<<<<<<<
 *             if comma:
 *                 s += ", "
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_constraints); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 199, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 199, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 199, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 199, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 199, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pplite/polyhedron.pyx":200
 *         comma = False
 *         for c in self.constraints():
 *             if comma:             # <<<<<<<<<<<<<<
 *                 s += ", "
 *             s +=  str(c)
 */
    if (__pyx_v_comma) {

      /* "pplite/polyhedron.pyx":201
 *         for c in self.constraints():
 *             if comma:
 *                 s += ", "             # <<<<<<<<<<<<<<
 *             s +=  str(c)
 *             comma = True
 */
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_kp_u__5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pplite/polyhedron.pyx":200
 *         comma = False
 *         for c in self.constraints():
 *             if comma:             # <<<<<<<<<<<<<<
 *                 s += ", "
 *             s +=  str(c)
 */
    }

    /* "pplite/polyhedron.pyx":202
 *             if comma:
 *                 s += ", "
 *             s +=  str(c)             # <<<<<<<<<<<<<<
 *             comma = True
 *         return s
 */
    __pyx_t_1 = __Pyx_PyObject_Unicode(__pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/polyhedron.pyx":203
 *                 s += ", "
 *             s +=  str(c)
 *             comma = True             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __pyx_v_comma = 1;

    /* "pplite/polyhedron.pyx":199
 *         self.minimize()
 *         comma = False
 *         for c in self.constraints():             # <<<<<<<<<<<<<<
 *             if comma:
 *                 s += ", "
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pplite/polyhedron.pyx":204
 *             s +=  str(c)
 *             comma = True
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":192
 *         return self.thisptr[0].hash()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         s = ""
 *         if self.is_empty():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":206
 *         return s
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, NNC_Polyhedron):
 *             return self.equals(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_11__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_11__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_10__eq__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_10__eq__(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 1);

  /* "pplite/polyhedron.pyx":207
 * 
 *     def __eq__(self, other):
 *         if isinstance(other, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             return self.equals(other)
 *         raise TypeError("Comparison with NNC polys only!")
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":208
 *     def __eq__(self, other):
 *         if isinstance(other, NNC_Polyhedron):
 *             return self.equals(other)             # <<<<<<<<<<<<<<
 *         raise TypeError("Comparison with NNC polys only!")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_equals); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_other};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":207
 * 
 *     def __eq__(self, other):
 *         if isinstance(other, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             return self.equals(other)
 *         raise TypeError("Comparison with NNC polys only!")
 */
  }

  /* "pplite/polyhedron.pyx":209
 *         if isinstance(other, NNC_Polyhedron):
 *             return self.equals(other)
 *         raise TypeError("Comparison with NNC polys only!")             # <<<<<<<<<<<<<<
 * 
 *     def is_necessarily_closed(self):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 209, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":206
 *         return s
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, NNC_Polyhedron):
 *             return self.equals(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":211
 *         raise TypeError("Comparison with NNC polys only!")
 * 
 *     def is_necessarily_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_13is_necessarily_closed(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_12is_necessarily_closed, "NNC_Polyhedron.is_necessarily_closed(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_13is_necessarily_closed = {"is_necessarily_closed", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_13is_necessarily_closed, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_12is_necessarily_closed};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_13is_necessarily_closed(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_necessarily_closed (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_necessarily_closed", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_necessarily_closed", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_12is_necessarily_closed(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_12is_necessarily_closed(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_necessarily_closed", 1);

  /* "pplite/polyhedron.pyx":212
 * 
 *     def is_necessarily_closed(self):
 *         return self.thisptr[0].is_necessarily_closed()             # <<<<<<<<<<<<<<
 * 
 *     def check_inv(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_necessarily_closed()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":211
 *         raise TypeError("Comparison with NNC polys only!")
 * 
 *     def is_necessarily_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_necessarily_closed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":214
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 *     def check_inv(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].check_inv()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_15check_inv(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_14check_inv, "NNC_Polyhedron.check_inv(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_15check_inv = {"check_inv", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_15check_inv, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_14check_inv};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_15check_inv(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_inv (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("check_inv", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "check_inv", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_14check_inv(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_14check_inv(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_inv", 1);

  /* "pplite/polyhedron.pyx":215
 * 
 *     def check_inv(self):
 *         return self.thisptr[0].check_inv()             # <<<<<<<<<<<<<<
 * 
 *     def is_empty(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).check_inv()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":214
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 *     def check_inv(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].check_inv()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.check_inv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":217
 *         return self.thisptr[0].check_inv()
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_empty()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_17is_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_16is_empty, "NNC_Polyhedron.is_empty(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_17is_empty = {"is_empty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_17is_empty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_16is_empty};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_17is_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_empty (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_empty", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_empty", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_16is_empty(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_16is_empty(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_empty", 1);

  /* "pplite/polyhedron.pyx":218
 * 
 *     def is_empty(self):
 *         return self.thisptr[0].is_empty()             # <<<<<<<<<<<<<<
 * 
 *     def is_universe(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_empty()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":217
 *         return self.thisptr[0].check_inv()
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_empty()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":220
 *         return self.thisptr[0].is_empty()
 * 
 *     def is_universe(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_universe()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_19is_universe(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_18is_universe, "NNC_Polyhedron.is_universe(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_19is_universe = {"is_universe", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_19is_universe, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_18is_universe};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_19is_universe(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_universe (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_universe", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_universe", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_18is_universe(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_18is_universe(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_universe", 1);

  /* "pplite/polyhedron.pyx":221
 * 
 *     def is_universe(self):
 *         return self.thisptr[0].is_universe()             # <<<<<<<<<<<<<<
 * 
 *     def is_minimized(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_universe()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":220
 *         return self.thisptr[0].is_empty()
 * 
 *     def is_universe(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_universe()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_universe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":223
 *         return self.thisptr[0].is_universe()
 * 
 *     def is_minimized(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_minimized()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_21is_minimized(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_20is_minimized, "NNC_Polyhedron.is_minimized(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_21is_minimized = {"is_minimized", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_21is_minimized, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_20is_minimized};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_21is_minimized(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_minimized (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_minimized", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_minimized", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_20is_minimized(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_20is_minimized(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_minimized", 1);

  /* "pplite/polyhedron.pyx":224
 * 
 *     def is_minimized(self):
 *         return self.thisptr[0].is_minimized()             # <<<<<<<<<<<<<<
 * 
 *     def is_topologically_closed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_minimized()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":223
 *         return self.thisptr[0].is_universe()
 * 
 *     def is_minimized(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_minimized()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_minimized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":226
 *         return self.thisptr[0].is_minimized()
 * 
 *     def is_topologically_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_topologically_closed()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_23is_topologically_closed(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_22is_topologically_closed, "NNC_Polyhedron.is_topologically_closed(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_23is_topologically_closed = {"is_topologically_closed", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_23is_topologically_closed, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_22is_topologically_closed};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_23is_topologically_closed(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_topologically_closed (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_topologically_closed", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_topologically_closed", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_22is_topologically_closed(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_22is_topologically_closed(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_topologically_closed", 1);

  /* "pplite/polyhedron.pyx":227
 * 
 *     def is_topologically_closed(self):
 *         return self.thisptr[0].is_topologically_closed()             # <<<<<<<<<<<<<<
 * 
 *     def is_bounded(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_topologically_closed()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":226
 *         return self.thisptr[0].is_minimized()
 * 
 *     def is_topologically_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_topologically_closed()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_topologically_closed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":229
 *         return self.thisptr[0].is_topologically_closed()
 * 
 *     def is_bounded(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_bounded()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_25is_bounded(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_24is_bounded, "NNC_Polyhedron.is_bounded(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_25is_bounded = {"is_bounded", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_25is_bounded, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_24is_bounded};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_25is_bounded(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_bounded (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_bounded", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_bounded", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_24is_bounded(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_24is_bounded(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_bounded", 1);

  /* "pplite/polyhedron.pyx":230
 * 
 *     def is_bounded(self):
 *         return self.thisptr[0].is_bounded()             # <<<<<<<<<<<<<<
 * 
 *     def is_bounded_expression(self, from_below, expression):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_bounded()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":229
 *         return self.thisptr[0].is_topologically_closed()
 * 
 *     def is_bounded(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_bounded()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_bounded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":232
 *         return self.thisptr[0].is_bounded()
 * 
 *     def is_bounded_expression(self, from_below, expression):             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr expr
 *         if isinstance(expression, Linear_Expression):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_27is_bounded_expression(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_26is_bounded_expression, "NNC_Polyhedron.is_bounded_expression(self, from_below, expression)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_27is_bounded_expression = {"is_bounded_expression", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_27is_bounded_expression, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_26is_bounded_expression};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_27is_bounded_expression(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_from_below = 0;
  PyObject *__pyx_v_expression = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_bounded_expression (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_below,&__pyx_n_s_expression,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_from_below)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_expression)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("is_bounded_expression", 1, 2, 2, 1); __PYX_ERR(0, 232, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_bounded_expression") < 0)) __PYX_ERR(0, 232, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_from_below = values[0];
    __pyx_v_expression = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_bounded_expression", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 232, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_bounded_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_26is_bounded_expression(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_from_below, __pyx_v_expression);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_26is_bounded_expression(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_from_below, PyObject *__pyx_v_expression) {
  pplite::Linear_Expr __pyx_v_expr;
  bool __pyx_v_f_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_bounded_expression", 1);

  /* "pplite/polyhedron.pyx":234
 *     def is_bounded_expression(self, from_below, expression):
 *         cdef Linear_Expr expr
 *         if isinstance(expression, Linear_Expression):             # <<<<<<<<<<<<<<
 *             expr = (<Linear_Expression> expression).thisptr[0]
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_expression, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (likely(__pyx_t_1)) {

    /* "pplite/polyhedron.pyx":235
 *         cdef Linear_Expr expr
 *         if isinstance(expression, Linear_Expression):
 *             expr = (<Linear_Expression> expression).thisptr[0]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("expression needs to be of :class:`Linear_Expression`.")
 */
    __pyx_v_expr = (((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_expression)->thisptr[0]);

    /* "pplite/polyhedron.pyx":234
 *     def is_bounded_expression(self, from_below, expression):
 *         cdef Linear_Expr expr
 *         if isinstance(expression, Linear_Expression):             # <<<<<<<<<<<<<<
 *             expr = (<Linear_Expression> expression).thisptr[0]
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/polyhedron.pyx":237
 *             expr = (<Linear_Expression> expression).thisptr[0]
 *         else:
 *             raise TypeError("expression needs to be of :class:`Linear_Expression`.")             # <<<<<<<<<<<<<<
 *         cdef cppbool f_b
 *         f_b = from_below
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pplite/polyhedron.pyx":239
 *             raise TypeError("expression needs to be of :class:`Linear_Expression`.")
 *         cdef cppbool f_b
 *         f_b = from_below             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_bounded_expr(f_b, expr)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_from_below); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_v_f_b = __pyx_t_3;

  /* "pplite/polyhedron.pyx":240
 *         cdef cppbool f_b
 *         f_b = from_below
 *         return self.thisptr[0].is_bounded_expr(f_b, expr)             # <<<<<<<<<<<<<<
 * 
 *     def constrains(self,variable):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_bounded_expr(__pyx_v_f_b, __pyx_v_expr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":232
 *         return self.thisptr[0].is_bounded()
 * 
 *     def is_bounded_expression(self, from_below, expression):             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr expr
 *         if isinstance(expression, Linear_Expression):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_bounded_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":242
 *         return self.thisptr[0].is_bounded_expr(f_b, expr)
 * 
 *     def constrains(self,variable):             # <<<<<<<<<<<<<<
 *         cdef Var* vv
 *         if isinstance(variable, Variable):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_29constrains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_28constrains, "NNC_Polyhedron.constrains(self, variable)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_29constrains = {"constrains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_29constrains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_28constrains};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_29constrains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_variable = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constrains (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_variable)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "constrains") < 0)) __PYX_ERR(0, 242, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_variable = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("constrains", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 242, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.constrains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_28constrains(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_variable);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_28constrains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable) {
  pplite::Var *__pyx_v_vv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Var *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("constrains", 1);

  /* "pplite/polyhedron.pyx":244
 *     def constrains(self,variable):
 *         cdef Var* vv
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             vv = (<Variable> variable).thisptr
 *             return self.thisptr[0].constrains(vv[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_variable, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":245
 *         cdef Var* vv
 *         if isinstance(variable, Variable):
 *             vv = (<Variable> variable).thisptr             # <<<<<<<<<<<<<<
 *             return self.thisptr[0].constrains(vv[0])
 *         raise TypeError("variable needs to be of :class:`Variable`.")
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_variable)->thisptr;
    __pyx_v_vv = __pyx_t_2;

    /* "pplite/polyhedron.pyx":246
 *         if isinstance(variable, Variable):
 *             vv = (<Variable> variable).thisptr
 *             return self.thisptr[0].constrains(vv[0])             # <<<<<<<<<<<<<<
 *         raise TypeError("variable needs to be of :class:`Variable`.")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).constrains((__pyx_v_vv[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":244
 *     def constrains(self,variable):
 *         cdef Var* vv
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             vv = (<Variable> variable).thisptr
 *             return self.thisptr[0].constrains(vv[0])
 */
  }

  /* "pplite/polyhedron.pyx":247
 *             vv = (<Variable> variable).thisptr
 *             return self.thisptr[0].constrains(vv[0])
 *         raise TypeError("variable needs to be of :class:`Variable`.")             # <<<<<<<<<<<<<<
 * 
 *     def equals(self, other_poly):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 247, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":242
 *         return self.thisptr[0].is_bounded_expr(f_b, expr)
 * 
 *     def constrains(self,variable):             # <<<<<<<<<<<<<<
 *         cdef Var* vv
 *         if isinstance(variable, Variable):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.constrains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":249
 *         raise TypeError("variable needs to be of :class:`Variable`.")
 * 
 *     def equals(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_31equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_30equals, "NNC_Polyhedron.equals(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_31equals = {"equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_31equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_30equals};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_31equals(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equals (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "equals") < 0)) __PYX_ERR(0, 249, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("equals", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 249, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_30equals(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_30equals(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equals", 1);

  /* "pplite/polyhedron.pyx":251
 *     def equals(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].equals(yy[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":252
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             return self.thisptr[0].equals(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_yy = __pyx_t_2;

    /* "pplite/polyhedron.pyx":253
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].equals(yy[0])             # <<<<<<<<<<<<<<
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).equals((__pyx_v_yy[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":251
 *     def equals(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].equals(yy[0])
 */
  }

  /* "pplite/polyhedron.pyx":254
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].equals(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")             # <<<<<<<<<<<<<<
 * 
 *     def contains(self, other_poly):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 254, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":249
 *         raise TypeError("variable needs to be of :class:`Variable`.")
 * 
 *     def equals(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":256
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_33contains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_32contains, "NNC_Polyhedron.contains(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_33contains = {"contains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_33contains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_32contains};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_33contains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("contains (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "contains") < 0)) __PYX_ERR(0, 256, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("contains", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 256, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_32contains(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_32contains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("contains", 1);

  /* "pplite/polyhedron.pyx":258
 *     def contains(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].contains(yy[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":259
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             return self.thisptr[0].contains(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_yy = __pyx_t_2;

    /* "pplite/polyhedron.pyx":260
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].contains(yy[0])             # <<<<<<<<<<<<<<
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).contains((__pyx_v_yy[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":258
 *     def contains(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].contains(yy[0])
 */
  }

  /* "pplite/polyhedron.pyx":261
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].contains(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")             # <<<<<<<<<<<<<<
 * 
 *     def strictly_contains(self, other_poly):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 261, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":256
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":263
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def strictly_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_35strictly_contains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_34strictly_contains, "NNC_Polyhedron.strictly_contains(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_35strictly_contains = {"strictly_contains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_35strictly_contains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_34strictly_contains};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_35strictly_contains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strictly_contains (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "strictly_contains") < 0)) __PYX_ERR(0, 263, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("strictly_contains", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.strictly_contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_34strictly_contains(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_34strictly_contains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("strictly_contains", 1);

  /* "pplite/polyhedron.pyx":265
 *     def strictly_contains(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].strictly_contains(yy[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":266
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             return self.thisptr[0].strictly_contains(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_yy = __pyx_t_2;

    /* "pplite/polyhedron.pyx":267
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].strictly_contains(yy[0])             # <<<<<<<<<<<<<<
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).strictly_contains((__pyx_v_yy[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":265
 *     def strictly_contains(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].strictly_contains(yy[0])
 */
  }

  /* "pplite/polyhedron.pyx":268
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].strictly_contains(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")             # <<<<<<<<<<<<<<
 * 
 *     def is_disjoint_from(self, other_poly):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 268, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":263
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def strictly_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.strictly_contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":270
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def is_disjoint_from(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_37is_disjoint_from(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_36is_disjoint_from, "NNC_Polyhedron.is_disjoint_from(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_37is_disjoint_from = {"is_disjoint_from", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_37is_disjoint_from, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_36is_disjoint_from};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_37is_disjoint_from(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_disjoint_from (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_disjoint_from") < 0)) __PYX_ERR(0, 270, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_disjoint_from", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 270, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_disjoint_from", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_36is_disjoint_from(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_36is_disjoint_from(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_disjoint_from", 1);

  /* "pplite/polyhedron.pyx":272
 *     def is_disjoint_from(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].is_disjoint_from(yy[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":273
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             return self.thisptr[0].is_disjoint_from(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_yy = __pyx_t_2;

    /* "pplite/polyhedron.pyx":274
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].is_disjoint_from(yy[0])             # <<<<<<<<<<<<<<
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).is_disjoint_from((__pyx_v_yy[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":272
 *     def is_disjoint_from(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].is_disjoint_from(yy[0])
 */
  }

  /* "pplite/polyhedron.pyx":275
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].is_disjoint_from(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")             # <<<<<<<<<<<<<<
 * 
 *     def get_bounding_box(self):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 275, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":270
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def is_disjoint_from(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.is_disjoint_from", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":277
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def get_bounding_box(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_39get_bounding_box(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_38get_bounding_box, "NNC_Polyhedron.get_bounding_box(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_39get_bounding_box = {"get_bounding_box", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_39get_bounding_box, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_38get_bounding_box};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_39get_bounding_box(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bounding_box (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_bounding_box", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_bounding_box", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_38get_bounding_box(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_38get_bounding_box(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bounding_box", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":280
 *         pass
 * 
 *     def boxed_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_41boxed_contains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_40boxed_contains, "NNC_Polyhedron.boxed_contains(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_41boxed_contains = {"boxed_contains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_41boxed_contains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_40boxed_contains};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_41boxed_contains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("boxed_contains (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "boxed_contains") < 0)) __PYX_ERR(0, 280, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("boxed_contains", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 280, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.boxed_contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_40boxed_contains(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_40boxed_contains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("boxed_contains", 1);

  /* "pplite/polyhedron.pyx":282
 *     def boxed_contains(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].boxed_contains(yy[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":283
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             return self.thisptr[0].boxed_contains(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_yy = __pyx_t_2;

    /* "pplite/polyhedron.pyx":284
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].boxed_contains(yy[0])             # <<<<<<<<<<<<<<
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).boxed_contains((__pyx_v_yy[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":282
 *     def boxed_contains(self, other_poly):
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].boxed_contains(yy[0])
 */
  }

  /* "pplite/polyhedron.pyx":285
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].boxed_contains(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")             # <<<<<<<<<<<<<<
 * 
 *     # queries
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 285, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":280
 *         pass
 * 
 *     def boxed_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.boxed_contains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":288
 * 
 *     # queries
 *     def topology(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_43topology(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_42topology, "NNC_Polyhedron.topology(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_43topology = {"topology", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_43topology, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_42topology};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_43topology(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topology (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("topology", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "topology", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_42topology(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_42topology(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topology", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":291
 *         pass
 * 
 *     def space_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.space_dim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_45space_dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_44space_dim, "NNC_Polyhedron.space_dim(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_45space_dim = {"space_dim", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_45space_dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_44space_dim};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_45space_dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("space_dim (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("space_dim", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "space_dim", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_44space_dim(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_44space_dim(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("space_dim", 1);

  /* "pplite/polyhedron.pyx":292
 * 
 *     def space_dim(self):
 *         return self.thisptr.space_dim()             # <<<<<<<<<<<<<<
 * 
 *     def affine_dim(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->space_dim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":291
 *         pass
 * 
 *     def space_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.space_dim()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.space_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":294
 *         return self.thisptr.space_dim()
 * 
 *     def affine_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].affine_dim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_47affine_dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_46affine_dim, "NNC_Polyhedron.affine_dim(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_47affine_dim = {"affine_dim", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_47affine_dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_46affine_dim};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_47affine_dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("affine_dim (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("affine_dim", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "affine_dim", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_46affine_dim(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_46affine_dim(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("affine_dim", 1);

  /* "pplite/polyhedron.pyx":295
 * 
 *     def affine_dim(self):
 *         return self.thisptr[0].affine_dim()             # <<<<<<<<<<<<<<
 * 
 *     def _relation_with_c(self, constraint):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->thisptr[0]).affine_dim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":294
 *         return self.thisptr.space_dim()
 * 
 *     def affine_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].affine_dim()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.affine_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":297
 *         return self.thisptr[0].affine_dim()
 * 
 *     def _relation_with_c(self, constraint):             # <<<<<<<<<<<<<<
 *         cdef Con cc
 *         cdef Poly_Con_Rel p_c_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_49_relation_with_c(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_48_relation_with_c, "NNC_Polyhedron._relation_with_c(self, constraint)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_49_relation_with_c = {"_relation_with_c", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_49_relation_with_c, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_48_relation_with_c};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_49_relation_with_c(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_constraint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_relation_with_c (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_constraint,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_constraint)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_relation_with_c") < 0)) __PYX_ERR(0, 297, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_constraint = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_relation_with_c", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 297, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._relation_with_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_48_relation_with_c(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_constraint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_48_relation_with_c(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_constraint) {
  pplite::Con __pyx_v_cc;
  pplite::Poly_Con_Rel __pyx_v_p_c_r;
  struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_relation_with_c", 1);

  /* "pplite/polyhedron.pyx":300
 *         cdef Con cc
 *         cdef Poly_Con_Rel p_c_r
 *         if isinstance(constraint, Constraint):             # <<<<<<<<<<<<<<
 *             cc = (<Constraint> constraint).thisptr[0]
 *             p_c_r = self.thisptr[0].relation_with(cc)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_constraint, __pyx_ptype_6pplite_10constraint_Constraint); 
  if (likely(__pyx_t_1)) {

    /* "pplite/polyhedron.pyx":301
 *         cdef Poly_Con_Rel p_c_r
 *         if isinstance(constraint, Constraint):
 *             cc = (<Constraint> constraint).thisptr[0]             # <<<<<<<<<<<<<<
 *             p_c_r = self.thisptr[0].relation_with(cc)
 *             result = Polyhedron_Constraint_Rel()
 */
    __pyx_v_cc = (((struct __pyx_obj_6pplite_10constraint_Constraint *)__pyx_v_constraint)->thisptr[0]);

    /* "pplite/polyhedron.pyx":302
 *         if isinstance(constraint, Constraint):
 *             cc = (<Constraint> constraint).thisptr[0]
 *             p_c_r = self.thisptr[0].relation_with(cc)             # <<<<<<<<<<<<<<
 *             result = Polyhedron_Constraint_Rel()
 *             result.thisptr[0] = p_c_r
 */
    __pyx_v_p_c_r = (__pyx_v_self->thisptr[0]).relation_with(__pyx_v_cc);

    /* "pplite/polyhedron.pyx":303
 *             cc = (<Constraint> constraint).thisptr[0]
 *             p_c_r = self.thisptr[0].relation_with(cc)
 *             result = Polyhedron_Constraint_Rel()             # <<<<<<<<<<<<<<
 *             result.thisptr[0] = p_c_r
 *             return result
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_result = ((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/polyhedron.pyx":304
 *             p_c_r = self.thisptr[0].relation_with(cc)
 *             result = Polyhedron_Constraint_Rel()
 *             result.thisptr[0] = p_c_r             # <<<<<<<<<<<<<<
 *             return result
 *         else:
 */
    (__pyx_v_result->thisptr[0]) = __pyx_v_p_c_r;

    /* "pplite/polyhedron.pyx":305
 *             result = Polyhedron_Constraint_Rel()
 *             result.thisptr[0] = p_c_r
 *             return result             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":300
 *         cdef Con cc
 *         cdef Poly_Con_Rel p_c_r
 *         if isinstance(constraint, Constraint):             # <<<<<<<<<<<<<<
 *             cc = (<Constraint> constraint).thisptr[0]
 *             p_c_r = self.thisptr[0].relation_with(cc)
 */
  }

  /* "pplite/polyhedron.pyx":307
 *             return result
 *         else:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *     def _relation_with_g(self, generator):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 307, __pyx_L1_error)
  }

  /* "pplite/polyhedron.pyx":297
 *         return self.thisptr[0].affine_dim()
 * 
 *     def _relation_with_c(self, constraint):             # <<<<<<<<<<<<<<
 *         cdef Con cc
 *         cdef Poly_Con_Rel p_c_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._relation_with_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":309
 *             raise TypeError()
 * 
 *     def _relation_with_g(self, generator):             # <<<<<<<<<<<<<<
 *         cdef Gen gg
 *         cdef Poly_Gen_Rel p_g_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_51_relation_with_g(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_50_relation_with_g, "NNC_Polyhedron._relation_with_g(self, generator)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_51_relation_with_g = {"_relation_with_g", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_51_relation_with_g, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_50_relation_with_g};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_51_relation_with_g(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_generator = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_relation_with_g (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_generator,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_generator)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_relation_with_g") < 0)) __PYX_ERR(0, 309, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_generator = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_relation_with_g", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 309, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._relation_with_g", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_50_relation_with_g(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_generator);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_50_relation_with_g(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_generator) {
  pplite::Gen __pyx_v_gg;
  pplite::Poly_Gen_Rel __pyx_v_p_g_r;
  struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_relation_with_g", 1);

  /* "pplite/polyhedron.pyx":312
 *         cdef Gen gg
 *         cdef Poly_Gen_Rel p_g_r
 *         if isinstance(generator, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             gg = (<PPliteGenerator> generator).thisptr[0]
 *             p_g_r = self.thisptr[0].relation_with(gg)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_generator, __pyx_ptype_6pplite_10generators_PPliteGenerator); 
  if (likely(__pyx_t_1)) {

    /* "pplite/polyhedron.pyx":313
 *         cdef Poly_Gen_Rel p_g_r
 *         if isinstance(generator, PPliteGenerator):
 *             gg = (<PPliteGenerator> generator).thisptr[0]             # <<<<<<<<<<<<<<
 *             p_g_r = self.thisptr[0].relation_with(gg)
 *             result = Polyhedron_Generator_Rel()
 */
    __pyx_v_gg = (((struct __pyx_obj_6pplite_10generators_PPliteGenerator *)__pyx_v_generator)->thisptr[0]);

    /* "pplite/polyhedron.pyx":314
 *         if isinstance(generator, PPliteGenerator):
 *             gg = (<PPliteGenerator> generator).thisptr[0]
 *             p_g_r = self.thisptr[0].relation_with(gg)             # <<<<<<<<<<<<<<
 *             result = Polyhedron_Generator_Rel()
 *             result.thisptr[0] = p_g_r
 */
    __pyx_v_p_g_r = (__pyx_v_self->thisptr[0]).relation_with(__pyx_v_gg);

    /* "pplite/polyhedron.pyx":315
 *             gg = (<PPliteGenerator> generator).thisptr[0]
 *             p_g_r = self.thisptr[0].relation_with(gg)
 *             result = Polyhedron_Generator_Rel()             # <<<<<<<<<<<<<<
 *             result.thisptr[0] = p_g_r
 *             return result
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_result = ((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/polyhedron.pyx":316
 *             p_g_r = self.thisptr[0].relation_with(gg)
 *             result = Polyhedron_Generator_Rel()
 *             result.thisptr[0] = p_g_r             # <<<<<<<<<<<<<<
 *             return result
 *         else:
 */
    (__pyx_v_result->thisptr[0]) = __pyx_v_p_g_r;

    /* "pplite/polyhedron.pyx":317
 *             result = Polyhedron_Generator_Rel()
 *             result.thisptr[0] = p_g_r
 *             return result             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":312
 *         cdef Gen gg
 *         cdef Poly_Gen_Rel p_g_r
 *         if isinstance(generator, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             gg = (<PPliteGenerator> generator).thisptr[0]
 *             p_g_r = self.thisptr[0].relation_with(gg)
 */
  }

  /* "pplite/polyhedron.pyx":319
 *             return result
 *         else:
 *             raise TypeError("A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.")             # <<<<<<<<<<<<<<
 * 
 *     def relation_with(self, gen_or_constraint):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 319, __pyx_L1_error)
  }

  /* "pplite/polyhedron.pyx":309
 *             raise TypeError()
 * 
 *     def _relation_with_g(self, generator):             # <<<<<<<<<<<<<<
 *         cdef Gen gg
 *         cdef Poly_Gen_Rel p_g_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._relation_with_g", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":321
 *             raise TypeError("A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.")
 * 
 *     def relation_with(self, gen_or_constraint):             # <<<<<<<<<<<<<<
 *         try:
 *             return self._relation_with_c(gen_or_constraint)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_53relation_with(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_52relation_with, "NNC_Polyhedron.relation_with(self, gen_or_constraint)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_53relation_with = {"relation_with", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_53relation_with, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_52relation_with};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_53relation_with(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_gen_or_constraint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relation_with (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gen_or_constraint,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_gen_or_constraint)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 321, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "relation_with") < 0)) __PYX_ERR(0, 321, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_gen_or_constraint = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("relation_with", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 321, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.relation_with", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_52relation_with(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_gen_or_constraint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_52relation_with(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_gen_or_constraint) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("relation_with", 1);

  /* "pplite/polyhedron.pyx":322
 * 
 *     def relation_with(self, gen_or_constraint):
 *         try:             # <<<<<<<<<<<<<<
 *             return self._relation_with_c(gen_or_constraint)
 *         except TypeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "pplite/polyhedron.pyx":323
 *     def relation_with(self, gen_or_constraint):
 *         try:
 *             return self._relation_with_c(gen_or_constraint)             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             return self._relation_with_g(gen_or_constraint)  # failure here will raise the right type error for the general method.
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_relation_with_c); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_gen_or_constraint};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_try_return;

      /* "pplite/polyhedron.pyx":322
 * 
 *     def relation_with(self, gen_or_constraint):
 *         try:             # <<<<<<<<<<<<<<
 *             return self._relation_with_c(gen_or_constraint)
 *         except TypeError:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pplite/polyhedron.pyx":324
 *         try:
 *             return self._relation_with_c(gen_or_constraint)
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             return self._relation_with_g(gen_or_constraint)  # failure here will raise the right type error for the general method.
 * 
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.relation_with", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 324, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "pplite/polyhedron.pyx":325
 *             return self._relation_with_c(gen_or_constraint)
 *         except TypeError:
 *             return self._relation_with_g(gen_or_constraint)  # failure here will raise the right type error for the general method.             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_relation_with_g); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 325, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_gen_or_constraint};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 325, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_r = __pyx_t_9;
      __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;

    /* "pplite/polyhedron.pyx":322
 * 
 *     def relation_with(self, gen_or_constraint):
 *         try:             # <<<<<<<<<<<<<<
 *             return self._relation_with_c(gen_or_constraint)
 *         except TypeError:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "pplite/polyhedron.pyx":321
 *             raise TypeError("A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.")
 * 
 *     def relation_with(self, gen_or_constraint):             # <<<<<<<<<<<<<<
 *         try:
 *             return self._relation_with_c(gen_or_constraint)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.relation_with", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":329
 * 
 * 
 *     def min(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_55min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_54min, "NNC_Polyhedron.min(self, affine_expr, value, included_pointer, gen_object)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_55min = {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_55min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_54min};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_55min(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_affine_expr = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_included_pointer = 0;
  PyObject *__pyx_v_gen_object = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_affine_expr,&__pyx_n_s_value,&__pyx_n_s_included_pointer,&__pyx_n_s_gen_object,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_affine_expr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("min", 1, 4, 4, 1); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_included_pointer)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("min", 1, 4, 4, 2); __PYX_ERR(0, 329, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_gen_object)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("min", 1, 4, 4, 3); __PYX_ERR(0, 329, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "min") < 0)) __PYX_ERR(0, 329, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_affine_expr = values[0];
    __pyx_v_value = values[1];
    __pyx_v_included_pointer = values[2];
    __pyx_v_gen_object = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("min", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 329, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_54min(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_affine_expr, __pyx_v_value, __pyx_v_included_pointer, __pyx_v_gen_object);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_54min(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_affine_expr, PyObject *__pyx_v_value, PyObject *__pyx_v_included_pointer, PyObject *__pyx_v_gen_object) {
  pplite::Affine_Expr __pyx_v_ae;
  pplite::FLINT_Rational __pyx_v_val;
  bool *__pyx_v_included_ptr;
  pplite::Gen *__pyx_v_g_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::FLINT_Rational __pyx_t_2;
  pplite::Gen *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 1);

  /* "pplite/polyhedron.pyx":334
 *         cdef cppbool* included_ptr
 *         cdef Gen* g_ptr
 *         if isinstance(affine_expr, Affine_Expression):             # <<<<<<<<<<<<<<
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_affine_expr, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":335
 *         cdef Gen* g_ptr
 *         if isinstance(affine_expr, Affine_Expression):
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]             # <<<<<<<<<<<<<<
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):
 */
    __pyx_v_ae = (((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_affine_expr)->thisptr[0]);

    /* "pplite/polyhedron.pyx":334
 *         cdef cppbool* included_ptr
 *         cdef Gen* g_ptr
 *         if isinstance(affine_expr, Affine_Expression):             # <<<<<<<<<<<<<<
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 */
  }

  /* "pplite/polyhedron.pyx":336
 *         if isinstance(affine_expr, Affine_Expression):
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)             # <<<<<<<<<<<<<<
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 */
  __pyx_t_2 = __pyx_f_6pplite_19integer_conversions_Python_float_to_FLINT_Rational(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_v_val = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "pplite/polyhedron.pyx":337
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_gen_object, __pyx_ptype_6pplite_10generators_PPliteGenerator); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":338
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr             # <<<<<<<<<<<<<<
 *         if isinstance(included_pointer, bool):
 *             included_ptr[0] = included_pointer # Doth this work?
 */
    __pyx_t_3 = ((struct __pyx_obj_6pplite_10generators_PPliteGenerator *)__pyx_v_gen_object)->thisptr;
    __pyx_v_g_ptr = __pyx_t_3;

    /* "pplite/polyhedron.pyx":337
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):
 */
  }

  /* "pplite/polyhedron.pyx":339
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):             # <<<<<<<<<<<<<<
 *             included_ptr[0] = included_pointer # Doth this work?
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)
 */
  __pyx_t_4 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_included_pointer, __pyx_t_4); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":340
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):
 *             included_ptr[0] = included_pointer # Doth this work?             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_included_pointer); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
    (__pyx_v_included_ptr[0]) = __pyx_t_5;

    /* "pplite/polyhedron.pyx":339
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):             # <<<<<<<<<<<<<<
 *             included_ptr[0] = included_pointer # Doth this work?
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)
 */
  }

  /* "pplite/polyhedron.pyx":341
 *         if isinstance(included_pointer, bool):
 *             included_ptr[0] = included_pointer # Doth this work?
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)             # <<<<<<<<<<<<<<
 * 
 *     def max(self, affine_expr, value, included_pointer, gen_object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).min(__pyx_v_ae, __pyx_v_val, __pyx_v_included_ptr, __pyx_v_g_ptr)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":329
 * 
 * 
 *     def min(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":343
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)
 * 
 *     def max(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_57max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_56max, "NNC_Polyhedron.max(self, affine_expr, value, included_pointer, gen_object)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_57max = {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_57max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_56max};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_57max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_affine_expr = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_included_pointer = 0;
  PyObject *__pyx_v_gen_object = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_affine_expr,&__pyx_n_s_value,&__pyx_n_s_included_pointer,&__pyx_n_s_gen_object,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_affine_expr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("max", 1, 4, 4, 1); __PYX_ERR(0, 343, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_included_pointer)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("max", 1, 4, 4, 2); __PYX_ERR(0, 343, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_gen_object)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("max", 1, 4, 4, 3); __PYX_ERR(0, 343, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "max") < 0)) __PYX_ERR(0, 343, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_affine_expr = values[0];
    __pyx_v_value = values[1];
    __pyx_v_included_pointer = values[2];
    __pyx_v_gen_object = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("max", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 343, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_56max(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_affine_expr, __pyx_v_value, __pyx_v_included_pointer, __pyx_v_gen_object);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_56max(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_affine_expr, PyObject *__pyx_v_value, PyObject *__pyx_v_included_pointer, PyObject *__pyx_v_gen_object) {
  pplite::Affine_Expr __pyx_v_ae;
  pplite::FLINT_Rational __pyx_v_val;
  bool *__pyx_v_included_ptr;
  pplite::Gen *__pyx_v_g_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::FLINT_Rational __pyx_t_2;
  pplite::Gen *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 1);

  /* "pplite/polyhedron.pyx":348
 *         cdef cppbool* included_ptr
 *         cdef Gen* g_ptr
 *         if isinstance(affine_expr, Affine_Expression):             # <<<<<<<<<<<<<<
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_affine_expr, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":349
 *         cdef Gen* g_ptr
 *         if isinstance(affine_expr, Affine_Expression):
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]             # <<<<<<<<<<<<<<
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):
 */
    __pyx_v_ae = (((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_affine_expr)->thisptr[0]);

    /* "pplite/polyhedron.pyx":348
 *         cdef cppbool* included_ptr
 *         cdef Gen* g_ptr
 *         if isinstance(affine_expr, Affine_Expression):             # <<<<<<<<<<<<<<
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 */
  }

  /* "pplite/polyhedron.pyx":350
 *         if isinstance(affine_expr, Affine_Expression):
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)             # <<<<<<<<<<<<<<
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 */
  __pyx_t_2 = __pyx_f_6pplite_19integer_conversions_Python_float_to_FLINT_Rational(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_v_val = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "pplite/polyhedron.pyx":351
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_gen_object, __pyx_ptype_6pplite_10generators_PPliteGenerator); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":352
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr             # <<<<<<<<<<<<<<
 *         if isinstance(included_pointer, bool):
 *             included_ptr[0] = included_pointer # Doth this work?
 */
    __pyx_t_3 = ((struct __pyx_obj_6pplite_10generators_PPliteGenerator *)__pyx_v_gen_object)->thisptr;
    __pyx_v_g_ptr = __pyx_t_3;

    /* "pplite/polyhedron.pyx":351
 *             ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         val = Python_float_to_FLINT_Rational(value)
 *         if isinstance(gen_object, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):
 */
  }

  /* "pplite/polyhedron.pyx":353
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):             # <<<<<<<<<<<<<<
 *             included_ptr[0] = included_pointer # Doth this work?
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)
 */
  __pyx_t_4 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_included_pointer, __pyx_t_4); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":354
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):
 *             included_ptr[0] = included_pointer # Doth this work?             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_included_pointer); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
    (__pyx_v_included_ptr[0]) = __pyx_t_5;

    /* "pplite/polyhedron.pyx":353
 *         if isinstance(gen_object, PPliteGenerator):
 *             g_ptr = (<PPliteGenerator> gen_object).thisptr
 *         if isinstance(included_pointer, bool):             # <<<<<<<<<<<<<<
 *             included_ptr[0] = included_pointer # Doth this work?
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)
 */
  }

  /* "pplite/polyhedron.pyx":355
 *         if isinstance(included_pointer, bool):
 *             included_ptr[0] = included_pointer # Doth this work?
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)             # <<<<<<<<<<<<<<
 * 
 *     def _get_bounds_v(self, variable):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).max(__pyx_v_ae, __pyx_v_val, __pyx_v_included_ptr, __pyx_v_g_ptr)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":343
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)
 * 
 *     def max(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":357
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)
 * 
 *     def _get_bounds_v(self, variable):             # <<<<<<<<<<<<<<
 *         cdef Var* v
 *         cdef Itv itv
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_59_get_bounds_v(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_58_get_bounds_v, "NNC_Polyhedron._get_bounds_v(self, variable)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_59_get_bounds_v = {"_get_bounds_v", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_59_get_bounds_v, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_58_get_bounds_v};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_59_get_bounds_v(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_variable = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_bounds_v (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_variable)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_get_bounds_v") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_variable = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_bounds_v", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._get_bounds_v", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_58_get_bounds_v(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_variable);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_58_get_bounds_v(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable) {
  pplite::Var *__pyx_v_v;
  struct pplite::Itv __pyx_v_itv;
  struct __pyx_obj_6pplite_9intervals_Interval *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  pplite::Var *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_bounds_v", 1);

  /* "pplite/polyhedron.pyx":360
 *         cdef Var* v
 *         cdef Itv itv
 *         v = (<Variable> variable).thisptr             # <<<<<<<<<<<<<<
 *         itv = self.thisptr[0].get_bounds(v[0])
 *         i = Interval()
 */
  __pyx_t_1 = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_variable)->thisptr;
  __pyx_v_v = __pyx_t_1;

  /* "pplite/polyhedron.pyx":361
 *         cdef Itv itv
 *         v = (<Variable> variable).thisptr
 *         itv = self.thisptr[0].get_bounds(v[0])             # <<<<<<<<<<<<<<
 *         i = Interval()
 *         i.interval = itv
 */
  __pyx_v_itv = (__pyx_v_self->thisptr[0]).get_bounds((__pyx_v_v[0]));

  /* "pplite/polyhedron.pyx":362
 *         v = (<Variable> variable).thisptr
 *         itv = self.thisptr[0].get_bounds(v[0])
 *         i = Interval()             # <<<<<<<<<<<<<<
 *         i.interval = itv
 *         return i
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_9intervals_Interval)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_i = ((struct __pyx_obj_6pplite_9intervals_Interval *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pplite/polyhedron.pyx":363
 *         itv = self.thisptr[0].get_bounds(v[0])
 *         i = Interval()
 *         i.interval = itv             # <<<<<<<<<<<<<<
 *         return i
 * 
 */
  __pyx_v_i->interval = __pyx_v_itv;

  /* "pplite/polyhedron.pyx":364
 *         i = Interval()
 *         i.interval = itv
 *         return i             # <<<<<<<<<<<<<<
 * 
 *     def _get_bounds_ae(self, affine_expr):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_i);
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":357
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)
 * 
 *     def _get_bounds_v(self, variable):             # <<<<<<<<<<<<<<
 *         cdef Var* v
 *         cdef Itv itv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._get_bounds_v", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":366
 *         return i
 * 
 *     def _get_bounds_ae(self, affine_expr):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef Itv itv
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_61_get_bounds_ae(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_60_get_bounds_ae, "NNC_Polyhedron._get_bounds_ae(self, affine_expr)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_61_get_bounds_ae = {"_get_bounds_ae", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_61_get_bounds_ae, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_60_get_bounds_ae};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_61_get_bounds_ae(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_affine_expr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_bounds_ae (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_affine_expr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_affine_expr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_get_bounds_ae") < 0)) __PYX_ERR(0, 366, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_affine_expr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_bounds_ae", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 366, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._get_bounds_ae", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_60_get_bounds_ae(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_affine_expr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_60_get_bounds_ae(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_affine_expr) {
  pplite::Affine_Expr __pyx_v_ae;
  struct pplite::Itv __pyx_v_itv;
  struct __pyx_obj_6pplite_9intervals_Interval *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_bounds_ae", 1);

  /* "pplite/polyhedron.pyx":369
 *         cdef Affine_Expr ae
 *         cdef Itv itv
 *         ae = (<Affine_Expression> affine_expr).thisptr[0]             # <<<<<<<<<<<<<<
 *         itv = self.thisptr[0].get_bounds(ae)
 *         i = Interval()
 */
  __pyx_v_ae = (((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_affine_expr)->thisptr[0]);

  /* "pplite/polyhedron.pyx":370
 *         cdef Itv itv
 *         ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         itv = self.thisptr[0].get_bounds(ae)             # <<<<<<<<<<<<<<
 *         i = Interval()
 *         i.interval = itv
 */
  __pyx_v_itv = (__pyx_v_self->thisptr[0]).get_bounds(__pyx_v_ae);

  /* "pplite/polyhedron.pyx":371
 *         ae = (<Affine_Expression> affine_expr).thisptr[0]
 *         itv = self.thisptr[0].get_bounds(ae)
 *         i = Interval()             # <<<<<<<<<<<<<<
 *         i.interval = itv
 *         return i
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_9intervals_Interval)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((struct __pyx_obj_6pplite_9intervals_Interval *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pplite/polyhedron.pyx":372
 *         itv = self.thisptr[0].get_bounds(ae)
 *         i = Interval()
 *         i.interval = itv             # <<<<<<<<<<<<<<
 *         return i
 * 
 */
  __pyx_v_i->interval = __pyx_v_itv;

  /* "pplite/polyhedron.pyx":373
 *         i = Interval()
 *         i.interval = itv
 *         return i             # <<<<<<<<<<<<<<
 * 
 *     def _get_boundes_itv(self, itv_expr):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_i);
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":366
 *         return i
 * 
 *     def _get_bounds_ae(self, affine_expr):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef Itv itv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._get_bounds_ae", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":375
 *         return i
 * 
 *     def _get_boundes_itv(self, itv_expr):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_63_get_boundes_itv(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_62_get_boundes_itv, "NNC_Polyhedron._get_boundes_itv(self, itv_expr)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_63_get_boundes_itv = {"_get_boundes_itv", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_63_get_boundes_itv, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_62_get_boundes_itv};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_63_get_boundes_itv(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_itv_expr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_boundes_itv (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_itv_expr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_itv_expr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_get_boundes_itv") < 0)) __PYX_ERR(0, 375, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_itv_expr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_boundes_itv", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 375, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron._get_boundes_itv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_62_get_boundes_itv(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_itv_expr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_62_get_boundes_itv(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_itv_expr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_boundes_itv", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":378
 *         pass
 * 
 *     def get_bounds(self, variable_or_affine_expr):             # <<<<<<<<<<<<<<
 *         if isinstance(variable_or_affine_expr, Variable):
 *             return self._get_bounds_v(variable_or_affine_expr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_65get_bounds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_64get_bounds, "NNC_Polyhedron.get_bounds(self, variable_or_affine_expr)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_65get_bounds = {"get_bounds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_65get_bounds, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_64get_bounds};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_65get_bounds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_variable_or_affine_expr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bounds (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable_or_affine_expr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_variable_or_affine_expr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_bounds") < 0)) __PYX_ERR(0, 378, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_variable_or_affine_expr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_bounds", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 378, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.get_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_64get_bounds(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_variable_or_affine_expr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_64get_bounds(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable_or_affine_expr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_bounds", 1);

  /* "pplite/polyhedron.pyx":379
 * 
 *     def get_bounds(self, variable_or_affine_expr):
 *         if isinstance(variable_or_affine_expr, Variable):             # <<<<<<<<<<<<<<
 *             return self._get_bounds_v(variable_or_affine_expr)
 *         if isinstance(variable_or_affine_expr, Affine_Expression):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_variable_or_affine_expr, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":380
 *     def get_bounds(self, variable_or_affine_expr):
 *         if isinstance(variable_or_affine_expr, Variable):
 *             return self._get_bounds_v(variable_or_affine_expr)             # <<<<<<<<<<<<<<
 *         if isinstance(variable_or_affine_expr, Affine_Expression):
 *             return self._get_bounds_ae(variable_or_affine_expr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_bounds_v); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_variable_or_affine_expr};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":379
 * 
 *     def get_bounds(self, variable_or_affine_expr):
 *         if isinstance(variable_or_affine_expr, Variable):             # <<<<<<<<<<<<<<
 *             return self._get_bounds_v(variable_or_affine_expr)
 *         if isinstance(variable_or_affine_expr, Affine_Expression):
 */
  }

  /* "pplite/polyhedron.pyx":381
 *         if isinstance(variable_or_affine_expr, Variable):
 *             return self._get_bounds_v(variable_or_affine_expr)
 *         if isinstance(variable_or_affine_expr, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return self._get_bounds_ae(variable_or_affine_expr)
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_variable_or_affine_expr, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":382
 *             return self._get_bounds_v(variable_or_affine_expr)
 *         if isinstance(variable_or_affine_expr, Affine_Expression):
 *             return self._get_bounds_ae(variable_or_affine_expr)             # <<<<<<<<<<<<<<
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_bounds_ae); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_variable_or_affine_expr};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":381
 *         if isinstance(variable_or_affine_expr, Variable):
 *             return self._get_bounds_v(variable_or_affine_expr)
 *         if isinstance(variable_or_affine_expr, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return self._get_bounds_ae(variable_or_affine_expr)
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")
 */
  }

  /* "pplite/polyhedron.pyx":383
 *         if isinstance(variable_or_affine_expr, Affine_Expression):
 *             return self._get_bounds_ae(variable_or_affine_expr)
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")             # <<<<<<<<<<<<<<
 * 
 *     def get_unconstrainted(self):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 383, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":378
 *         pass
 * 
 *     def get_bounds(self, variable_or_affine_expr):             # <<<<<<<<<<<<<<
 *         if isinstance(variable_or_affine_expr, Variable):
 *             return self._get_bounds_v(variable_or_affine_expr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.get_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":385
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")
 * 
 *     def get_unconstrainted(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_67get_unconstrainted(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_66get_unconstrainted, "NNC_Polyhedron.get_unconstrainted(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_67get_unconstrainted = {"get_unconstrainted", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_67get_unconstrainted, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_66get_unconstrainted};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_67get_unconstrainted(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_unconstrainted (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_unconstrainted", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_unconstrainted", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_66get_unconstrainted(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_66get_unconstrainted(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_unconstrainted", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":388
 *         pass
 * 
 *     def constraints(self):             # <<<<<<<<<<<<<<
 *         # Access constraints indirectly via copy_cons()
 *         # TODO: Properly implement via sys and Cons_Proxy in Poly_Impl
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_69constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_68constraints, "NNC_Polyhedron.constraints(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_69constraints = {"constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_69constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_68constraints};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_69constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constraints (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("constraints", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "constraints", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_68constraints(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_68constraints(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  pplite::Cons __pyx_v_constraint_vector;
  PyObject *__pyx_v_result = NULL;
  unsigned int __pyx_v_index;
  unsigned int __pyx_v_i;
  struct __pyx_obj_6pplite_10constraint_Constraint *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("constraints", 1);

  /* "pplite/polyhedron.pyx":392
 *         # TODO: Properly implement via sys and Cons_Proxy in Poly_Impl
 *         cdef Cons constraint_vector
 *         constraint_vector = self.thisptr[0].copy_cons()             # <<<<<<<<<<<<<<
 *         result = []
 *         cdef unsigned int index = constraint_vector.size() # hacky way to iterate over vectors
 */
  __pyx_v_constraint_vector = (__pyx_v_self->thisptr[0]).copy_cons();

  /* "pplite/polyhedron.pyx":393
 *         cdef Cons constraint_vector
 *         constraint_vector = self.thisptr[0].copy_cons()
 *         result = []             # <<<<<<<<<<<<<<
 *         cdef unsigned int index = constraint_vector.size() # hacky way to iterate over vectors
 *         for i in range(index):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pplite/polyhedron.pyx":394
 *         constraint_vector = self.thisptr[0].copy_cons()
 *         result = []
 *         cdef unsigned int index = constraint_vector.size() # hacky way to iterate over vectors             # <<<<<<<<<<<<<<
 *         for i in range(index):
 *             c = Constraint()
 */
  __pyx_v_index = __pyx_v_constraint_vector.size();

  /* "pplite/polyhedron.pyx":395
 *         result = []
 *         cdef unsigned int index = constraint_vector.size() # hacky way to iterate over vectors
 *         for i in range(index):             # <<<<<<<<<<<<<<
 *             c = Constraint()
 *             c.thisptr = new Con(constraint_vector[i])
 */
  __pyx_t_2 = __pyx_v_index;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pplite/polyhedron.pyx":396
 *         cdef unsigned int index = constraint_vector.size() # hacky way to iterate over vectors
 *         for i in range(index):
 *             c = Constraint()             # <<<<<<<<<<<<<<
 *             c.thisptr = new Con(constraint_vector[i])
 *             result.append(c)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_10constraint_Constraint)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_c, ((struct __pyx_obj_6pplite_10constraint_Constraint *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pplite/polyhedron.pyx":397
 *         for i in range(index):
 *             c = Constraint()
 *             c.thisptr = new Con(constraint_vector[i])             # <<<<<<<<<<<<<<
 *             result.append(c)
 *         return result
 */
    __pyx_v_c->thisptr = new pplite::Con((__pyx_v_constraint_vector[__pyx_v_i]));

    /* "pplite/polyhedron.pyx":398
 *             c = Constraint()
 *             c.thisptr = new Con(constraint_vector[i])
 *             result.append(c)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_result, ((PyObject *)__pyx_v_c)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 398, __pyx_L1_error)
  }

  /* "pplite/polyhedron.pyx":399
 *             c.thisptr = new Con(constraint_vector[i])
 *             result.append(c)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def generators(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":388
 *         pass
 * 
 *     def constraints(self):             # <<<<<<<<<<<<<<
 *         # Access constraints indirectly via copy_cons()
 *         # TODO: Properly implement via sys and Cons_Proxy in Poly_Impl
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":401
 *         return result
 * 
 *     def generators(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of :class:`PPliteGenerator`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_71generators(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_70generators, "NNC_Polyhedron.generators(self)\n\n        Returns a list of :class:`PPliteGenerator`.\n        ");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_71generators = {"generators", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_71generators, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_70generators};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_71generators(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generators (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("generators", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "generators", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_70generators(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_70generators(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  pplite::Gens __pyx_v_generator_vector;
  PyObject *__pyx_v_result = NULL;
  unsigned int __pyx_v_index;
  unsigned int __pyx_v_i;
  struct __pyx_obj_6pplite_10generators_PPliteGenerator *__pyx_v_g = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generators", 1);

  /* "pplite/polyhedron.pyx":408
 *         # TODO: Properly implement via sys and Cons_Proxy in Poly_Impl
 *         cdef Gens generator_vector
 *         generator_vector = self.thisptr[0].copy_gens()             # <<<<<<<<<<<<<<
 *         result = []
 *         cdef unsigned int index = generator_vector.size()
 */
  __pyx_v_generator_vector = (__pyx_v_self->thisptr[0]).copy_gens();

  /* "pplite/polyhedron.pyx":409
 *         cdef Gens generator_vector
 *         generator_vector = self.thisptr[0].copy_gens()
 *         result = []             # <<<<<<<<<<<<<<
 *         cdef unsigned int index = generator_vector.size()
 *         for i in range(index):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pplite/polyhedron.pyx":410
 *         generator_vector = self.thisptr[0].copy_gens()
 *         result = []
 *         cdef unsigned int index = generator_vector.size()             # <<<<<<<<<<<<<<
 *         for i in range(index):
 *             g = PPliteGenerator()
 */
  __pyx_v_index = __pyx_v_generator_vector.size();

  /* "pplite/polyhedron.pyx":411
 *         result = []
 *         cdef unsigned int index = generator_vector.size()
 *         for i in range(index):             # <<<<<<<<<<<<<<
 *             g = PPliteGenerator()
 *             g.thisptr = new Gen(generator_vector[i])
 */
  __pyx_t_2 = __pyx_v_index;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pplite/polyhedron.pyx":412
 *         cdef unsigned int index = generator_vector.size()
 *         for i in range(index):
 *             g = PPliteGenerator()             # <<<<<<<<<<<<<<
 *             g.thisptr = new Gen(generator_vector[i])
 *             result.append(g)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_10generators_PPliteGenerator)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_g, ((struct __pyx_obj_6pplite_10generators_PPliteGenerator *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pplite/polyhedron.pyx":413
 *         for i in range(index):
 *             g = PPliteGenerator()
 *             g.thisptr = new Gen(generator_vector[i])             # <<<<<<<<<<<<<<
 *             result.append(g)
 *         return result
 */
    __pyx_v_g->thisptr = new pplite::Gen((__pyx_v_generator_vector[__pyx_v_i]));

    /* "pplite/polyhedron.pyx":414
 *             g = PPliteGenerator()
 *             g.thisptr = new Gen(generator_vector[i])
 *             result.append(g)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_result, ((PyObject *)__pyx_v_g)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 414, __pyx_L1_error)
  }

  /* "pplite/polyhedron.pyx":415
 *             g.thisptr = new Gen(generator_vector[i])
 *             result.append(g)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def normalized_constraints(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":401
 *         return result
 * 
 *     def generators(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of :class:`PPliteGenerator`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.generators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":417
 *         return result
 * 
 *     def normalized_constraints(self):             # <<<<<<<<<<<<<<
 *         # TODO implement once Cons_Proxy is implemented.
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_73normalized_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_72normalized_constraints, "NNC_Polyhedron.normalized_constraints(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_73normalized_constraints = {"normalized_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_73normalized_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_72normalized_constraints};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_73normalized_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalized_constraints (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("normalized_constraints", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "normalized_constraints", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_72normalized_constraints(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_72normalized_constraints(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalized_constraints", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":421
 *         pass
 * 
 *     def num_min_constrains(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_cons()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_75num_min_constrains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_74num_min_constrains, "NNC_Polyhedron.num_min_constrains(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_75num_min_constrains = {"num_min_constrains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_75num_min_constrains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_74num_min_constrains};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_75num_min_constrains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_min_constrains (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("num_min_constrains", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "num_min_constrains", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_74num_min_constrains(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_74num_min_constrains(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_min_constrains", 1);

  /* "pplite/polyhedron.pyx":422
 * 
 *     def num_min_constrains(self):
 *         return self.thisptr[0].num_min_cons()             # <<<<<<<<<<<<<<
 * 
 *     def num_min_generators(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->thisptr[0]).num_min_cons()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":421
 *         pass
 * 
 *     def num_min_constrains(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_cons()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.num_min_constrains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":424
 *         return self.thisptr[0].num_min_cons()
 * 
 *     def num_min_generators(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_gens()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_77num_min_generators(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_76num_min_generators, "NNC_Polyhedron.num_min_generators(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_77num_min_generators = {"num_min_generators", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_77num_min_generators, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_76num_min_generators};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_77num_min_generators(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_min_generators (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("num_min_generators", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "num_min_generators", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_76num_min_generators(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_76num_min_generators(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_min_generators", 1);

  /* "pplite/polyhedron.pyx":425
 * 
 *     def num_min_generators(self):
 *         return self.thisptr[0].num_min_gens()             # <<<<<<<<<<<<<<
 * 
 *     def collapse(self, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->thisptr[0]).num_min_gens()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":424
 *         return self.thisptr[0].num_min_cons()
 * 
 *     def num_min_generators(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_gens()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.num_min_generators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":427
 *         return self.thisptr[0].num_min_gens()
 * 
 *     def collapse(self, n):             # <<<<<<<<<<<<<<
 *         cdef dim_type nn
 *         if isinstance(n, int):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_79collapse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_78collapse, "NNC_Polyhedron.collapse(self, n)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_79collapse = {"collapse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_79collapse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_78collapse};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_79collapse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_n = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collapse (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "collapse") < 0)) __PYX_ERR(0, 427, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("collapse", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 427, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.collapse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_78collapse(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_78collapse(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_n) {
  pplite::dim_type __pyx_v_nn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::dim_type __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("collapse", 1);

  /* "pplite/polyhedron.pyx":429
 *     def collapse(self, n):
 *         cdef dim_type nn
 *         if isinstance(n, int):             # <<<<<<<<<<<<<<
 *             nn = n
 *         self.thisptr[0].collapse(nn)
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_n); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":430
 *         cdef dim_type nn
 *         if isinstance(n, int):
 *             nn = n             # <<<<<<<<<<<<<<
 *         self.thisptr[0].collapse(nn)
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_n); if (unlikely((__pyx_t_2 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L1_error)
    __pyx_v_nn = __pyx_t_2;

    /* "pplite/polyhedron.pyx":429
 *     def collapse(self, n):
 *         cdef dim_type nn
 *         if isinstance(n, int):             # <<<<<<<<<<<<<<
 *             nn = n
 *         self.thisptr[0].collapse(nn)
 */
  }

  /* "pplite/polyhedron.pyx":431
 *         if isinstance(n, int):
 *             nn = n
 *         self.thisptr[0].collapse(nn)             # <<<<<<<<<<<<<<
 * 
 *     def num_disjuncts(self):
 */
  (__pyx_v_self->thisptr[0]).collapse(__pyx_v_nn);

  /* "pplite/polyhedron.pyx":427
 *         return self.thisptr[0].num_min_gens()
 * 
 *     def collapse(self, n):             # <<<<<<<<<<<<<<
 *         cdef dim_type nn
 *         if isinstance(n, int):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.collapse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":433
 *         self.thisptr[0].collapse(nn)
 * 
 *     def num_disjuncts(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_disjuncts()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_81num_disjuncts(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_80num_disjuncts, "NNC_Polyhedron.num_disjuncts(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_81num_disjuncts = {"num_disjuncts", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_81num_disjuncts, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_80num_disjuncts};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_81num_disjuncts(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_disjuncts (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("num_disjuncts", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "num_disjuncts", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_80num_disjuncts(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_80num_disjuncts(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_disjuncts", 1);

  /* "pplite/polyhedron.pyx":434
 * 
 *     def num_disjuncts(self):
 *         return self.thisptr[0].num_disjuncts()             # <<<<<<<<<<<<<<
 * 
 *     def disjunct_constraints(self, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->thisptr[0]).num_disjuncts()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/polyhedron.pyx":433
 *         self.thisptr[0].collapse(nn)
 * 
 *     def num_disjuncts(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_disjuncts()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.num_disjuncts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":436
 *         return self.thisptr[0].num_disjuncts()
 * 
 *     def disjunct_constraints(self, n):             # <<<<<<<<<<<<<<
 *         # TODO implement once Cons_Proxy is implemented.
 *         # cdef dim_type nn
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_83disjunct_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_82disjunct_constraints, "NNC_Polyhedron.disjunct_constraints(self, n)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_83disjunct_constraints = {"disjunct_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_83disjunct_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_82disjunct_constraints};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_83disjunct_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_n = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disjunct_constraints (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 436, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "disjunct_constraints") < 0)) __PYX_ERR(0, 436, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("disjunct_constraints", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 436, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.disjunct_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_82disjunct_constraints(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_82disjunct_constraints(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disjunct_constraints", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":444
 *         pass
 * 
 *     def geom_covers(self, other_poly):             # <<<<<<<<<<<<<<
 *         """
 *         Input: :class:`NNC_Polyhedron`
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_85geom_covers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_84geom_covers, "NNC_Polyhedron.geom_covers(self, other_poly)\n\n        Input: :class:`NNC_Polyhedron`\n        Output: bool\n        ");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_85geom_covers = {"geom_covers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_85geom_covers, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_84geom_covers};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_85geom_covers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("geom_covers (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "geom_covers") < 0)) __PYX_ERR(0, 444, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("geom_covers", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 444, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.geom_covers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_84geom_covers(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_84geom_covers(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("geom_covers", 1);

  /* "pplite/polyhedron.pyx":449
 *         Output: bool
 *         """
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].geom_covers(y[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":450
 *         """
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             return self.thisptr[0].geom_covers(y[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":451
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].geom_covers(y[0])             # <<<<<<<<<<<<<<
 * 
 *     def m_swap(self, other_poly):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr[0]).geom_covers((__pyx_v_y[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":449
 *         Output: bool
 *         """
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].geom_covers(y[0])
 */
  }

  /* "pplite/polyhedron.pyx":444
 *         pass
 * 
 *     def geom_covers(self, other_poly):             # <<<<<<<<<<<<<<
 *         """
 *         Input: :class:`NNC_Polyhedron`
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.geom_covers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":453
 *             return self.thisptr[0].geom_covers(y[0])
 * 
 *     def m_swap(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_87m_swap(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_86m_swap, "NNC_Polyhedron.m_swap(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_87m_swap = {"m_swap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_87m_swap, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_86m_swap};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_87m_swap(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("m_swap (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "m_swap") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("m_swap", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 453, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.m_swap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_86m_swap(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_86m_swap(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  __Pyx_RefNannySetupContext("m_swap", 1);

  /* "pplite/polyhedron.pyx":454
 * 
 *     def m_swap(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].m_swap(y[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":455
 *     def m_swap(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].m_swap(y[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":456
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].m_swap(y[0])             # <<<<<<<<<<<<<<
 * 
 *     def set_empty(self):
 */
    (__pyx_v_self->thisptr[0]).m_swap((__pyx_v_y[0]));

    /* "pplite/polyhedron.pyx":454
 * 
 *     def m_swap(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].m_swap(y[0])
 */
  }

  /* "pplite/polyhedron.pyx":453
 *             return self.thisptr[0].geom_covers(y[0])
 * 
 *     def m_swap(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":458
 *             self.thisptr[0].m_swap(y[0])
 * 
 *     def set_empty(self):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the :class:`NNC_Polyhedron` to empty.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_89set_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_88set_empty, "NNC_Polyhedron.set_empty(self)\n\n        Sets the :class:`NNC_Polyhedron` to empty. \n        ");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_89set_empty = {"set_empty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_89set_empty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_88set_empty};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_89set_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_empty (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_empty", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_empty", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_88set_empty(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_88set_empty(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_empty", 1);

  /* "pplite/polyhedron.pyx":462
 *         Sets the :class:`NNC_Polyhedron` to empty.
 *         """
 *         self.thisptr[0].set_empty()             # <<<<<<<<<<<<<<
 * 
 *     def set_topology(self, topology):
 */
  (__pyx_v_self->thisptr[0]).set_empty();

  /* "pplite/polyhedron.pyx":458
 *             self.thisptr[0].m_swap(y[0])
 * 
 *     def set_empty(self):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the :class:`NNC_Polyhedron` to empty.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":464
 *         self.thisptr[0].set_empty()
 * 
 *     def set_topology(self, topology):             # <<<<<<<<<<<<<<
 *         cdef Topol tt
 *         tt = string_to_Topol(topology)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_91set_topology(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_90set_topology, "NNC_Polyhedron.set_topology(self, topology)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_91set_topology = {"set_topology", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_91set_topology, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_90set_topology};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_91set_topology(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_topology = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_topology (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_topology,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_topology)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_topology") < 0)) __PYX_ERR(0, 464, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_topology = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_topology", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 464, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.set_topology", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_90set_topology(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_topology);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_90set_topology(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_topology) {
  __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_v_tt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_topology", 1);

  /* "pplite/polyhedron.pyx":466
 *     def set_topology(self, topology):
 *         cdef Topol tt
 *         tt = string_to_Topol(topology)             # <<<<<<<<<<<<<<
 *         self.thisptr[0].set_topology(tt)
 * 
 */
  __pyx_t_1 = __pyx_f_6pplite_10polyhedron_string_to_Topol(__pyx_v_topology); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_v_tt = __pyx_t_1;

  /* "pplite/polyhedron.pyx":467
 *         cdef Topol tt
 *         tt = string_to_Topol(topology)
 *         self.thisptr[0].set_topology(tt)             # <<<<<<<<<<<<<<
 * 
 *     def add_constraint(self, constraint):
 */
  (__pyx_v_self->thisptr[0]).set_topology(__pyx_v_tt);

  /* "pplite/polyhedron.pyx":464
 *         self.thisptr[0].set_empty()
 * 
 *     def set_topology(self, topology):             # <<<<<<<<<<<<<<
 *         cdef Topol tt
 *         tt = string_to_Topol(topology)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.set_topology", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":469
 *         self.thisptr[0].set_topology(tt)
 * 
 *     def add_constraint(self, constraint):             # <<<<<<<<<<<<<<
 *         r"""
 *         TESTS::
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_93add_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_92add_constraint, "NNC_Polyhedron.add_constraint(self, constraint)\n\n        TESTS::\n        >>> from pplite import NNC_Polyhedron, Variable, Linear_Expression, Affine_Expression, Constraint, Point, Ray, Line, Closure_point\n        >>> A = Variable(0)\n        >>> P = NNC_Polyhedron(dim_type = 1, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraint(A >= 0)\n        >>> P\n        x0>=0\n        >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n        >>> P_2.add_constraint(A >= -10)\n        >>> P_2.add_constraint(A >= -5)\n        >>> P_2.add_constraint(A >= -2)\n        >>> P_2.add_constraint(A >= -1)\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.is_necessarily_closed()\n        False\n        >>> P_2.space_dim()\n        1\n        >>> P_2.equals(P)\n        True\n        >>> B = Variable(1)\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\") \n        >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n        >>> P.add_constraint(A == B)\n        >>> P_2 == P\n        True\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\") # addcons1 - test04\n        >>> P.add_constraint(A >= 0)\n        >>> P.add_constraint(A <= 2)\n        >>> P.add_constraint(A >= -1)\n        >>> P.add_constraint(B >= 1)\n        >>> P_2 =  NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.add_constraint(A <= 2)\n        >>> P_2.add_constraint(B >= 1)\n        >>> P_2 == P\n        True\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\") # addcons1 - test05\n        >>> P.add_constraint(B >= 0)\n        >>> P.add_constraint(B <= 2)\n        >>> P.add_constraint(A + B >= 1)\n        >>> P.add_constraint(A - B >= -1)\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\")\n        >>> P_2.add_generator(Point(B))\n        >>> P_2.add_generator(Ray(A))\n        >>> ""P_2.add_generator(Point(A+2*B))\n        >>> P_2.add_generator(Point(A))\n        >>> P == P_2\n        True\n        ");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_93add_constraint = {"add_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_93add_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_92add_constraint};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_93add_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_constraint = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_constraint (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_constraint,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_constraint)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_constraint") < 0)) __PYX_ERR(0, 469, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_constraint = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_constraint", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 469, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.add_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_92add_constraint(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_constraint);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_92add_constraint(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_constraint) {
  pplite::Con __pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_constraint", 1);

  /* "pplite/polyhedron.pyx":520
 *         True
 *         """
 *         if isinstance(constraint, Constraint):             # <<<<<<<<<<<<<<
 *             c = (<Constraint> constraint).thisptr[0]
 *             self.thisptr[0].add_con(c)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_constraint, __pyx_ptype_6pplite_10constraint_Constraint); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":521
 *         """
 *         if isinstance(constraint, Constraint):
 *             c = (<Constraint> constraint).thisptr[0]             # <<<<<<<<<<<<<<
 *             self.thisptr[0].add_con(c)
 * 
 */
    __pyx_v_c = (((struct __pyx_obj_6pplite_10constraint_Constraint *)__pyx_v_constraint)->thisptr[0]);

    /* "pplite/polyhedron.pyx":522
 *         if isinstance(constraint, Constraint):
 *             c = (<Constraint> constraint).thisptr[0]
 *             self.thisptr[0].add_con(c)             # <<<<<<<<<<<<<<
 * 
 *     def add_constraints(self, iter_of_cons):
 */
    (__pyx_v_self->thisptr[0]).add_con(__pyx_v_c);

    /* "pplite/polyhedron.pyx":520
 *         True
 *         """
 *         if isinstance(constraint, Constraint):             # <<<<<<<<<<<<<<
 *             c = (<Constraint> constraint).thisptr[0]
 *             self.thisptr[0].add_con(c)
 */
  }

  /* "pplite/polyhedron.pyx":469
 *         self.thisptr[0].set_topology(tt)
 * 
 *     def add_constraint(self, constraint):             # <<<<<<<<<<<<<<
 *         r"""
 *         TESTS::
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":524
 *             self.thisptr[0].add_con(c)
 * 
 *     def add_constraints(self, iter_of_cons):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_95add_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_94add_constraints, "NNC_Polyhedron.add_constraints(self, iter_of_cons)\n\n        TESTS::\n        >>> from pplite import NNC_Polyhedron, Variable, Linear_Expression, Affine_Expression, Constraint\n        >>> A = Variable(0)\n        >>> B = Variable(1)\n        >>> cons_list = [A >= 0, B == 5]\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\") #TODO: Make nicer python constructors\n        >>> P.add_constraints(cons_list)\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.add_constraint(B == 5)\n        >>> P_2 == P\n        True\n        ");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_95add_constraints = {"add_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_95add_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_94add_constraints};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_95add_constraints(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_iter_of_cons = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_constraints (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iter_of_cons,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iter_of_cons)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_constraints") < 0)) __PYX_ERR(0, 524, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_iter_of_cons = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_constraints", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 524, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.add_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_94add_constraints(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_iter_of_cons);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_94add_constraints(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_iter_of_cons) {
  PyObject *__pyx_v_con = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_constraints", 1);

  /* "pplite/polyhedron.pyx":539
 *         True
 *         """
 *         for con in iter_of_cons:             # <<<<<<<<<<<<<<
 *             self.add_constraint(con)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_iter_of_cons)) || PyTuple_CheckExact(__pyx_v_iter_of_cons)) {
    __pyx_t_1 = __pyx_v_iter_of_cons; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_iter_of_cons); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 539, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 539, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 539, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 539, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 539, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_con, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pplite/polyhedron.pyx":540
 *         """
 *         for con in iter_of_cons:
 *             self.add_constraint(con)             # <<<<<<<<<<<<<<
 * 
 *     def add_generator(self, generator):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_constraint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_con};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pplite/polyhedron.pyx":539
 *         True
 *         """
 *         for con in iter_of_cons:             # <<<<<<<<<<<<<<
 *             self.add_constraint(con)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pplite/polyhedron.pyx":524
 *             self.thisptr[0].add_con(c)
 * 
 *     def add_constraints(self, iter_of_cons):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.add_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_con);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":542
 *             self.add_constraint(con)
 * 
 *     def add_generator(self, generator):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_97add_generator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_96add_generator, "NNC_Polyhedron.add_generator(self, generator)\n\n        TESTS::\n        >>> from pplite import NNC_Polyhedron, Variable, Linear_Expression, Affine_Expression, Constraint, Point, Closure_point, Ray, Line\n        >>> A = Variable(0)\n        >>> B = Variable(1)\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraint(A >= 0)\n        >>> P.add_constraint(B >= 0)\n        >>> P.add_constraint(A + B > 0)\n        >>> P.add_generator(Point())\n        >>> P.minimize()\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(A >= 0)\n        >>> P_2.add_constraint(B >= 0)\n        >>> P_2.minimize()\n        >>> P == P_2 # Test 01 finished\n        True\n        >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P.add_constraint(A >= 0)\n        >>> P.add_constraint(B >= 0)\n        >>> P.add_constraint(A + B > 0)\n        >>> P.add_generator(Ray(-A))\n        >>> P_2 = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n        >>> P_2.add_constraint(B >= 0)\n        >>> P == P_2 # Test 03 finished\n        True     \n        ");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_97add_generator = {"add_generator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_97add_generator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_96add_generator};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_97add_generator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_generator = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_generator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_generator,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_generator)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_generator") < 0)) __PYX_ERR(0, 542, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_generator = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_generator", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.add_generator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_96add_generator(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_generator);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_96add_generator(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_generator) {
  pplite::Gen __pyx_v_g;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_generator", 1);

  /* "pplite/polyhedron.pyx":570
 *         True
 *         """
 *         if isinstance(generator, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             g = (<PPliteGenerator> generator).thisptr[0]
 *             self.thisptr[0].add_gen(g)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_generator, __pyx_ptype_6pplite_10generators_PPliteGenerator); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":571
 *         """
 *         if isinstance(generator, PPliteGenerator):
 *             g = (<PPliteGenerator> generator).thisptr[0]             # <<<<<<<<<<<<<<
 *             self.thisptr[0].add_gen(g)
 * 
 */
    __pyx_v_g = (((struct __pyx_obj_6pplite_10generators_PPliteGenerator *)__pyx_v_generator)->thisptr[0]);

    /* "pplite/polyhedron.pyx":572
 *         if isinstance(generator, PPliteGenerator):
 *             g = (<PPliteGenerator> generator).thisptr[0]
 *             self.thisptr[0].add_gen(g)             # <<<<<<<<<<<<<<
 * 
 *     def add_generators(self, iter_of_gens):
 */
    (__pyx_v_self->thisptr[0]).add_gen(__pyx_v_g);

    /* "pplite/polyhedron.pyx":570
 *         True
 *         """
 *         if isinstance(generator, PPliteGenerator):             # <<<<<<<<<<<<<<
 *             g = (<PPliteGenerator> generator).thisptr[0]
 *             self.thisptr[0].add_gen(g)
 */
  }

  /* "pplite/polyhedron.pyx":542
 *             self.add_constraint(con)
 * 
 *     def add_generator(self, generator):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":574
 *             self.thisptr[0].add_gen(g)
 * 
 *     def add_generators(self, iter_of_gens):             # <<<<<<<<<<<<<<
 *         for gen in iter_of_gens:
 *             self.add_generator(gen)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_99add_generators(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_98add_generators, "NNC_Polyhedron.add_generators(self, iter_of_gens)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_99add_generators = {"add_generators", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_99add_generators, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_98add_generators};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_99add_generators(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_iter_of_gens = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_generators (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iter_of_gens,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iter_of_gens)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_generators") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_iter_of_gens = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_generators", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.add_generators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_98add_generators(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_iter_of_gens);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_98add_generators(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_iter_of_gens) {
  PyObject *__pyx_v_gen = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_generators", 1);

  /* "pplite/polyhedron.pyx":575
 * 
 *     def add_generators(self, iter_of_gens):
 *         for gen in iter_of_gens:             # <<<<<<<<<<<<<<
 *             self.add_generator(gen)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_iter_of_gens)) || PyTuple_CheckExact(__pyx_v_iter_of_gens)) {
    __pyx_t_1 = __pyx_v_iter_of_gens; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_iter_of_gens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 575, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 575, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 575, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 575, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 575, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_gen, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pplite/polyhedron.pyx":576
 *     def add_generators(self, iter_of_gens):
 *         for gen in iter_of_gens:
 *             self.add_generator(gen)             # <<<<<<<<<<<<<<
 * 
 *     def topological_closure_assign(self):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_generator); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_gen};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pplite/polyhedron.pyx":575
 * 
 *     def add_generators(self, iter_of_gens):
 *         for gen in iter_of_gens:             # <<<<<<<<<<<<<<
 *             self.add_generator(gen)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pplite/polyhedron.pyx":574
 *             self.thisptr[0].add_gen(g)
 * 
 *     def add_generators(self, iter_of_gens):             # <<<<<<<<<<<<<<
 *         for gen in iter_of_gens:
 *             self.add_generator(gen)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.add_generators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_gen);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":578
 *             self.add_generator(gen)
 * 
 *     def topological_closure_assign(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].topological_closure_assign()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_101topological_closure_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_100topological_closure_assign, "NNC_Polyhedron.topological_closure_assign(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_101topological_closure_assign = {"topological_closure_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_101topological_closure_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_100topological_closure_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_101topological_closure_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topological_closure_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("topological_closure_assign", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "topological_closure_assign", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_100topological_closure_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_100topological_closure_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topological_closure_assign", 1);

  /* "pplite/polyhedron.pyx":579
 * 
 *     def topological_closure_assign(self):
 *         self.thisptr[0].topological_closure_assign()             # <<<<<<<<<<<<<<
 * 
 *     def unconstain(self, variable):
 */
  (__pyx_v_self->thisptr[0]).topological_closure_assign();

  /* "pplite/polyhedron.pyx":578
 *             self.add_generator(gen)
 * 
 *     def topological_closure_assign(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].topological_closure_assign()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":581
 *         self.thisptr[0].topological_closure_assign()
 * 
 *     def unconstain(self, variable):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             v = (<Variable> variable).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_103unconstain(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_102unconstain, "NNC_Polyhedron.unconstain(self, variable)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_103unconstain = {"unconstain", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_103unconstain, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_102unconstain};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_103unconstain(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_variable = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unconstain (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_variable)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 581, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "unconstain") < 0)) __PYX_ERR(0, 581, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_variable = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unconstain", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 581, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.unconstain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_102unconstain(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_variable);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_102unconstain(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable) {
  pplite::Var *__pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Var *__pyx_t_2;
  __Pyx_RefNannySetupContext("unconstain", 1);

  /* "pplite/polyhedron.pyx":582
 * 
 *     def unconstain(self, variable):
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             v = (<Variable> variable).thisptr
 *             self.thisptr[0].unconstrain(v[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_variable, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":583
 *     def unconstain(self, variable):
 *         if isinstance(variable, Variable):
 *             v = (<Variable> variable).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].unconstrain(v[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_variable)->thisptr;
    __pyx_v_v = __pyx_t_2;

    /* "pplite/polyhedron.pyx":584
 *         if isinstance(variable, Variable):
 *             v = (<Variable> variable).thisptr
 *             self.thisptr[0].unconstrain(v[0])             # <<<<<<<<<<<<<<
 * 
 *     def unconstain_many(self, iter_of_var_or_index_set):
 */
    (__pyx_v_self->thisptr[0]).unconstrain((__pyx_v_v[0]));

    /* "pplite/polyhedron.pyx":582
 * 
 *     def unconstain(self, variable):
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             v = (<Variable> variable).thisptr
 *             self.thisptr[0].unconstrain(v[0])
 */
  }

  /* "pplite/polyhedron.pyx":581
 *         self.thisptr[0].topological_closure_assign()
 * 
 *     def unconstain(self, variable):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             v = (<Variable> variable).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":586
 *             self.thisptr[0].unconstrain(v[0])
 * 
 *     def unconstain_many(self, iter_of_var_or_index_set):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_105unconstain_many(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_104unconstain_many, "NNC_Polyhedron.unconstain_many(self, iter_of_var_or_index_set)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_105unconstain_many = {"unconstain_many", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_105unconstain_many, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_104unconstain_many};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_105unconstain_many(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_iter_of_var_or_index_set = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unconstain_many (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iter_of_var_or_index_set,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iter_of_var_or_index_set)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "unconstain_many") < 0)) __PYX_ERR(0, 586, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_iter_of_var_or_index_set = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unconstain_many", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 586, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.unconstain_many", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_104unconstain_many(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_iter_of_var_or_index_set);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_104unconstain_many(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_iter_of_var_or_index_set) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unconstain_many", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":589
 *         pass
 * 
 *     def intersection_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_107intersection_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_106intersection_assign, "NNC_Polyhedron.intersection_assign(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_107intersection_assign = {"intersection_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_107intersection_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_106intersection_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_107intersection_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersection_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "intersection_assign") < 0)) __PYX_ERR(0, 589, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersection_assign", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 589, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.intersection_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_106intersection_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_106intersection_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  __Pyx_RefNannySetupContext("intersection_assign", 1);

  /* "pplite/polyhedron.pyx":590
 * 
 *     def intersection_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].intersection_assign(y[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":591
 *     def intersection_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].intersection_assign(y[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":592
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].intersection_assign(y[0])             # <<<<<<<<<<<<<<
 * 
 *     def join_assign(self, other_poly):
 */
    (__pyx_v_self->thisptr[0]).intersection_assign((__pyx_v_y[0]));

    /* "pplite/polyhedron.pyx":590
 * 
 *     def intersection_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].intersection_assign(y[0])
 */
  }

  /* "pplite/polyhedron.pyx":589
 *         pass
 * 
 *     def intersection_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":594
 *             self.thisptr[0].intersection_assign(y[0])
 * 
 *     def join_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_109join_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_108join_assign, "NNC_Polyhedron.join_assign(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_109join_assign = {"join_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_109join_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_108join_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_109join_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "join_assign") < 0)) __PYX_ERR(0, 594, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join_assign", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 594, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.join_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_108join_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_108join_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  __Pyx_RefNannySetupContext("join_assign", 1);

  /* "pplite/polyhedron.pyx":595
 * 
 *     def join_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].join_assign(y[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":596
 *     def join_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].join_assign(y[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":597
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].join_assign(y[0])             # <<<<<<<<<<<<<<
 * 
 *     def poly_hull_assign(self, other_poly):
 */
    (__pyx_v_self->thisptr[0]).join_assign((__pyx_v_y[0]));

    /* "pplite/polyhedron.pyx":595
 * 
 *     def join_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].join_assign(y[0])
 */
  }

  /* "pplite/polyhedron.pyx":594
 *             self.thisptr[0].intersection_assign(y[0])
 * 
 *     def join_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":599
 *             self.thisptr[0].join_assign(y[0])
 * 
 *     def poly_hull_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_111poly_hull_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_110poly_hull_assign, "NNC_Polyhedron.poly_hull_assign(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_111poly_hull_assign = {"poly_hull_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_111poly_hull_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_110poly_hull_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_111poly_hull_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("poly_hull_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 599, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "poly_hull_assign") < 0)) __PYX_ERR(0, 599, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("poly_hull_assign", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 599, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.poly_hull_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_110poly_hull_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_110poly_hull_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  __Pyx_RefNannySetupContext("poly_hull_assign", 1);

  /* "pplite/polyhedron.pyx":600
 * 
 *     def poly_hull_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].poly_hull_assign(y[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":601
 *     def poly_hull_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].poly_hull_assign(y[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":602
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].poly_hull_assign(y[0])             # <<<<<<<<<<<<<<
 * 
 *     def con_hull_assign(self, other_poly, boxed):
 */
    (__pyx_v_self->thisptr[0]).poly_hull_assign((__pyx_v_y[0]));

    /* "pplite/polyhedron.pyx":600
 * 
 *     def poly_hull_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].poly_hull_assign(y[0])
 */
  }

  /* "pplite/polyhedron.pyx":599
 *             self.thisptr[0].join_assign(y[0])
 * 
 *     def poly_hull_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":604
 *             self.thisptr[0].poly_hull_assign(y[0])
 * 
 *     def con_hull_assign(self, other_poly, boxed):             # <<<<<<<<<<<<<<
 *         cdef cppbool bboxed
 *         if boxed:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_113con_hull_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_112con_hull_assign, "NNC_Polyhedron.con_hull_assign(self, other_poly, boxed)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_113con_hull_assign = {"con_hull_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_113con_hull_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_112con_hull_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_113con_hull_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  PyObject *__pyx_v_boxed = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("con_hull_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,&__pyx_n_s_boxed,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_boxed)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 604, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("con_hull_assign", 1, 2, 2, 1); __PYX_ERR(0, 604, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "con_hull_assign") < 0)) __PYX_ERR(0, 604, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_other_poly = values[0];
    __pyx_v_boxed = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("con_hull_assign", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 604, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.con_hull_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_112con_hull_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly, __pyx_v_boxed);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_112con_hull_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly, PyObject *__pyx_v_boxed) {
  bool __pyx_v_bboxed;
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("con_hull_assign", 1);

  /* "pplite/polyhedron.pyx":606
 *     def con_hull_assign(self, other_poly, boxed):
 *         cdef cppbool bboxed
 *         if boxed:             # <<<<<<<<<<<<<<
 *             bboxed = True
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_boxed); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 606, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":607
 *         cdef cppbool bboxed
 *         if boxed:
 *             bboxed = True             # <<<<<<<<<<<<<<
 *         else:
 *             bboxed = False
 */
    __pyx_v_bboxed = 1;

    /* "pplite/polyhedron.pyx":606
 *     def con_hull_assign(self, other_poly, boxed):
 *         cdef cppbool bboxed
 *         if boxed:             # <<<<<<<<<<<<<<
 *             bboxed = True
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/polyhedron.pyx":609
 *             bboxed = True
 *         else:
 *             bboxed = False             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  /*else*/ {
    __pyx_v_bboxed = 0;
  }
  __pyx_L3:;

  /* "pplite/polyhedron.pyx":610
 *         else:
 *             bboxed = False
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":611
 *             bboxed = False
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":612
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)             # <<<<<<<<<<<<<<
 * 
 *     def poly_difference_assign(self, other_poly):
 */
    (__pyx_v_self->thisptr[0]).con_hull_assign((__pyx_v_y[0]), __pyx_v_bboxed);

    /* "pplite/polyhedron.pyx":610
 *         else:
 *             bboxed = False
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)
 */
  }

  /* "pplite/polyhedron.pyx":604
 *             self.thisptr[0].poly_hull_assign(y[0])
 * 
 *     def con_hull_assign(self, other_poly, boxed):             # <<<<<<<<<<<<<<
 *         cdef cppbool bboxed
 *         if boxed:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.con_hull_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":614
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)
 * 
 *     def poly_difference_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_115poly_difference_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_114poly_difference_assign, "NNC_Polyhedron.poly_difference_assign(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_115poly_difference_assign = {"poly_difference_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_115poly_difference_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_114poly_difference_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_115poly_difference_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("poly_difference_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "poly_difference_assign") < 0)) __PYX_ERR(0, 614, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("poly_difference_assign", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 614, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.poly_difference_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_114poly_difference_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_114poly_difference_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  __Pyx_RefNannySetupContext("poly_difference_assign", 1);

  /* "pplite/polyhedron.pyx":615
 * 
 *     def poly_difference_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].poly_difference_assign(y[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":616
 *     def poly_difference_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].poly_difference_assign(y[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":617
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].poly_difference_assign(y[0])             # <<<<<<<<<<<<<<
 * 
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):
 */
    (__pyx_v_self->thisptr[0]).poly_difference_assign((__pyx_v_y[0]));

    /* "pplite/polyhedron.pyx":615
 * 
 *     def poly_difference_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].poly_difference_assign(y[0])
 */
  }

  /* "pplite/polyhedron.pyx":614
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)
 * 
 *     def poly_difference_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":619
 *             self.thisptr[0].poly_difference_assign(y[0])
 * 
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_117affine_image(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_116affine_image, "NNC_Polyhedron.affine_image(self, variable, linear_exp, inhomogenous_term, denominator)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_117affine_image = {"affine_image", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_117affine_image, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_116affine_image};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_117affine_image(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_variable = 0;
  PyObject *__pyx_v_linear_exp = 0;
  PyObject *__pyx_v_inhomogenous_term = 0;
  PyObject *__pyx_v_denominator = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("affine_image (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_linear_exp,&__pyx_n_s_inhomogenous_term,&__pyx_n_s_denominator,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_variable)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linear_exp)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("affine_image", 1, 4, 4, 1); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inhomogenous_term)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("affine_image", 1, 4, 4, 2); __PYX_ERR(0, 619, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_denominator)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("affine_image", 1, 4, 4, 3); __PYX_ERR(0, 619, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "affine_image") < 0)) __PYX_ERR(0, 619, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_variable = values[0];
    __pyx_v_linear_exp = values[1];
    __pyx_v_inhomogenous_term = values[2];
    __pyx_v_denominator = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("affine_image", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.affine_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_116affine_image(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_variable, __pyx_v_linear_exp, __pyx_v_inhomogenous_term, __pyx_v_denominator);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_116affine_image(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable, PyObject *__pyx_v_linear_exp, PyObject *__pyx_v_inhomogenous_term, PyObject *__pyx_v_denominator) {
  pplite::Var *__pyx_v_var;
  pplite::Linear_Expr __pyx_v_expr;
  pplite::FLINT_Integer __pyx_v_inhomo;
  pplite::FLINT_Integer __pyx_v_den;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Var *__pyx_t_2;
  pplite::FLINT_Integer __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("affine_image", 1);

  /* "pplite/polyhedron.pyx":620
 * 
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_variable, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":621
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr             # <<<<<<<<<<<<<<
 *         if isinstance(linear_exp, Linear_Expression):
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_variable)->thisptr;
    __pyx_v_var = __pyx_t_2;

    /* "pplite/polyhedron.pyx":620
 * 
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):
 */
  }

  /* "pplite/polyhedron.pyx":622
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):             # <<<<<<<<<<<<<<
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]
 *         cdef FLINT_Integer inhomo
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_linear_exp, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":623
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]             # <<<<<<<<<<<<<<
 *         cdef FLINT_Integer inhomo
 *         cdef FLINT_Integer den
 */
    __pyx_v_expr = (((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_linear_exp)->thisptr[0]);

    /* "pplite/polyhedron.pyx":622
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):             # <<<<<<<<<<<<<<
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]
 *         cdef FLINT_Integer inhomo
 */
  }

  /* "pplite/polyhedron.pyx":626
 *         cdef FLINT_Integer inhomo
 *         cdef FLINT_Integer den
 *         inhomo = Python_int_to_FLINT_Integer(inhomogenous_term)             # <<<<<<<<<<<<<<
 *         den = Python_int_to_FLINT_Integer(denominator)
 *         self.thisptr[0].affine_image(var[0], expr, inhomo, den)
 */
  __pyx_t_3 = __pyx_f_6pplite_19integer_conversions_Python_int_to_FLINT_Integer(__pyx_v_inhomogenous_term); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L1_error)
  __pyx_v_inhomo = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/polyhedron.pyx":627
 *         cdef FLINT_Integer den
 *         inhomo = Python_int_to_FLINT_Integer(inhomogenous_term)
 *         den = Python_int_to_FLINT_Integer(denominator)             # <<<<<<<<<<<<<<
 *         self.thisptr[0].affine_image(var[0], expr, inhomo, den)
 * 
 */
  __pyx_t_3 = __pyx_f_6pplite_19integer_conversions_Python_int_to_FLINT_Integer(__pyx_v_denominator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_v_den = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/polyhedron.pyx":628
 *         inhomo = Python_int_to_FLINT_Integer(inhomogenous_term)
 *         den = Python_int_to_FLINT_Integer(denominator)
 *         self.thisptr[0].affine_image(var[0], expr, inhomo, den)             # <<<<<<<<<<<<<<
 * 
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):
 */
  (__pyx_v_self->thisptr[0]).affine_image((__pyx_v_var[0]), __pyx_v_expr, __pyx_v_inhomo, __pyx_v_den);

  /* "pplite/polyhedron.pyx":619
 *             self.thisptr[0].poly_difference_assign(y[0])
 * 
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.affine_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":630
 *         self.thisptr[0].affine_image(var[0], expr, inhomo, den)
 * 
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_119affine_preimage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_118affine_preimage, "NNC_Polyhedron.affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_119affine_preimage = {"affine_preimage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_119affine_preimage, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_118affine_preimage};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_119affine_preimage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_variable = 0;
  PyObject *__pyx_v_linear_exp = 0;
  PyObject *__pyx_v_inhomogenous_term = 0;
  PyObject *__pyx_v_denominator = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("affine_preimage (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable,&__pyx_n_s_linear_exp,&__pyx_n_s_inhomogenous_term,&__pyx_n_s_denominator,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_variable)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_linear_exp)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("affine_preimage", 1, 4, 4, 1); __PYX_ERR(0, 630, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inhomogenous_term)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("affine_preimage", 1, 4, 4, 2); __PYX_ERR(0, 630, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_denominator)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("affine_preimage", 1, 4, 4, 3); __PYX_ERR(0, 630, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "affine_preimage") < 0)) __PYX_ERR(0, 630, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_variable = values[0];
    __pyx_v_linear_exp = values[1];
    __pyx_v_inhomogenous_term = values[2];
    __pyx_v_denominator = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("affine_preimage", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 630, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.affine_preimage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_118affine_preimage(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_variable, __pyx_v_linear_exp, __pyx_v_inhomogenous_term, __pyx_v_denominator);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_118affine_preimage(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_variable, PyObject *__pyx_v_linear_exp, PyObject *__pyx_v_inhomogenous_term, PyObject *__pyx_v_denominator) {
  pplite::Var *__pyx_v_var;
  pplite::Linear_Expr __pyx_v_expr;
  pplite::FLINT_Integer __pyx_v_inhomo;
  pplite::FLINT_Integer __pyx_v_den;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Var *__pyx_t_2;
  pplite::FLINT_Integer __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("affine_preimage", 1);

  /* "pplite/polyhedron.pyx":631
 * 
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_variable, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":632
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr             # <<<<<<<<<<<<<<
 *         if isinstance(linear_exp, Linear_Expression):
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_variable)->thisptr;
    __pyx_v_var = __pyx_t_2;

    /* "pplite/polyhedron.pyx":631
 * 
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):
 *         if isinstance(variable, Variable):             # <<<<<<<<<<<<<<
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):
 */
  }

  /* "pplite/polyhedron.pyx":633
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):             # <<<<<<<<<<<<<<
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]
 *         cdef FLINT_Integer inhomo
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_linear_exp, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":634
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]             # <<<<<<<<<<<<<<
 *         cdef FLINT_Integer inhomo
 *         cdef FLINT_Integer den
 */
    __pyx_v_expr = (((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_linear_exp)->thisptr[0]);

    /* "pplite/polyhedron.pyx":633
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 *         if isinstance(linear_exp, Linear_Expression):             # <<<<<<<<<<<<<<
 *             expr = (<Linear_Expression> linear_exp).thisptr[0]
 *         cdef FLINT_Integer inhomo
 */
  }

  /* "pplite/polyhedron.pyx":637
 *         cdef FLINT_Integer inhomo
 *         cdef FLINT_Integer den
 *         inhomo = Python_int_to_FLINT_Integer(inhomogenous_term)             # <<<<<<<<<<<<<<
 *         den = Python_int_to_FLINT_Integer(denominator)
 *         self.thisptr[0].affine_preimage(var[0], expr, inhomo, den)
 */
  __pyx_t_3 = __pyx_f_6pplite_19integer_conversions_Python_int_to_FLINT_Integer(__pyx_v_inhomogenous_term); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)
  __pyx_v_inhomo = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/polyhedron.pyx":638
 *         cdef FLINT_Integer den
 *         inhomo = Python_int_to_FLINT_Integer(inhomogenous_term)
 *         den = Python_int_to_FLINT_Integer(denominator)             # <<<<<<<<<<<<<<
 *         self.thisptr[0].affine_preimage(var[0], expr, inhomo, den)
 * 
 */
  __pyx_t_3 = __pyx_f_6pplite_19integer_conversions_Python_int_to_FLINT_Integer(__pyx_v_denominator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L1_error)
  __pyx_v_den = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/polyhedron.pyx":639
 *         inhomo = Python_int_to_FLINT_Integer(inhomogenous_term)
 *         den = Python_int_to_FLINT_Integer(denominator)
 *         self.thisptr[0].affine_preimage(var[0], expr, inhomo, den)             # <<<<<<<<<<<<<<
 * 
 *     # TODO: Implement these
 */
  (__pyx_v_self->thisptr[0]).affine_preimage((__pyx_v_var[0]), __pyx_v_expr, __pyx_v_inhomo, __pyx_v_den);

  /* "pplite/polyhedron.pyx":630
 *         self.thisptr[0].affine_image(var[0], expr, inhomo, den)
 * 
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.affine_preimage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":642
 * 
 *     # TODO: Implement these
 *     def parallel_affine_image(self, args):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_121parallel_affine_image(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_120parallel_affine_image, "NNC_Polyhedron.parallel_affine_image(self, args)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_121parallel_affine_image = {"parallel_affine_image", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_121parallel_affine_image, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_120parallel_affine_image};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_121parallel_affine_image(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parallel_affine_image (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_args,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_args)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 642, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "parallel_affine_image") < 0)) __PYX_ERR(0, 642, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_args = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parallel_affine_image", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 642, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.parallel_affine_image", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_120parallel_affine_image(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_120parallel_affine_image(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parallel_affine_image", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":645
 *         pass
 * 
 *     def widing_assign(self, args):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_123widing_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_122widing_assign, "NNC_Polyhedron.widing_assign(self, args)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_123widing_assign = {"widing_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_123widing_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_122widing_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_123widing_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("widing_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_args,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_args)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "widing_assign") < 0)) __PYX_ERR(0, 645, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_args = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("widing_assign", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 645, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.widing_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_122widing_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_122widing_assign(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("widing_assign", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":648
 *         pass
 * 
 *     def time_elapse_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_125time_elapse_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_124time_elapse_assign, "NNC_Polyhedron.time_elapse_assign(self, other_poly)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_125time_elapse_assign = {"time_elapse_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_125time_elapse_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_124time_elapse_assign};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_125time_elapse_assign(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_other_poly = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("time_elapse_assign (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other_poly,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other_poly)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 648, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "time_elapse_assign") < 0)) __PYX_ERR(0, 648, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other_poly = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("time_elapse_assign", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 648, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.time_elapse_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_124time_elapse_assign(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v_other_poly);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_124time_elapse_assign(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, PyObject *__pyx_v_other_poly) {
  pplite::Poly *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Poly *__pyx_t_2;
  __Pyx_RefNannySetupContext("time_elapse_assign", 1);

  /* "pplite/polyhedron.pyx":649
 * 
 *     def time_elapse_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].time_elapse_assign(y[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other_poly, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron); 
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":650
 *     def time_elapse_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0].time_elapse_assign(y[0])
 * 
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_other_poly)->thisptr;
    __pyx_v_y = __pyx_t_2;

    /* "pplite/polyhedron.pyx":651
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].time_elapse_assign(y[0])             # <<<<<<<<<<<<<<
 * 
 *     def minimize(self):
 */
    (__pyx_v_self->thisptr[0]).time_elapse_assign((__pyx_v_y[0]));

    /* "pplite/polyhedron.pyx":649
 * 
 *     def time_elapse_assign(self, other_poly):
 *         if isinstance(other_poly, NNC_Polyhedron):             # <<<<<<<<<<<<<<
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 *             self.thisptr[0].time_elapse_assign(y[0])
 */
  }

  /* "pplite/polyhedron.pyx":648
 *         pass
 * 
 *     def time_elapse_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":653
 *             self.thisptr[0].time_elapse_assign(y[0])
 * 
 *     def minimize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].minimize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_127minimize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_126minimize, "NNC_Polyhedron.minimize(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_127minimize = {"minimize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_127minimize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_126minimize};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_127minimize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("minimize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "minimize", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_126minimize(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_126minimize(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimize", 1);

  /* "pplite/polyhedron.pyx":654
 * 
 *     def minimize(self):
 *         self.thisptr[0].minimize()             # <<<<<<<<<<<<<<
 * 
 * ## Poly_Con_Rel and Poly_Gen_Rel ##
 */
  (__pyx_v_self->thisptr[0]).minimize();

  /* "pplite/polyhedron.pyx":653
 *             self.thisptr[0].time_elapse_assign(y[0])
 * 
 *     def minimize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].minimize()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_129__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_128__reduce_cython__, "NNC_Polyhedron.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_129__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_129__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_128__reduce_cython__};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_129__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_128__reduce_cython__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_128__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_131__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_130__setstate_cython__, "NNC_Polyhedron.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_131__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_131__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_130__setstate_cython__};
static PyObject *__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_131__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_130__setstate_cython__(((struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_14NNC_Polyhedron_130__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.NNC_Polyhedron.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":659
 * 
 * cdef class Polyhedron_Constraint_Rel(object):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel___cinit__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel___cinit__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self) {
  int __pyx_r;

  /* "pplite/polyhedron.pyx":660
 * cdef class Polyhedron_Constraint_Rel(object):
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  __pyx_v_self->thisptr = NULL;

  /* "pplite/polyhedron.pyx":659
 * 
 * cdef class Polyhedron_Constraint_Rel(object):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":661
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_2__dealloc__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_2__dealloc__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self) {

  /* "pplite/polyhedron.pyx":662
 *         self.thisptr = NULL
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * cdef class Polyhedron_Generator_Rel(object):
 */
  delete __pyx_v_self->thisptr;

  /* "pplite/polyhedron.pyx":661
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_4__reduce_cython__, "Polyhedron_Constraint_Rel.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_4__reduce_cython__};
static PyObject *__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_4__reduce_cython__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.Polyhedron_Constraint_Rel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_6__setstate_cython__, "Polyhedron_Constraint_Rel.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_6__setstate_cython__};
static PyObject *__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.Polyhedron_Constraint_Rel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_6__setstate_cython__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.Polyhedron_Constraint_Rel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":665
 * 
 * cdef class Polyhedron_Generator_Rel(object):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel___cinit__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel___cinit__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self) {
  int __pyx_r;

  /* "pplite/polyhedron.pyx":666
 * cdef class Polyhedron_Generator_Rel(object):
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  __pyx_v_self->thisptr = NULL;

  /* "pplite/polyhedron.pyx":665
 * 
 * cdef class Polyhedron_Generator_Rel(object):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":667
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_2__dealloc__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_2__dealloc__(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self) {

  /* "pplite/polyhedron.pyx":668
 *         self.thisptr = NULL
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * ## def
 */
  delete __pyx_v_self->thisptr;

  /* "pplite/polyhedron.pyx":667
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_24Polyhedron_Generator_Rel_4__reduce_cython__, "Polyhedron_Generator_Rel.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_24Polyhedron_Generator_Rel_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_24Polyhedron_Generator_Rel_4__reduce_cython__};
static PyObject *__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_4__reduce_cython__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.Polyhedron_Generator_Rel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_10polyhedron_24Polyhedron_Generator_Rel_6__setstate_cython__, "Polyhedron_Generator_Rel.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pplite_10polyhedron_24Polyhedron_Generator_Rel_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_24Polyhedron_Generator_Rel_6__setstate_cython__};
static PyObject *__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.polyhedron.Polyhedron_Generator_Rel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_6__setstate_cython__(((struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_10polyhedron_24Polyhedron_Generator_Rel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.polyhedron.Polyhedron_Generator_Rel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":676
 * ###  Helper Functions ###
 * 
 * cdef Topol string_to_Topol(t):             # <<<<<<<<<<<<<<
 *     cdef Topol tt
 *     if t == "closed":
 */

static __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_f_6pplite_10polyhedron_string_to_Topol(PyObject *__pyx_v_t) {
  __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_v_tt;
  __PYX_ENUM_CLASS_DECL pplite::Topol __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_Topol", 1);

  /* "pplite/polyhedron.pyx":678
 * cdef Topol string_to_Topol(t):
 *     cdef Topol tt
 *     if t == "closed":             # <<<<<<<<<<<<<<
 *         tt = Topol.CLOSED
 *         return tt
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_t, __pyx_n_u_closed, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 678, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":679
 *     cdef Topol tt
 *     if t == "closed":
 *         tt = Topol.CLOSED             # <<<<<<<<<<<<<<
 *         return tt
 *     if  t == "nnc":
 */
    __pyx_v_tt = pplite::Topol::CLOSED;

    /* "pplite/polyhedron.pyx":680
 *     if t == "closed":
 *         tt = Topol.CLOSED
 *         return tt             # <<<<<<<<<<<<<<
 *     if  t == "nnc":
 *         tt = Topol.NNC
 */
    __pyx_r = __pyx_v_tt;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":678
 * cdef Topol string_to_Topol(t):
 *     cdef Topol tt
 *     if t == "closed":             # <<<<<<<<<<<<<<
 *         tt = Topol.CLOSED
 *         return tt
 */
  }

  /* "pplite/polyhedron.pyx":681
 *         tt = Topol.CLOSED
 *         return tt
 *     if  t == "nnc":             # <<<<<<<<<<<<<<
 *         tt = Topol.NNC
 *         return tt
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_t, __pyx_n_u_nnc, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 681, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":682
 *         return tt
 *     if  t == "nnc":
 *         tt = Topol.NNC             # <<<<<<<<<<<<<<
 *         return tt
 *     raise ValueError("Topology type conversion failed.")
 */
    __pyx_v_tt = pplite::Topol::NNC;

    /* "pplite/polyhedron.pyx":683
 *     if  t == "nnc":
 *         tt = Topol.NNC
 *         return tt             # <<<<<<<<<<<<<<
 *     raise ValueError("Topology type conversion failed.")
 * 
 */
    __pyx_r = __pyx_v_tt;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":681
 *         tt = Topol.CLOSED
 *         return tt
 *     if  t == "nnc":             # <<<<<<<<<<<<<<
 *         tt = Topol.NNC
 *         return tt
 */
  }

  /* "pplite/polyhedron.pyx":684
 *         tt = Topol.NNC
 *         return tt
 *     raise ValueError("Topology type conversion failed.")             # <<<<<<<<<<<<<<
 * 
 * cdef Spec_Elem string_to_Spec_Elem(s):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 684, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":676
 * ###  Helper Functions ###
 * 
 * cdef Topol string_to_Topol(t):             # <<<<<<<<<<<<<<
 *     cdef Topol tt
 *     if t == "closed":
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.polyhedron.string_to_Topol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/polyhedron.pyx":686
 *     raise ValueError("Topology type conversion failed.")
 * 
 * cdef Spec_Elem string_to_Spec_Elem(s):             # <<<<<<<<<<<<<<
 *     cdef Spec_Elem ss
 *     if s == "empty":
 */

static __PYX_ENUM_CLASS_DECL pplite::Spec_Elem __pyx_f_6pplite_10polyhedron_string_to_Spec_Elem(PyObject *__pyx_v_s) {
  __PYX_ENUM_CLASS_DECL pplite::Spec_Elem __pyx_v_ss;
  __PYX_ENUM_CLASS_DECL pplite::Spec_Elem __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_Spec_Elem", 1);

  /* "pplite/polyhedron.pyx":688
 * cdef Spec_Elem string_to_Spec_Elem(s):
 *     cdef Spec_Elem ss
 *     if s == "empty":             # <<<<<<<<<<<<<<
 *         ss = Spec_Elem.EMPTY
 *         return ss
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_s, __pyx_n_u_empty, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 688, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":689
 *     cdef Spec_Elem ss
 *     if s == "empty":
 *         ss = Spec_Elem.EMPTY             # <<<<<<<<<<<<<<
 *         return ss
 *     if  s == "universe":
 */
    __pyx_v_ss = pplite::Spec_Elem::EMPTY;

    /* "pplite/polyhedron.pyx":690
 *     if s == "empty":
 *         ss = Spec_Elem.EMPTY
 *         return ss             # <<<<<<<<<<<<<<
 *     if  s == "universe":
 *         ss = Spec_Elem.UNIVERSE
 */
    __pyx_r = __pyx_v_ss;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":688
 * cdef Spec_Elem string_to_Spec_Elem(s):
 *     cdef Spec_Elem ss
 *     if s == "empty":             # <<<<<<<<<<<<<<
 *         ss = Spec_Elem.EMPTY
 *         return ss
 */
  }

  /* "pplite/polyhedron.pyx":691
 *         ss = Spec_Elem.EMPTY
 *         return ss
 *     if  s == "universe":             # <<<<<<<<<<<<<<
 *         ss = Spec_Elem.UNIVERSE
 *         return ss
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_s, __pyx_n_u_universe, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 691, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pplite/polyhedron.pyx":692
 *         return ss
 *     if  s == "universe":
 *         ss = Spec_Elem.UNIVERSE             # <<<<<<<<<<<<<<
 *         return ss
 *     raise ValueError("Spec_Elem type conversion failed.")
 */
    __pyx_v_ss = pplite::Spec_Elem::UNIVERSE;

    /* "pplite/polyhedron.pyx":693
 *     if  s == "universe":
 *         ss = Spec_Elem.UNIVERSE
 *         return ss             # <<<<<<<<<<<<<<
 *     raise ValueError("Spec_Elem type conversion failed.")
 */
    __pyx_r = __pyx_v_ss;
    goto __pyx_L0;

    /* "pplite/polyhedron.pyx":691
 *         ss = Spec_Elem.EMPTY
 *         return ss
 *     if  s == "universe":             # <<<<<<<<<<<<<<
 *         ss = Spec_Elem.UNIVERSE
 *         return ss
 */
  }

  /* "pplite/polyhedron.pyx":694
 *         ss = Spec_Elem.UNIVERSE
 *         return ss
 *     raise ValueError("Spec_Elem type conversion failed.")             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 694, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":686
 *     raise ValueError("Topology type conversion failed.")
 * 
 * cdef Spec_Elem string_to_Spec_Elem(s):             # <<<<<<<<<<<<<<
 *     cdef Spec_Elem ss
 *     if s == "empty":
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.polyhedron.string_to_Spec_Elem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6pplite_10polyhedron_NNC_Polyhedron(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pplite_10polyhedron_NNC_Polyhedron(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pplite_10polyhedron_NNC_Polyhedron) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_tp_richcompare_6pplite_10polyhedron_NNC_Polyhedron(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_11__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_11__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_9__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_9__repr__(self);
}

static PyMethodDef __pyx_methods_6pplite_10polyhedron_NNC_Polyhedron[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_9__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"is_necessarily_closed", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_13is_necessarily_closed, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_12is_necessarily_closed},
  {"check_inv", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_15check_inv, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_14check_inv},
  {"is_empty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_17is_empty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_16is_empty},
  {"is_universe", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_19is_universe, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_18is_universe},
  {"is_minimized", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_21is_minimized, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_20is_minimized},
  {"is_topologically_closed", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_23is_topologically_closed, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_22is_topologically_closed},
  {"is_bounded", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_25is_bounded, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_24is_bounded},
  {"is_bounded_expression", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_27is_bounded_expression, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_26is_bounded_expression},
  {"constrains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_29constrains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_28constrains},
  {"equals", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_31equals, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_30equals},
  {"contains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_33contains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_32contains},
  {"strictly_contains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_35strictly_contains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_34strictly_contains},
  {"is_disjoint_from", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_37is_disjoint_from, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_36is_disjoint_from},
  {"get_bounding_box", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_39get_bounding_box, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_38get_bounding_box},
  {"boxed_contains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_41boxed_contains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_40boxed_contains},
  {"topology", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_43topology, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_42topology},
  {"space_dim", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_45space_dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_44space_dim},
  {"affine_dim", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_47affine_dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_46affine_dim},
  {"_relation_with_c", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_49_relation_with_c, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_48_relation_with_c},
  {"_relation_with_g", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_51_relation_with_g, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_50_relation_with_g},
  {"relation_with", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_53relation_with, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_52relation_with},
  {"min", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_55min, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_54min},
  {"max", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_57max, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_56max},
  {"_get_bounds_v", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_59_get_bounds_v, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_58_get_bounds_v},
  {"_get_bounds_ae", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_61_get_bounds_ae, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_60_get_bounds_ae},
  {"_get_boundes_itv", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_63_get_boundes_itv, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_62_get_boundes_itv},
  {"get_bounds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_65get_bounds, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_64get_bounds},
  {"get_unconstrainted", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_67get_unconstrainted, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_66get_unconstrainted},
  {"constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_69constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_68constraints},
  {"generators", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_71generators, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_70generators},
  {"normalized_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_73normalized_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_72normalized_constraints},
  {"num_min_constrains", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_75num_min_constrains, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_74num_min_constrains},
  {"num_min_generators", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_77num_min_generators, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_76num_min_generators},
  {"collapse", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_79collapse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_78collapse},
  {"num_disjuncts", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_81num_disjuncts, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_80num_disjuncts},
  {"disjunct_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_83disjunct_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_82disjunct_constraints},
  {"geom_covers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_85geom_covers, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_84geom_covers},
  {"m_swap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_87m_swap, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_86m_swap},
  {"set_empty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_89set_empty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_88set_empty},
  {"set_topology", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_91set_topology, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_90set_topology},
  {"add_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_93add_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_92add_constraint},
  {"add_constraints", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_95add_constraints, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_94add_constraints},
  {"add_generator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_97add_generator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_96add_generator},
  {"add_generators", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_99add_generators, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_98add_generators},
  {"topological_closure_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_101topological_closure_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_100topological_closure_assign},
  {"unconstain", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_103unconstain, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_102unconstain},
  {"unconstain_many", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_105unconstain_many, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_104unconstain_many},
  {"intersection_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_107intersection_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_106intersection_assign},
  {"join_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_109join_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_108join_assign},
  {"poly_hull_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_111poly_hull_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_110poly_hull_assign},
  {"con_hull_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_113con_hull_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_112con_hull_assign},
  {"poly_difference_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_115poly_difference_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_114poly_difference_assign},
  {"affine_image", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_117affine_image, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_116affine_image},
  {"affine_preimage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_119affine_preimage, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_118affine_preimage},
  {"parallel_affine_image", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_121parallel_affine_image, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_120parallel_affine_image},
  {"widing_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_123widing_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_122widing_assign},
  {"time_elapse_assign", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_125time_elapse_assign, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_124time_elapse_assign},
  {"minimize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_127minimize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_126minimize},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_129__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_128__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_131__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron_130__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pplite_10polyhedron_NNC_Polyhedron_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pplite_10polyhedron_NNC_Polyhedron},
  {Py_tp_repr, (void *)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_9__repr__},
  {Py_tp_hash, (void *)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_7__hash__},
  {Py_tp_doc, (void *)PyDoc_STR("NNC_Polyhedron(**kwrds)\n\n    Wrapper for PPLite's ``Poly`` class.    \n    \n    INPUT:\n\n    - dim_type (int), spec_elem (string \"universe\" or \"empty\"), and topology (\"closed\" or \"nnc\") xor,\n\n    - nnc_poly, :class:`NNC_Polyhedron` xor,\n\n    - cons - a list of :class:`Constraint`.\n\n    OUTPUT:\n\n    A :class:`NNC_Polyhedron`\n\n    EXAMPLES::\n\n    Construct an empty polyhedron:\n\n    >>> from pplite import *\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\")\n    >>> P\n    false\n\n    Construct the universe:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> P\n\n    Define the open first quadrant R^2 by adding constraints:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add_constraint(x>0)\n    >>> P.add_constraint(y>0)\n    >>> P\n    x0>0, x1>0\n\n    We can define a polyhedron with another polyhedron:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add_constraint(x>0)\n    >>> P.add_constraint(y>0)\n    >>> P\n    x0>0, x1>0   \n    >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n    >>> P_2\n    x0>0, x1>0\n\n    We can add generators in the form of points, closure points, lines, and rays to a polyhedron:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add_constraint(x>0)\n    >>> P.add_constraint(y>0)\n    >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n    >>> P_2.add_generator(Point())  # This is a short cut for the origin\n    >>> P_2\n    x0>=0, x1>=0\n\n    We can add several constraints or generators at a time:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add""_constraints([x>0, y>0])\n    >>> P\n    x0>0, x1>0\n\n    Or define directly a polyhedron from a list of constraints:\n    \n    >>> P_2 = NNC_Polyhedron(cons = [x>0, y>0])\n    >>> P == P_2\n    True    \n    ")},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_6pplite_10polyhedron_NNC_Polyhedron},
  {Py_tp_methods, (void *)__pyx_methods_6pplite_10polyhedron_NNC_Polyhedron},
  {Py_tp_init, (void *)__pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6pplite_10polyhedron_NNC_Polyhedron},
  {0, 0},
};
static PyType_Spec __pyx_type_6pplite_10polyhedron_NNC_Polyhedron_spec = {
  "pplite.polyhedron.NNC_Polyhedron",
  sizeof(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pplite_10polyhedron_NNC_Polyhedron_slots,
};
#else

static PyTypeObject __pyx_type_6pplite_10polyhedron_NNC_Polyhedron = {
  PyVarObject_HEAD_INIT(0, 0)
  "pplite.polyhedron.""NNC_Polyhedron", /*tp_name*/
  sizeof(struct __pyx_obj_6pplite_10polyhedron_NNC_Polyhedron), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pplite_10polyhedron_NNC_Polyhedron, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_9__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_7__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("NNC_Polyhedron(**kwrds)\n\n    Wrapper for PPLite's ``Poly`` class.    \n    \n    INPUT:\n\n    - dim_type (int), spec_elem (string \"universe\" or \"empty\"), and topology (\"closed\" or \"nnc\") xor,\n\n    - nnc_poly, :class:`NNC_Polyhedron` xor,\n\n    - cons - a list of :class:`Constraint`.\n\n    OUTPUT:\n\n    A :class:`NNC_Polyhedron`\n\n    EXAMPLES::\n\n    Construct an empty polyhedron:\n\n    >>> from pplite import *\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"empty\", topology = \"nnc\")\n    >>> P\n    false\n\n    Construct the universe:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> P\n\n    Define the open first quadrant R^2 by adding constraints:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add_constraint(x>0)\n    >>> P.add_constraint(y>0)\n    >>> P\n    x0>0, x1>0\n\n    We can define a polyhedron with another polyhedron:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add_constraint(x>0)\n    >>> P.add_constraint(y>0)\n    >>> P\n    x0>0, x1>0   \n    >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n    >>> P_2\n    x0>0, x1>0\n\n    We can add generators in the form of points, closure points, lines, and rays to a polyhedron:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add_constraint(x>0)\n    >>> P.add_constraint(y>0)\n    >>> P_2 = NNC_Polyhedron(nnc_poly = P)\n    >>> P_2.add_generator(Point())  # This is a short cut for the origin\n    >>> P_2\n    x0>=0, x1>=0\n\n    We can add several constraints or generators at a time:\n\n    >>> P = NNC_Polyhedron(dim_type = 2, spec_elem = \"universe\", topology = \"nnc\")\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> P.add""_constraints([x>0, y>0])\n    >>> P\n    x0>0, x1>0\n\n    Or define directly a polyhedron from a list of constraints:\n    \n    >>> P_2 = NNC_Polyhedron(cons = [x>0, y>0])\n    >>> P == P_2\n    True    \n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_6pplite_10polyhedron_NNC_Polyhedron, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pplite_10polyhedron_NNC_Polyhedron, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6pplite_10polyhedron_14NNC_Polyhedron_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pplite_10polyhedron_NNC_Polyhedron, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pplite_10polyhedron_Polyhedron_Constraint_Rel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Constraint_Rel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Constraint_Rel) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_6pplite_10polyhedron_Polyhedron_Constraint_Rel[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_6__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Constraint_Rel},
  {Py_tp_methods, (void *)__pyx_methods_6pplite_10polyhedron_Polyhedron_Constraint_Rel},
  {Py_tp_new, (void *)__pyx_tp_new_6pplite_10polyhedron_Polyhedron_Constraint_Rel},
  {0, 0},
};
static PyType_Spec __pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel_spec = {
  "pplite.polyhedron.Polyhedron_Constraint_Rel",
  sizeof(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel_slots,
};
#else

static PyTypeObject __pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel = {
  PyVarObject_HEAD_INIT(0, 0)
  "pplite.polyhedron.""Polyhedron_Constraint_Rel", /*tp_name*/
  sizeof(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Constraint_Rel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Constraint_Rel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pplite_10polyhedron_Polyhedron_Constraint_Rel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pplite_10polyhedron_Polyhedron_Constraint_Rel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pplite_10polyhedron_Polyhedron_Generator_Rel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Generator_Rel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Generator_Rel) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_6pplite_10polyhedron_Polyhedron_Generator_Rel[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_24Polyhedron_Generator_Rel_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_10polyhedron_24Polyhedron_Generator_Rel_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_10polyhedron_24Polyhedron_Generator_Rel_6__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Generator_Rel},
  {Py_tp_methods, (void *)__pyx_methods_6pplite_10polyhedron_Polyhedron_Generator_Rel},
  {Py_tp_new, (void *)__pyx_tp_new_6pplite_10polyhedron_Polyhedron_Generator_Rel},
  {0, 0},
};
static PyType_Spec __pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel_spec = {
  "pplite.polyhedron.Polyhedron_Generator_Rel",
  sizeof(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel_slots,
};
#else

static PyTypeObject __pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel = {
  PyVarObject_HEAD_INIT(0, 0)
  "pplite.polyhedron.""Polyhedron_Generator_Rel", /*tp_name*/
  sizeof(struct __pyx_obj_6pplite_10polyhedron_Polyhedron_Generator_Rel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pplite_10polyhedron_Polyhedron_Generator_Rel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pplite_10polyhedron_Polyhedron_Generator_Rel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pplite_10polyhedron_Polyhedron_Generator_Rel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_A_class_PPliteGenerator_or_a_cla, __pyx_k_A_class_PPliteGenerator_or_a_cla, sizeof(__pyx_k_A_class_PPliteGenerator_or_a_cla), 0, 1, 0, 0},
    {&__pyx_kp_u_A_class_Variable_or_a_class_Affi, __pyx_k_A_class_Variable_or_a_class_Affi, sizeof(__pyx_k_A_class_Variable_or_a_class_Affi), 0, 1, 0, 0},
    {&__pyx_kp_u_Comparison_with_NNC_polys_only, __pyx_k_Comparison_with_NNC_polys_only, sizeof(__pyx_k_Comparison_with_NNC_polys_only), 0, 1, 0, 0},
    {&__pyx_n_s_NNC_Polyhedron, __pyx_k_NNC_Polyhedron, sizeof(__pyx_k_NNC_Polyhedron), 0, 0, 1, 1},
    {&__pyx_kp_u_NNC_Polyhedron___init___line_94, __pyx_k_NNC_Polyhedron___init___line_94, sizeof(__pyx_k_NNC_Polyhedron___init___line_94), 0, 1, 0, 0},
    {&__pyx_n_s_NNC_Polyhedron___reduce_cython, __pyx_k_NNC_Polyhedron___reduce_cython, sizeof(__pyx_k_NNC_Polyhedron___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron___setstate_cython, __pyx_k_NNC_Polyhedron___setstate_cython, sizeof(__pyx_k_NNC_Polyhedron___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron__get_boundes_itv, __pyx_k_NNC_Polyhedron__get_boundes_itv, sizeof(__pyx_k_NNC_Polyhedron__get_boundes_itv), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron__get_bounds_ae, __pyx_k_NNC_Polyhedron__get_bounds_ae, sizeof(__pyx_k_NNC_Polyhedron__get_bounds_ae), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron__get_bounds_v, __pyx_k_NNC_Polyhedron__get_bounds_v, sizeof(__pyx_k_NNC_Polyhedron__get_bounds_v), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron__relation_with_c, __pyx_k_NNC_Polyhedron__relation_with_c, sizeof(__pyx_k_NNC_Polyhedron__relation_with_c), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron__relation_with_g, __pyx_k_NNC_Polyhedron__relation_with_g, sizeof(__pyx_k_NNC_Polyhedron__relation_with_g), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_add_constraint, __pyx_k_NNC_Polyhedron_add_constraint, sizeof(__pyx_k_NNC_Polyhedron_add_constraint), 0, 0, 1, 1},
    {&__pyx_kp_u_NNC_Polyhedron_add_constraint_li, __pyx_k_NNC_Polyhedron_add_constraint_li, sizeof(__pyx_k_NNC_Polyhedron_add_constraint_li), 0, 1, 0, 0},
    {&__pyx_n_s_NNC_Polyhedron_add_constraints, __pyx_k_NNC_Polyhedron_add_constraints, sizeof(__pyx_k_NNC_Polyhedron_add_constraints), 0, 0, 1, 1},
    {&__pyx_kp_u_NNC_Polyhedron_add_constraints_l, __pyx_k_NNC_Polyhedron_add_constraints_l, sizeof(__pyx_k_NNC_Polyhedron_add_constraints_l), 0, 1, 0, 0},
    {&__pyx_n_s_NNC_Polyhedron_add_generator, __pyx_k_NNC_Polyhedron_add_generator, sizeof(__pyx_k_NNC_Polyhedron_add_generator), 0, 0, 1, 1},
    {&__pyx_kp_u_NNC_Polyhedron_add_generator_lin, __pyx_k_NNC_Polyhedron_add_generator_lin, sizeof(__pyx_k_NNC_Polyhedron_add_generator_lin), 0, 1, 0, 0},
    {&__pyx_n_s_NNC_Polyhedron_add_generators, __pyx_k_NNC_Polyhedron_add_generators, sizeof(__pyx_k_NNC_Polyhedron_add_generators), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_affine_dim, __pyx_k_NNC_Polyhedron_affine_dim, sizeof(__pyx_k_NNC_Polyhedron_affine_dim), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_affine_image, __pyx_k_NNC_Polyhedron_affine_image, sizeof(__pyx_k_NNC_Polyhedron_affine_image), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_affine_preimage, __pyx_k_NNC_Polyhedron_affine_preimage, sizeof(__pyx_k_NNC_Polyhedron_affine_preimage), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_boxed_contains, __pyx_k_NNC_Polyhedron_boxed_contains, sizeof(__pyx_k_NNC_Polyhedron_boxed_contains), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_check_inv, __pyx_k_NNC_Polyhedron_check_inv, sizeof(__pyx_k_NNC_Polyhedron_check_inv), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_collapse, __pyx_k_NNC_Polyhedron_collapse, sizeof(__pyx_k_NNC_Polyhedron_collapse), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_con_hull_assign, __pyx_k_NNC_Polyhedron_con_hull_assign, sizeof(__pyx_k_NNC_Polyhedron_con_hull_assign), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_constrains, __pyx_k_NNC_Polyhedron_constrains, sizeof(__pyx_k_NNC_Polyhedron_constrains), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_constraints, __pyx_k_NNC_Polyhedron_constraints, sizeof(__pyx_k_NNC_Polyhedron_constraints), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_contains, __pyx_k_NNC_Polyhedron_contains, sizeof(__pyx_k_NNC_Polyhedron_contains), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_disjunct_constrai, __pyx_k_NNC_Polyhedron_disjunct_constrai, sizeof(__pyx_k_NNC_Polyhedron_disjunct_constrai), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_equals, __pyx_k_NNC_Polyhedron_equals, sizeof(__pyx_k_NNC_Polyhedron_equals), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_generators, __pyx_k_NNC_Polyhedron_generators, sizeof(__pyx_k_NNC_Polyhedron_generators), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_geom_covers, __pyx_k_NNC_Polyhedron_geom_covers, sizeof(__pyx_k_NNC_Polyhedron_geom_covers), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_get_bounding_box, __pyx_k_NNC_Polyhedron_get_bounding_box, sizeof(__pyx_k_NNC_Polyhedron_get_bounding_box), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_get_bounds, __pyx_k_NNC_Polyhedron_get_bounds, sizeof(__pyx_k_NNC_Polyhedron_get_bounds), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_get_unconstrainte, __pyx_k_NNC_Polyhedron_get_unconstrainte, sizeof(__pyx_k_NNC_Polyhedron_get_unconstrainte), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_intersection_assi, __pyx_k_NNC_Polyhedron_intersection_assi, sizeof(__pyx_k_NNC_Polyhedron_intersection_assi), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_bounded, __pyx_k_NNC_Polyhedron_is_bounded, sizeof(__pyx_k_NNC_Polyhedron_is_bounded), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_bounded_expres, __pyx_k_NNC_Polyhedron_is_bounded_expres, sizeof(__pyx_k_NNC_Polyhedron_is_bounded_expres), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_disjoint_from, __pyx_k_NNC_Polyhedron_is_disjoint_from, sizeof(__pyx_k_NNC_Polyhedron_is_disjoint_from), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_empty, __pyx_k_NNC_Polyhedron_is_empty, sizeof(__pyx_k_NNC_Polyhedron_is_empty), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_minimized, __pyx_k_NNC_Polyhedron_is_minimized, sizeof(__pyx_k_NNC_Polyhedron_is_minimized), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_necessarily_cl, __pyx_k_NNC_Polyhedron_is_necessarily_cl, sizeof(__pyx_k_NNC_Polyhedron_is_necessarily_cl), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_topologically, __pyx_k_NNC_Polyhedron_is_topologically, sizeof(__pyx_k_NNC_Polyhedron_is_topologically), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_is_universe, __pyx_k_NNC_Polyhedron_is_universe, sizeof(__pyx_k_NNC_Polyhedron_is_universe), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_join_assign, __pyx_k_NNC_Polyhedron_join_assign, sizeof(__pyx_k_NNC_Polyhedron_join_assign), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_m_swap, __pyx_k_NNC_Polyhedron_m_swap, sizeof(__pyx_k_NNC_Polyhedron_m_swap), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_max, __pyx_k_NNC_Polyhedron_max, sizeof(__pyx_k_NNC_Polyhedron_max), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_min, __pyx_k_NNC_Polyhedron_min, sizeof(__pyx_k_NNC_Polyhedron_min), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_minimize, __pyx_k_NNC_Polyhedron_minimize, sizeof(__pyx_k_NNC_Polyhedron_minimize), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_normalized_constr, __pyx_k_NNC_Polyhedron_normalized_constr, sizeof(__pyx_k_NNC_Polyhedron_normalized_constr), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_num_disjuncts, __pyx_k_NNC_Polyhedron_num_disjuncts, sizeof(__pyx_k_NNC_Polyhedron_num_disjuncts), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_num_min_constrain, __pyx_k_NNC_Polyhedron_num_min_constrain, sizeof(__pyx_k_NNC_Polyhedron_num_min_constrain), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_num_min_generator, __pyx_k_NNC_Polyhedron_num_min_generator, sizeof(__pyx_k_NNC_Polyhedron_num_min_generator), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_parallel_affine_i, __pyx_k_NNC_Polyhedron_parallel_affine_i, sizeof(__pyx_k_NNC_Polyhedron_parallel_affine_i), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_poly_difference_a, __pyx_k_NNC_Polyhedron_poly_difference_a, sizeof(__pyx_k_NNC_Polyhedron_poly_difference_a), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_poly_hull_assign, __pyx_k_NNC_Polyhedron_poly_hull_assign, sizeof(__pyx_k_NNC_Polyhedron_poly_hull_assign), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_relation_with, __pyx_k_NNC_Polyhedron_relation_with, sizeof(__pyx_k_NNC_Polyhedron_relation_with), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_set_empty, __pyx_k_NNC_Polyhedron_set_empty, sizeof(__pyx_k_NNC_Polyhedron_set_empty), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_set_topology, __pyx_k_NNC_Polyhedron_set_topology, sizeof(__pyx_k_NNC_Polyhedron_set_topology), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_space_dim, __pyx_k_NNC_Polyhedron_space_dim, sizeof(__pyx_k_NNC_Polyhedron_space_dim), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_strictly_contains, __pyx_k_NNC_Polyhedron_strictly_contains, sizeof(__pyx_k_NNC_Polyhedron_strictly_contains), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_time_elapse_assig, __pyx_k_NNC_Polyhedron_time_elapse_assig, sizeof(__pyx_k_NNC_Polyhedron_time_elapse_assig), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_topological_closu, __pyx_k_NNC_Polyhedron_topological_closu, sizeof(__pyx_k_NNC_Polyhedron_topological_closu), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_topology, __pyx_k_NNC_Polyhedron_topology, sizeof(__pyx_k_NNC_Polyhedron_topology), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_unconstain, __pyx_k_NNC_Polyhedron_unconstain, sizeof(__pyx_k_NNC_Polyhedron_unconstain), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_unconstain_many, __pyx_k_NNC_Polyhedron_unconstain_many, sizeof(__pyx_k_NNC_Polyhedron_unconstain_many), 0, 0, 1, 1},
    {&__pyx_n_s_NNC_Polyhedron_widing_assign, __pyx_k_NNC_Polyhedron_widing_assign, sizeof(__pyx_k_NNC_Polyhedron_widing_assign), 0, 0, 1, 1},
    {&__pyx_kp_u_Poly_Construction_Failed, __pyx_k_Poly_Construction_Failed, sizeof(__pyx_k_Poly_Construction_Failed), 0, 1, 0, 0},
    {&__pyx_n_s_Polyhedron_Constraint_Rel, __pyx_k_Polyhedron_Constraint_Rel, sizeof(__pyx_k_Polyhedron_Constraint_Rel), 0, 0, 1, 1},
    {&__pyx_n_s_Polyhedron_Constraint_Rel___redu, __pyx_k_Polyhedron_Constraint_Rel___redu, sizeof(__pyx_k_Polyhedron_Constraint_Rel___redu), 0, 0, 1, 1},
    {&__pyx_n_s_Polyhedron_Constraint_Rel___sets, __pyx_k_Polyhedron_Constraint_Rel___sets, sizeof(__pyx_k_Polyhedron_Constraint_Rel___sets), 0, 0, 1, 1},
    {&__pyx_n_s_Polyhedron_Generator_Rel, __pyx_k_Polyhedron_Generator_Rel, sizeof(__pyx_k_Polyhedron_Generator_Rel), 0, 0, 1, 1},
    {&__pyx_n_s_Polyhedron_Generator_Rel___reduc, __pyx_k_Polyhedron_Generator_Rel___reduc, sizeof(__pyx_k_Polyhedron_Generator_Rel___reduc), 0, 0, 1, 1},
    {&__pyx_n_s_Polyhedron_Generator_Rel___setst, __pyx_k_Polyhedron_Generator_Rel___setst, sizeof(__pyx_k_Polyhedron_Generator_Rel___setst), 0, 0, 1, 1},
    {&__pyx_kp_u_Spec_Elem_type_conversion_failed, __pyx_k_Spec_Elem_type_conversion_failed, sizeof(__pyx_k_Spec_Elem_type_conversion_failed), 0, 1, 0, 0},
    {&__pyx_kp_u_TESTS_from_pplite_import_NNC_Po, __pyx_k_TESTS_from_pplite_import_NNC_Po, sizeof(__pyx_k_TESTS_from_pplite_import_NNC_Po), 0, 1, 0, 0},
    {&__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_2, __pyx_k_TESTS_from_pplite_import_NNC_Po_2, sizeof(__pyx_k_TESTS_from_pplite_import_NNC_Po_2), 0, 1, 0, 0},
    {&__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_3, __pyx_k_TESTS_from_pplite_import_NNC_Po_3, sizeof(__pyx_k_TESTS_from_pplite_import_NNC_Po_3), 0, 1, 0, 0},
    {&__pyx_kp_u_TESTS_from_pplite_import_NNC_Po_4, __pyx_k_TESTS_from_pplite_import_NNC_Po_4, sizeof(__pyx_k_TESTS_from_pplite_import_NNC_Po_4), 0, 1, 0, 0},
    {&__pyx_kp_u_Topology_type_conversion_failed, __pyx_k_Topology_type_conversion_failed, sizeof(__pyx_k_Topology_type_conversion_failed), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s__106, __pyx_k__106, sizeof(__pyx_k__106), 0, 0, 1, 1},
    {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
    {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
    {&__pyx_n_s_add_constraint, __pyx_k_add_constraint, sizeof(__pyx_k_add_constraint), 0, 0, 1, 1},
    {&__pyx_n_s_add_constraints, __pyx_k_add_constraints, sizeof(__pyx_k_add_constraints), 0, 0, 1, 1},
    {&__pyx_n_s_add_generator, __pyx_k_add_generator, sizeof(__pyx_k_add_generator), 0, 0, 1, 1},
    {&__pyx_n_s_add_generators, __pyx_k_add_generators, sizeof(__pyx_k_add_generators), 0, 0, 1, 1},
    {&__pyx_n_s_ae, __pyx_k_ae, sizeof(__pyx_k_ae), 0, 0, 1, 1},
    {&__pyx_n_s_affine_dim, __pyx_k_affine_dim, sizeof(__pyx_k_affine_dim), 0, 0, 1, 1},
    {&__pyx_n_s_affine_expr, __pyx_k_affine_expr, sizeof(__pyx_k_affine_expr), 0, 0, 1, 1},
    {&__pyx_n_s_affine_image, __pyx_k_affine_image, sizeof(__pyx_k_affine_image), 0, 0, 1, 1},
    {&__pyx_n_s_affine_preimage, __pyx_k_affine_preimage, sizeof(__pyx_k_affine_preimage), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_bboxed, __pyx_k_bboxed, sizeof(__pyx_k_bboxed), 0, 0, 1, 1},
    {&__pyx_n_s_boxed, __pyx_k_boxed, sizeof(__pyx_k_boxed), 0, 0, 1, 1},
    {&__pyx_n_s_boxed_contains, __pyx_k_boxed_contains, sizeof(__pyx_k_boxed_contains), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_s_cc, __pyx_k_cc, sizeof(__pyx_k_cc), 0, 0, 1, 1},
    {&__pyx_n_s_check_inv, __pyx_k_check_inv, sizeof(__pyx_k_check_inv), 0, 0, 1, 1},
    {&__pyx_kp_u_class_NNC_Polyhedron_needs_to_b, __pyx_k_class_NNC_Polyhedron_needs_to_b, sizeof(__pyx_k_class_NNC_Polyhedron_needs_to_b), 0, 1, 0, 0},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_u_closed, __pyx_k_closed, sizeof(__pyx_k_closed), 0, 1, 0, 1},
    {&__pyx_n_s_collapse, __pyx_k_collapse, sizeof(__pyx_k_collapse), 0, 0, 1, 1},
    {&__pyx_n_s_con, __pyx_k_con, sizeof(__pyx_k_con), 0, 0, 1, 1},
    {&__pyx_n_s_con_hull_assign, __pyx_k_con_hull_assign, sizeof(__pyx_k_con_hull_assign), 0, 0, 1, 1},
    {&__pyx_n_u_cons, __pyx_k_cons, sizeof(__pyx_k_cons), 0, 1, 0, 1},
    {&__pyx_n_s_constrains, __pyx_k_constrains, sizeof(__pyx_k_constrains), 0, 0, 1, 1},
    {&__pyx_n_s_constraint, __pyx_k_constraint, sizeof(__pyx_k_constraint), 0, 0, 1, 1},
    {&__pyx_n_s_constraint_vector, __pyx_k_constraint_vector, sizeof(__pyx_k_constraint_vector), 0, 0, 1, 1},
    {&__pyx_n_s_constraints, __pyx_k_constraints, sizeof(__pyx_k_constraints), 0, 0, 1, 1},
    {&__pyx_n_s_contains, __pyx_k_contains, sizeof(__pyx_k_contains), 0, 0, 1, 1},
    {&__pyx_n_s_den, __pyx_k_den, sizeof(__pyx_k_den), 0, 0, 1, 1},
    {&__pyx_n_s_denominator, __pyx_k_denominator, sizeof(__pyx_k_denominator), 0, 0, 1, 1},
    {&__pyx_n_u_dim_type, __pyx_k_dim_type, sizeof(__pyx_k_dim_type), 0, 1, 0, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_disjunct_constraints, __pyx_k_disjunct_constraints, sizeof(__pyx_k_disjunct_constraints), 0, 0, 1, 1},
    {&__pyx_kp_u_double_check_inputs_of_construct, __pyx_k_double_check_inputs_of_construct, sizeof(__pyx_k_double_check_inputs_of_construct), 0, 1, 0, 0},
    {&__pyx_n_u_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 1, 0, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_equals, __pyx_k_equals, sizeof(__pyx_k_equals), 0, 0, 1, 1},
    {&__pyx_n_s_expr, __pyx_k_expr, sizeof(__pyx_k_expr), 0, 0, 1, 1},
    {&__pyx_n_s_expression, __pyx_k_expression, sizeof(__pyx_k_expression), 0, 0, 1, 1},
    {&__pyx_kp_u_expression_needs_to_be_of_class, __pyx_k_expression_needs_to_be_of_class, sizeof(__pyx_k_expression_needs_to_be_of_class), 0, 1, 0, 0},
    {&__pyx_n_s_f_b, __pyx_k_f_b, sizeof(__pyx_k_f_b), 0, 0, 1, 1},
    {&__pyx_n_u_false, __pyx_k_false, sizeof(__pyx_k_false), 0, 1, 0, 1},
    {&__pyx_n_s_from_below, __pyx_k_from_below, sizeof(__pyx_k_from_below), 0, 0, 1, 1},
    {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
    {&__pyx_n_s_g_ptr, __pyx_k_g_ptr, sizeof(__pyx_k_g_ptr), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_gen, __pyx_k_gen, sizeof(__pyx_k_gen), 0, 0, 1, 1},
    {&__pyx_n_s_gen_object, __pyx_k_gen_object, sizeof(__pyx_k_gen_object), 0, 0, 1, 1},
    {&__pyx_n_s_gen_or_constraint, __pyx_k_gen_or_constraint, sizeof(__pyx_k_gen_or_constraint), 0, 0, 1, 1},
    {&__pyx_n_s_generator, __pyx_k_generator, sizeof(__pyx_k_generator), 0, 0, 1, 1},
    {&__pyx_n_s_generator_vector, __pyx_k_generator_vector, sizeof(__pyx_k_generator_vector), 0, 0, 1, 1},
    {&__pyx_n_s_generators, __pyx_k_generators, sizeof(__pyx_k_generators), 0, 0, 1, 1},
    {&__pyx_n_u_gens, __pyx_k_gens, sizeof(__pyx_k_gens), 0, 1, 0, 1},
    {&__pyx_n_s_geom_covers, __pyx_k_geom_covers, sizeof(__pyx_k_geom_covers), 0, 0, 1, 1},
    {&__pyx_n_s_get_boundes_itv, __pyx_k_get_boundes_itv, sizeof(__pyx_k_get_boundes_itv), 0, 0, 1, 1},
    {&__pyx_n_s_get_bounding_box, __pyx_k_get_bounding_box, sizeof(__pyx_k_get_bounding_box), 0, 0, 1, 1},
    {&__pyx_n_s_get_bounds, __pyx_k_get_bounds, sizeof(__pyx_k_get_bounds), 0, 0, 1, 1},
    {&__pyx_n_s_get_bounds_ae, __pyx_k_get_bounds_ae, sizeof(__pyx_k_get_bounds_ae), 0, 0, 1, 1},
    {&__pyx_n_s_get_bounds_v, __pyx_k_get_bounds_v, sizeof(__pyx_k_get_bounds_v), 0, 0, 1, 1},
    {&__pyx_n_s_get_unconstrainted, __pyx_k_get_unconstrainted, sizeof(__pyx_k_get_unconstrainted), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_gg, __pyx_k_gg, sizeof(__pyx_k_gg), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_included_pointer, __pyx_k_included_pointer, sizeof(__pyx_k_included_pointer), 0, 0, 1, 1},
    {&__pyx_n_s_included_ptr, __pyx_k_included_ptr, sizeof(__pyx_k_included_ptr), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_n_s_inhomo, __pyx_k_inhomo, sizeof(__pyx_k_inhomo), 0, 0, 1, 1},
    {&__pyx_n_s_inhomogenous_term, __pyx_k_inhomogenous_term, sizeof(__pyx_k_inhomogenous_term), 0, 0, 1, 1},
    {&__pyx_n_s_intersection_assign, __pyx_k_intersection_assign, sizeof(__pyx_k_intersection_assign), 0, 0, 1, 1},
    {&__pyx_n_s_is_bounded, __pyx_k_is_bounded, sizeof(__pyx_k_is_bounded), 0, 0, 1, 1},
    {&__pyx_n_s_is_bounded_expression, __pyx_k_is_bounded_expression, sizeof(__pyx_k_is_bounded_expression), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_disjoint_from, __pyx_k_is_disjoint_from, sizeof(__pyx_k_is_disjoint_from), 0, 0, 1, 1},
    {&__pyx_n_s_is_empty, __pyx_k_is_empty, sizeof(__pyx_k_is_empty), 0, 0, 1, 1},
    {&__pyx_n_s_is_minimized, __pyx_k_is_minimized, sizeof(__pyx_k_is_minimized), 0, 0, 1, 1},
    {&__pyx_n_s_is_necessarily_closed, __pyx_k_is_necessarily_closed, sizeof(__pyx_k_is_necessarily_closed), 0, 0, 1, 1},
    {&__pyx_n_s_is_topologically_closed, __pyx_k_is_topologically_closed, sizeof(__pyx_k_is_topologically_closed), 0, 0, 1, 1},
    {&__pyx_n_s_is_universe, __pyx_k_is_universe, sizeof(__pyx_k_is_universe), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_iter_of_cons, __pyx_k_iter_of_cons, sizeof(__pyx_k_iter_of_cons), 0, 0, 1, 1},
    {&__pyx_n_s_iter_of_gens, __pyx_k_iter_of_gens, sizeof(__pyx_k_iter_of_gens), 0, 0, 1, 1},
    {&__pyx_n_s_iter_of_var_or_index_set, __pyx_k_iter_of_var_or_index_set, sizeof(__pyx_k_iter_of_var_or_index_set), 0, 0, 1, 1},
    {&__pyx_n_s_itv, __pyx_k_itv, sizeof(__pyx_k_itv), 0, 0, 1, 1},
    {&__pyx_n_s_itv_expr, __pyx_k_itv_expr, sizeof(__pyx_k_itv_expr), 0, 0, 1, 1},
    {&__pyx_n_s_join_assign, __pyx_k_join_assign, sizeof(__pyx_k_join_assign), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_linear_exp, __pyx_k_linear_exp, sizeof(__pyx_k_linear_exp), 0, 0, 1, 1},
    {&__pyx_n_s_m_swap, __pyx_k_m_swap, sizeof(__pyx_k_m_swap), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
    {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
    {&__pyx_n_s_minimize, __pyx_k_minimize, sizeof(__pyx_k_minimize), 0, 0, 1, 1},
    {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_nn, __pyx_k_nn, sizeof(__pyx_k_nn), 0, 0, 1, 1},
    {&__pyx_n_u_nnc, __pyx_k_nnc, sizeof(__pyx_k_nnc), 0, 1, 0, 1},
    {&__pyx_n_u_nnc_poly, __pyx_k_nnc_poly, sizeof(__pyx_k_nnc_poly), 0, 1, 0, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_normalized_constraints, __pyx_k_normalized_constraints, sizeof(__pyx_k_normalized_constraints), 0, 0, 1, 1},
    {&__pyx_n_s_num_disjuncts, __pyx_k_num_disjuncts, sizeof(__pyx_k_num_disjuncts), 0, 0, 1, 1},
    {&__pyx_n_s_num_min_constrains, __pyx_k_num_min_constrains, sizeof(__pyx_k_num_min_constrains), 0, 0, 1, 1},
    {&__pyx_n_s_num_min_generators, __pyx_k_num_min_generators, sizeof(__pyx_k_num_min_generators), 0, 0, 1, 1},
    {&__pyx_n_s_other_poly, __pyx_k_other_poly, sizeof(__pyx_k_other_poly), 0, 0, 1, 1},
    {&__pyx_kp_u_other_poly_needs_to_be_of_class, __pyx_k_other_poly_needs_to_be_of_class, sizeof(__pyx_k_other_poly_needs_to_be_of_class), 0, 1, 0, 0},
    {&__pyx_n_s_p_c_r, __pyx_k_p_c_r, sizeof(__pyx_k_p_c_r), 0, 0, 1, 1},
    {&__pyx_n_s_p_g_r, __pyx_k_p_g_r, sizeof(__pyx_k_p_g_r), 0, 0, 1, 1},
    {&__pyx_n_s_parallel_affine_image, __pyx_k_parallel_affine_image, sizeof(__pyx_k_parallel_affine_image), 0, 0, 1, 1},
    {&__pyx_n_s_poly_difference_assign, __pyx_k_poly_difference_assign, sizeof(__pyx_k_poly_difference_assign), 0, 0, 1, 1},
    {&__pyx_n_s_poly_hull_assign, __pyx_k_poly_hull_assign, sizeof(__pyx_k_poly_hull_assign), 0, 0, 1, 1},
    {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
    {&__pyx_n_s_pplite_polyhedron, __pyx_k_pplite_polyhedron, sizeof(__pyx_k_pplite_polyhedron), 0, 0, 1, 1},
    {&__pyx_kp_s_pplite_polyhedron_pyx, __pyx_k_pplite_polyhedron_pyx, sizeof(__pyx_k_pplite_polyhedron_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_relation_with, __pyx_k_relation_with, sizeof(__pyx_k_relation_with), 0, 0, 1, 1},
    {&__pyx_n_s_relation_with_c, __pyx_k_relation_with_c, sizeof(__pyx_k_relation_with_c), 0, 0, 1, 1},
    {&__pyx_n_s_relation_with_g, __pyx_k_relation_with_g, sizeof(__pyx_k_relation_with_g), 0, 0, 1, 1},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_set_empty, __pyx_k_set_empty, sizeof(__pyx_k_set_empty), 0, 0, 1, 1},
    {&__pyx_n_s_set_topology, __pyx_k_set_topology, sizeof(__pyx_k_set_topology), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_space_dim, __pyx_k_space_dim, sizeof(__pyx_k_space_dim), 0, 0, 1, 1},
    {&__pyx_n_s_space_dimension, __pyx_k_space_dimension, sizeof(__pyx_k_space_dimension), 0, 0, 1, 1},
    {&__pyx_n_u_spec_elem, __pyx_k_spec_elem, sizeof(__pyx_k_spec_elem), 0, 1, 0, 1},
    {&__pyx_n_s_strictly_contains, __pyx_k_strictly_contains, sizeof(__pyx_k_strictly_contains), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_time_elapse_assign, __pyx_k_time_elapse_assign, sizeof(__pyx_k_time_elapse_assign), 0, 0, 1, 1},
    {&__pyx_n_s_topological_closure_assign, __pyx_k_topological_closure_assign, sizeof(__pyx_k_topological_closure_assign), 0, 0, 1, 1},
    {&__pyx_n_s_topology, __pyx_k_topology, sizeof(__pyx_k_topology), 0, 0, 1, 1},
    {&__pyx_n_u_topology, __pyx_k_topology, sizeof(__pyx_k_topology), 0, 1, 0, 1},
    {&__pyx_n_s_tt, __pyx_k_tt, sizeof(__pyx_k_tt), 0, 0, 1, 1},
    {&__pyx_n_s_unconstain, __pyx_k_unconstain, sizeof(__pyx_k_unconstain), 0, 0, 1, 1},
    {&__pyx_n_s_unconstain_many, __pyx_k_unconstain_many, sizeof(__pyx_k_unconstain_many), 0, 0, 1, 1},
    {&__pyx_n_u_universe, __pyx_k_universe, sizeof(__pyx_k_universe), 0, 1, 0, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_var, __pyx_k_var, sizeof(__pyx_k_var), 0, 0, 1, 1},
    {&__pyx_n_s_variable, __pyx_k_variable, sizeof(__pyx_k_variable), 0, 0, 1, 1},
    {&__pyx_kp_u_variable_needs_to_be_of_class_Va, __pyx_k_variable_needs_to_be_of_class_Va, sizeof(__pyx_k_variable_needs_to_be_of_class_Va), 0, 1, 0, 0},
    {&__pyx_n_s_variable_or_affine_expr, __pyx_k_variable_or_affine_expr, sizeof(__pyx_k_variable_or_affine_expr), 0, 0, 1, 1},
    {&__pyx_n_s_vv, __pyx_k_vv, sizeof(__pyx_k_vv), 0, 0, 1, 1},
    {&__pyx_n_s_widing_assign, __pyx_k_widing_assign, sizeof(__pyx_k_widing_assign), 0, 0, 1, 1},
    {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
    {&__pyx_n_s_yy, __pyx_k_yy, sizeof(__pyx_k_yy), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 395, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pplite/polyhedron.pyx":141
 *                 self.thisptr = new Poly(dd, ss, tt)
 *                 return
 *             raise ValueError("double check inputs of constructor.")             # <<<<<<<<<<<<<<
 *         if "nnc_poly" in kwrds.keys():
 *             nnc_poly = kwrds.pop("nnc_poly")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_double_check_inputs_of_construct); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pplite/polyhedron.pyx":148
 *                 self.thisptr = new Poly(yy[0])
 *                 return
 *             raise ValueError(":class:`NNC_Polyhedron` needs to be provided to use the nnc_poly key word constructor.")             # <<<<<<<<<<<<<<
 *         if "cons" in kwrds.keys():
 *             cons = kwrds.pop("cons")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_class_NNC_Polyhedron_needs_to_b); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pplite/polyhedron.pyx":181
 *                 self.thisptr.add_gen(gg)
 *             return
 *         raise ValueError("Poly Construction Failed")             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Poly_Construction_Failed); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pplite/polyhedron.pyx":209
 *         if isinstance(other, NNC_Polyhedron):
 *             return self.equals(other)
 *         raise TypeError("Comparison with NNC polys only!")             # <<<<<<<<<<<<<<
 * 
 *     def is_necessarily_closed(self):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Comparison_with_NNC_polys_only); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pplite/polyhedron.pyx":237
 *             expr = (<Linear_Expression> expression).thisptr[0]
 *         else:
 *             raise TypeError("expression needs to be of :class:`Linear_Expression`.")             # <<<<<<<<<<<<<<
 *         cdef cppbool f_b
 *         f_b = from_below
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_expression_needs_to_be_of_class); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pplite/polyhedron.pyx":247
 *             vv = (<Variable> variable).thisptr
 *             return self.thisptr[0].constrains(vv[0])
 *         raise TypeError("variable needs to be of :class:`Variable`.")             # <<<<<<<<<<<<<<
 * 
 *     def equals(self, other_poly):
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_variable_needs_to_be_of_class_Va); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pplite/polyhedron.pyx":254
 *             yy = (<NNC_Polyhedron> other_poly).thisptr
 *             return self.thisptr[0].equals(yy[0])
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")             # <<<<<<<<<<<<<<
 * 
 *     def contains(self, other_poly):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_other_poly_needs_to_be_of_class); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pplite/polyhedron.pyx":319
 *             return result
 *         else:
 *             raise TypeError("A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.")             # <<<<<<<<<<<<<<
 * 
 *     def relation_with(self, gen_or_constraint):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_A_class_PPliteGenerator_or_a_cla); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pplite/polyhedron.pyx":383
 *         if isinstance(variable_or_affine_expr, Affine_Expression):
 *             return self._get_bounds_ae(variable_or_affine_expr)
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")             # <<<<<<<<<<<<<<
 * 
 *     def get_unconstrainted(self):
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_A_class_Variable_or_a_class_Affi); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pplite/polyhedron.pyx":684
 *         tt = Topol.NNC
 *         return tt
 *     raise ValueError("Topology type conversion failed.")             # <<<<<<<<<<<<<<
 * 
 * cdef Spec_Elem string_to_Spec_Elem(s):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Topology_type_conversion_failed); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pplite/polyhedron.pyx":694
 *         ss = Spec_Elem.UNIVERSE
 *         return ss
 *     raise ValueError("Spec_Elem type conversion failed.")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Spec_Elem_type_conversion_failed); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "pplite/polyhedron.pyx":211
 *         raise TypeError("Comparison with NNC polys only!")
 * 
 *     def is_necessarily_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_necessarily_closed, 211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 211, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":214
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 *     def check_inv(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].check_inv()
 * 
 */
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_check_inv, 214, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 214, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":217
 *         return self.thisptr[0].check_inv()
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_empty()
 * 
 */
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_empty, 217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 217, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":220
 *         return self.thisptr[0].is_empty()
 * 
 *     def is_universe(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_universe()
 * 
 */
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_universe, 220, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 220, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":223
 *         return self.thisptr[0].is_universe()
 * 
 *     def is_minimized(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_minimized()
 * 
 */
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_minimized, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 223, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":226
 *         return self.thisptr[0].is_minimized()
 * 
 *     def is_topologically_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_topologically_closed()
 * 
 */
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_topologically_closed, 226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 226, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":229
 *         return self.thisptr[0].is_topologically_closed()
 * 
 *     def is_bounded(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_bounded()
 * 
 */
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_bounded, 229, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 229, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":232
 *         return self.thisptr[0].is_bounded()
 * 
 *     def is_bounded_expression(self, from_below, expression):             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr expr
 *         if isinstance(expression, Linear_Expression):
 */
  __pyx_tuple__22 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_from_below, __pyx_n_s_expression, __pyx_n_s_expr, __pyx_n_s_f_b); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_bounded_expression, 232, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 232, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":242
 *         return self.thisptr[0].is_bounded_expr(f_b, expr)
 * 
 *     def constrains(self,variable):             # <<<<<<<<<<<<<<
 *         cdef Var* vv
 *         if isinstance(variable, Variable):
 */
  __pyx_tuple__24 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_variable, __pyx_n_s_vv); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_constrains, 242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 242, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":249
 *         raise TypeError("variable needs to be of :class:`Variable`.")
 * 
 *     def equals(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_tuple__26 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_other_poly, __pyx_n_s_yy); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_equals, 249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 249, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":256
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_contains, 256, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 256, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":263
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def strictly_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_strictly_contains, 263, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 263, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":270
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def is_disjoint_from(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_is_disjoint_from, 270, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 270, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":277
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def get_bounding_box(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_get_bounding_box, 277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 277, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":280
 *         pass
 * 
 *     def boxed_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_boxed_contains, 280, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 280, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":288
 * 
 *     # queries
 *     def topology(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_topology, 288, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 288, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":291
 *         pass
 * 
 *     def space_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.space_dim()
 * 
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_space_dim, 291, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 291, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":294
 *         return self.thisptr.space_dim()
 * 
 *     def affine_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].affine_dim()
 * 
 */
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_affine_dim, 294, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 294, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":297
 *         return self.thisptr[0].affine_dim()
 * 
 *     def _relation_with_c(self, constraint):             # <<<<<<<<<<<<<<
 *         cdef Con cc
 *         cdef Poly_Con_Rel p_c_r
 */
  __pyx_tuple__36 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_constraint, __pyx_n_s_cc, __pyx_n_s_p_c_r, __pyx_n_s_result); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_relation_with_c, 297, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 297, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":309
 *             raise TypeError()
 * 
 *     def _relation_with_g(self, generator):             # <<<<<<<<<<<<<<
 *         cdef Gen gg
 *         cdef Poly_Gen_Rel p_g_r
 */
  __pyx_tuple__38 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_generator, __pyx_n_s_gg, __pyx_n_s_p_g_r, __pyx_n_s_result); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_relation_with_g, 309, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 309, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":321
 *             raise TypeError("A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.")
 * 
 *     def relation_with(self, gen_or_constraint):             # <<<<<<<<<<<<<<
 *         try:
 *             return self._relation_with_c(gen_or_constraint)
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_gen_or_constraint); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_relation_with, 321, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 321, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":329
 * 
 * 
 *     def min(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */
  __pyx_tuple__42 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_affine_expr, __pyx_n_s_value, __pyx_n_s_included_pointer, __pyx_n_s_gen_object, __pyx_n_s_ae, __pyx_n_s_val, __pyx_n_s_included_ptr, __pyx_n_s_g_ptr); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_min, 329, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 329, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":343
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)
 * 
 *     def max(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_max, 343, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 343, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":357
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)
 * 
 *     def _get_bounds_v(self, variable):             # <<<<<<<<<<<<<<
 *         cdef Var* v
 *         cdef Itv itv
 */
  __pyx_tuple__45 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_variable, __pyx_n_s_v, __pyx_n_s_itv, __pyx_n_s_i); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_get_bounds_v, 357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 357, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":366
 *         return i
 * 
 *     def _get_bounds_ae(self, affine_expr):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef Itv itv
 */
  __pyx_tuple__47 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_affine_expr, __pyx_n_s_ae, __pyx_n_s_itv, __pyx_n_s_i); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_get_bounds_ae, 366, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 366, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":375
 *         return i
 * 
 *     def _get_boundes_itv(self, itv_expr):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_itv_expr); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_get_boundes_itv, 375, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 375, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":378
 *         pass
 * 
 *     def get_bounds(self, variable_or_affine_expr):             # <<<<<<<<<<<<<<
 *         if isinstance(variable_or_affine_expr, Variable):
 *             return self._get_bounds_v(variable_or_affine_expr)
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_variable_or_affine_expr); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_get_bounds, 378, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 378, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":385
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")
 * 
 *     def get_unconstrainted(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_get_unconstrainted, 385, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 385, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":388
 *         pass
 * 
 *     def constraints(self):             # <<<<<<<<<<<<<<
 *         # Access constraints indirectly via copy_cons()
 *         # TODO: Properly implement via sys and Cons_Proxy in Poly_Impl
 */
  __pyx_tuple__54 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_constraint_vector, __pyx_n_s_result, __pyx_n_s_index, __pyx_n_s_i, __pyx_n_s_c); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_constraints, 388, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 388, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":401
 *         return result
 * 
 *     def generators(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of :class:`PPliteGenerator`.
 */
  __pyx_tuple__56 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_generator_vector, __pyx_n_s_result, __pyx_n_s_index, __pyx_n_s_i, __pyx_n_s_g); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_generators, 401, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 401, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":417
 *         return result
 * 
 *     def normalized_constraints(self):             # <<<<<<<<<<<<<<
 *         # TODO implement once Cons_Proxy is implemented.
 *         pass
 */
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_normalized_constraints, 417, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 417, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":421
 *         pass
 * 
 *     def num_min_constrains(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_cons()
 * 
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_num_min_constrains, 421, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 421, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":424
 *         return self.thisptr[0].num_min_cons()
 * 
 *     def num_min_generators(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_gens()
 * 
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_num_min_generators, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":427
 *         return self.thisptr[0].num_min_gens()
 * 
 *     def collapse(self, n):             # <<<<<<<<<<<<<<
 *         cdef dim_type nn
 *         if isinstance(n, int):
 */
  __pyx_tuple__61 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_n, __pyx_n_s_nn); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_collapse, 427, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 427, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":433
 *         self.thisptr[0].collapse(nn)
 * 
 *     def num_disjuncts(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_disjuncts()
 * 
 */
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_num_disjuncts, 433, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 433, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":436
 *         return self.thisptr[0].num_disjuncts()
 * 
 *     def disjunct_constraints(self, n):             # <<<<<<<<<<<<<<
 *         # TODO implement once Cons_Proxy is implemented.
 *         # cdef dim_type nn
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_n); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_disjunct_constraints, 436, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 436, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":444
 *         pass
 * 
 *     def geom_covers(self, other_poly):             # <<<<<<<<<<<<<<
 *         """
 *         Input: :class:`NNC_Polyhedron`
 */
  __pyx_tuple__66 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_other_poly, __pyx_n_s_y); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_geom_covers, 444, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 444, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":453
 *             return self.thisptr[0].geom_covers(y[0])
 * 
 *     def m_swap(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_m_swap, 453, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 453, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":458
 *             self.thisptr[0].m_swap(y[0])
 * 
 *     def set_empty(self):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the :class:`NNC_Polyhedron` to empty.
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_set_empty, 458, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 458, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":464
 *         self.thisptr[0].set_empty()
 * 
 *     def set_topology(self, topology):             # <<<<<<<<<<<<<<
 *         cdef Topol tt
 *         tt = string_to_Topol(topology)
 */
  __pyx_tuple__70 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_topology, __pyx_n_s_tt); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_set_topology, 464, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 464, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":469
 *         self.thisptr[0].set_topology(tt)
 * 
 *     def add_constraint(self, constraint):             # <<<<<<<<<<<<<<
 *         r"""
 *         TESTS::
 */
  __pyx_tuple__72 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_constraint, __pyx_n_s_c); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_add_constraint, 469, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 469, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":524
 *             self.thisptr[0].add_con(c)
 * 
 *     def add_constraints(self, iter_of_cons):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */
  __pyx_tuple__74 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_iter_of_cons, __pyx_n_s_con); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_add_constraints, 524, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 524, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":542
 *             self.add_constraint(con)
 * 
 *     def add_generator(self, generator):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */
  __pyx_tuple__76 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_generator, __pyx_n_s_g); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_add_generator, 542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 542, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":574
 *             self.thisptr[0].add_gen(g)
 * 
 *     def add_generators(self, iter_of_gens):             # <<<<<<<<<<<<<<
 *         for gen in iter_of_gens:
 *             self.add_generator(gen)
 */
  __pyx_tuple__78 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_iter_of_gens, __pyx_n_s_gen); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_add_generators, 574, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 574, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":578
 *             self.add_generator(gen)
 * 
 *     def topological_closure_assign(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].topological_closure_assign()
 * 
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_topological_closure_assign, 578, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 578, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":581
 *         self.thisptr[0].topological_closure_assign()
 * 
 *     def unconstain(self, variable):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             v = (<Variable> variable).thisptr
 */
  __pyx_tuple__81 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_variable, __pyx_n_s_v); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_unconstain, 581, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 581, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":586
 *             self.thisptr[0].unconstrain(v[0])
 * 
 *     def unconstain_many(self, iter_of_var_or_index_set):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_iter_of_var_or_index_set); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_unconstain_many, 586, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 586, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":589
 *         pass
 * 
 *     def intersection_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_intersection_assign, 589, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 589, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":594
 *             self.thisptr[0].intersection_assign(y[0])
 * 
 *     def join_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_join_assign, 594, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 594, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":599
 *             self.thisptr[0].join_assign(y[0])
 * 
 *     def poly_hull_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_poly_hull_assign, 599, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":604
 *             self.thisptr[0].poly_hull_assign(y[0])
 * 
 *     def con_hull_assign(self, other_poly, boxed):             # <<<<<<<<<<<<<<
 *         cdef cppbool bboxed
 *         if boxed:
 */
  __pyx_tuple__88 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_other_poly, __pyx_n_s_boxed, __pyx_n_s_bboxed, __pyx_n_s_y); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_con_hull_assign, 604, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 604, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":614
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)
 * 
 *     def poly_difference_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_poly_difference_assign, 614, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 614, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":619
 *             self.thisptr[0].poly_difference_assign(y[0])
 * 
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */
  __pyx_tuple__91 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_variable, __pyx_n_s_linear_exp, __pyx_n_s_inhomogenous_term, __pyx_n_s_denominator, __pyx_n_s_var, __pyx_n_s_expr, __pyx_n_s_inhomo, __pyx_n_s_den); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_affine_image, 619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 619, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":630
 *         self.thisptr[0].affine_image(var[0], expr, inhomo, den)
 * 
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_affine_preimage, 630, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 630, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":642
 * 
 *     # TODO: Implement these
 *     def parallel_affine_image(self, args):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_args); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_parallel_affine_image, 642, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 642, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":645
 *         pass
 * 
 *     def widing_assign(self, args):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_widing_assign, 645, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 645, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":648
 *         pass
 * 
 *     def time_elapse_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_time_elapse_assign, 648, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 648, __pyx_L1_error)

  /* "pplite/polyhedron.pyx":653
 *             self.thisptr[0].time_elapse_assign(y[0])
 * 
 *     def minimize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].minimize()
 * 
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_polyhedron_pyx, __pyx_n_s_minimize, 653, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 653, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(2, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(2, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.method_name = &__pyx_n_s_keys;
  __pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_pop.method_name = &__pyx_n_s_pop;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pplite_10polyhedron_NNC_Polyhedron_spec, NULL); if (unlikely(!__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron)) __PYX_ERR(0, 14, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pplite_10polyhedron_NNC_Polyhedron_spec, __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  #else
  __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron = &__pyx_type_6pplite_10polyhedron_NNC_Polyhedron;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron->tp_dictoffset && __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 14, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_10polyhedron_14NNC_Polyhedron___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_10polyhedron_14NNC_Polyhedron___init__.doc = __pyx_doc_6pplite_10polyhedron_14NNC_Polyhedron___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_10polyhedron_14NNC_Polyhedron___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NNC_Polyhedron, (PyObject *) __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel_spec, NULL); if (unlikely(!__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel)) __PYX_ERR(0, 658, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel_spec, __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  #else
  __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel = &__pyx_type_6pplite_10polyhedron_Polyhedron_Constraint_Rel;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel->tp_dictoffset && __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Polyhedron_Constraint_Rel, (PyObject *) __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6pplite_10polyhedron_Polyhedron_Constraint_Rel) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel_spec, NULL); if (unlikely(!__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel)) __PYX_ERR(0, 664, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel_spec, __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  #else
  __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel = &__pyx_type_6pplite_10polyhedron_Polyhedron_Generator_Rel;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel->tp_dictoffset && __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Polyhedron_Generator_Rel, (PyObject *) __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6pplite_10polyhedron_Polyhedron_Generator_Rel) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("gmpy2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5gmpy2_5gmpy2_mpz = __Pyx_ImportType_3_0_11(__pyx_t_1, "gmpy2", "mpz", sizeof(MPZ_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(MPZ_Object),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5gmpy2_5gmpy2_mpz) __PYX_ERR(1, 98, __pyx_L1_error)
  __pyx_ptype_5gmpy2_5gmpy2_mpq = __Pyx_ImportType_3_0_11(__pyx_t_1, "gmpy2", "mpq", sizeof(MPQ_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(MPQ_Object),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5gmpy2_5gmpy2_mpq) __PYX_ERR(1, 100, __pyx_L1_error)
  __pyx_ptype_5gmpy2_5gmpy2_mpfr = __Pyx_ImportType_3_0_11(__pyx_t_1, "gmpy2", "mpfr", sizeof(MPFR_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(MPFR_Object),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5gmpy2_5gmpy2_mpfr) __PYX_ERR(1, 102, __pyx_L1_error)
  __pyx_ptype_5gmpy2_5gmpy2_mpc = __Pyx_ImportType_3_0_11(__pyx_t_1, "gmpy2", "mpc", sizeof(MPC_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(MPC_Object),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5gmpy2_5gmpy2_mpc) __PYX_ERR(1, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pplite.linear_algebra"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6pplite_14linear_algebra_Variable = __Pyx_ImportType_3_0_11(__pyx_t_1, "pplite.linear_algebra", "Variable", sizeof(struct __pyx_obj_6pplite_14linear_algebra_Variable), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_6pplite_14linear_algebra_Variable),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_6pplite_14linear_algebra_Variable) __PYX_ERR(3, 5, __pyx_L1_error)
  __pyx_ptype_6pplite_14linear_algebra_Linear_Expression = __Pyx_ImportType_3_0_11(__pyx_t_1, "pplite.linear_algebra", "Linear_Expression", sizeof(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_6pplite_14linear_algebra_Linear_Expression) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_6pplite_14linear_algebra_Affine_Expression = __Pyx_ImportType_3_0_11(__pyx_t_1, "pplite.linear_algebra", "Affine_Expression", sizeof(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_6pplite_14linear_algebra_Affine_Expression) __PYX_ERR(3, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pplite.constraint"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6pplite_10constraint_Constraint = __Pyx_ImportType_3_0_11(__pyx_t_1, "pplite.constraint", "Constraint", sizeof(struct __pyx_obj_6pplite_10constraint_Constraint), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_6pplite_10constraint_Constraint),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_6pplite_10constraint_Constraint) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pplite.generators"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6pplite_10generators_PPliteGenerator = __Pyx_ImportType_3_0_11(__pyx_t_1, "pplite.generators", "PPliteGenerator", sizeof(struct __pyx_obj_6pplite_10generators_PPliteGenerator), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_6pplite_10generators_PPliteGenerator),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_6pplite_10generators_PPliteGenerator) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pplite.intervals"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6pplite_9intervals_Interval = __Pyx_ImportType_3_0_11(__pyx_t_1, "pplite.intervals", "Interval", sizeof(struct __pyx_obj_6pplite_9intervals_Interval), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_6pplite_9intervals_Interval),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_6pplite_9intervals_Interval) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pplite.integer_conversions"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "FLINT_Integer_to_Python", (void (**)(void))&__pyx_f_6pplite_19integer_conversions_FLINT_Integer_to_Python, "PyObject *(pplite::FLINT_Integer &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "Python_int_to_FLINT_Integer", (void (**)(void))&__pyx_f_6pplite_19integer_conversions_Python_int_to_FLINT_Integer, "pplite::FLINT_Integer (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "FLINT_Rational_to_Python", (void (**)(void))&__pyx_f_6pplite_19integer_conversions_FLINT_Rational_to_Python, "PyObject *(pplite::FLINT_Rational &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "Python_float_to_FLINT_Rational", (void (**)(void))&__pyx_f_6pplite_19integer_conversions_Python_float_to_FLINT_Rational, "pplite::FLINT_Rational (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_polyhedron(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_polyhedron},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "polyhedron",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpolyhedron(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpolyhedron(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_polyhedron(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_polyhedron(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_polyhedron(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'polyhedron' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("polyhedron", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "polyhedron" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_polyhedron(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pplite__polyhedron) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pplite.polyhedron")) {
      if (unlikely((PyDict_SetItemString(modules, "pplite.polyhedron", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pplite/polyhedron.pyx":211
 *         raise TypeError("Comparison with NNC polys only!")
 * 
 *     def is_necessarily_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_13is_necessarily_closed, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_necessarily_cl, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_necessarily_closed, __pyx_t_2) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":214
 *         return self.thisptr[0].is_necessarily_closed()
 * 
 *     def check_inv(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].check_inv()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_15check_inv, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_check_inv, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_check_inv, __pyx_t_2) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":217
 *         return self.thisptr[0].check_inv()
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_empty()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_17is_empty, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_empty, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_empty, __pyx_t_2) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":220
 *         return self.thisptr[0].is_empty()
 * 
 *     def is_universe(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_universe()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_19is_universe, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_universe, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_universe, __pyx_t_2) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":223
 *         return self.thisptr[0].is_universe()
 * 
 *     def is_minimized(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_minimized()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_21is_minimized, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_minimized, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_minimized, __pyx_t_2) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":226
 *         return self.thisptr[0].is_minimized()
 * 
 *     def is_topologically_closed(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_topologically_closed()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_23is_topologically_closed, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_topologically, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_topologically_closed, __pyx_t_2) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":229
 *         return self.thisptr[0].is_topologically_closed()
 * 
 *     def is_bounded(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].is_bounded()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_25is_bounded, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_bounded, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_bounded, __pyx_t_2) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":232
 *         return self.thisptr[0].is_bounded()
 * 
 *     def is_bounded_expression(self, from_below, expression):             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr expr
 *         if isinstance(expression, Linear_Expression):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_27is_bounded_expression, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_bounded_expres, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_bounded_expression, __pyx_t_2) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":242
 *         return self.thisptr[0].is_bounded_expr(f_b, expr)
 * 
 *     def constrains(self,variable):             # <<<<<<<<<<<<<<
 *         cdef Var* vv
 *         if isinstance(variable, Variable):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_29constrains, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_constrains, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_constrains, __pyx_t_2) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":249
 *         raise TypeError("variable needs to be of :class:`Variable`.")
 * 
 *     def equals(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_31equals, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_equals, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_equals, __pyx_t_2) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":256
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_33contains, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_contains, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_contains, __pyx_t_2) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":263
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def strictly_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_35strictly_contains, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_strictly_contains, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_strictly_contains, __pyx_t_2) < 0) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":270
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def is_disjoint_from(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_37is_disjoint_from, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_is_disjoint_from, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_is_disjoint_from, __pyx_t_2) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":277
 *         raise TypeError("other_poly needs to be of :class:`NNC_Polyhedron`")
 * 
 *     def get_bounding_box(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_39get_bounding_box, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_get_bounding_box, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_get_bounding_box, __pyx_t_2) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":280
 *         pass
 * 
 *     def boxed_contains(self, other_poly):             # <<<<<<<<<<<<<<
 *         cdef Poly* yy
 *         if isinstance(other_poly, NNC_Polyhedron):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_41boxed_contains, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_boxed_contains, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_boxed_contains, __pyx_t_2) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":288
 * 
 *     # queries
 *     def topology(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_43topology, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_topology, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_topology, __pyx_t_2) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":291
 *         pass
 * 
 *     def space_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.space_dim()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_45space_dim, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_space_dim, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_space_dim, __pyx_t_2) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":294
 *         return self.thisptr.space_dim()
 * 
 *     def affine_dim(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].affine_dim()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_47affine_dim, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_affine_dim, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_affine_dim, __pyx_t_2) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":297
 *         return self.thisptr[0].affine_dim()
 * 
 *     def _relation_with_c(self, constraint):             # <<<<<<<<<<<<<<
 *         cdef Con cc
 *         cdef Poly_Con_Rel p_c_r
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_49_relation_with_c, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron__relation_with_c, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_relation_with_c, __pyx_t_2) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":309
 *             raise TypeError()
 * 
 *     def _relation_with_g(self, generator):             # <<<<<<<<<<<<<<
 *         cdef Gen gg
 *         cdef Poly_Gen_Rel p_g_r
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_51_relation_with_g, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron__relation_with_g, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_relation_with_g, __pyx_t_2) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":321
 *             raise TypeError("A :class:`PPliteGenerator` or a :class:`Constraint` should be passed into this method.")
 * 
 *     def relation_with(self, gen_or_constraint):             # <<<<<<<<<<<<<<
 *         try:
 *             return self._relation_with_c(gen_or_constraint)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_53relation_with, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_relation_with, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_relation_with, __pyx_t_2) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":329
 * 
 * 
 *     def min(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_55min, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_min, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_min, __pyx_t_2) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":343
 *         return self.thisptr[0].min(ae, val, included_ptr, g_ptr)
 * 
 *     def max(self, affine_expr, value, included_pointer, gen_object):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef FLINT_Rational val
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_57max, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_max, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_max, __pyx_t_2) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":357
 *         return self.thisptr[0].max(ae, val, included_ptr, g_ptr)
 * 
 *     def _get_bounds_v(self, variable):             # <<<<<<<<<<<<<<
 *         cdef Var* v
 *         cdef Itv itv
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_59_get_bounds_v, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron__get_bounds_v, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_get_bounds_v, __pyx_t_2) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":366
 *         return i
 * 
 *     def _get_bounds_ae(self, affine_expr):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr ae
 *         cdef Itv itv
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_61_get_bounds_ae, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron__get_bounds_ae, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_get_bounds_ae, __pyx_t_2) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":375
 *         return i
 * 
 *     def _get_boundes_itv(self, itv_expr):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_63_get_boundes_itv, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron__get_boundes_itv, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_get_boundes_itv, __pyx_t_2) < 0) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":378
 *         pass
 * 
 *     def get_bounds(self, variable_or_affine_expr):             # <<<<<<<<<<<<<<
 *         if isinstance(variable_or_affine_expr, Variable):
 *             return self._get_bounds_v(variable_or_affine_expr)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_65get_bounds, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_get_bounds, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_get_bounds, __pyx_t_2) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":385
 *         raise TypeError("A :class:`Variable` or a :class:`Affine_Expression` should be passed into this method.")
 * 
 *     def get_unconstrainted(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_67get_unconstrainted, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_get_unconstrainte, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_get_unconstrainted, __pyx_t_2) < 0) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":388
 *         pass
 * 
 *     def constraints(self):             # <<<<<<<<<<<<<<
 *         # Access constraints indirectly via copy_cons()
 *         # TODO: Properly implement via sys and Cons_Proxy in Poly_Impl
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_69constraints, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_constraints, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_constraints, __pyx_t_2) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":401
 *         return result
 * 
 *     def generators(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of :class:`PPliteGenerator`.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_71generators, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_generators, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_generators, __pyx_t_2) < 0) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":417
 *         return result
 * 
 *     def normalized_constraints(self):             # <<<<<<<<<<<<<<
 *         # TODO implement once Cons_Proxy is implemented.
 *         pass
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_73normalized_constraints, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_normalized_constr, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_normalized_constraints, __pyx_t_2) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":421
 *         pass
 * 
 *     def num_min_constrains(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_cons()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_75num_min_constrains, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_num_min_constrain, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_num_min_constrains, __pyx_t_2) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":424
 *         return self.thisptr[0].num_min_cons()
 * 
 *     def num_min_generators(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_min_gens()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_77num_min_generators, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_num_min_generator, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_num_min_generators, __pyx_t_2) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":427
 *         return self.thisptr[0].num_min_gens()
 * 
 *     def collapse(self, n):             # <<<<<<<<<<<<<<
 *         cdef dim_type nn
 *         if isinstance(n, int):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_79collapse, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_collapse, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_collapse, __pyx_t_2) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":433
 *         self.thisptr[0].collapse(nn)
 * 
 *     def num_disjuncts(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr[0].num_disjuncts()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_81num_disjuncts, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_num_disjuncts, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_num_disjuncts, __pyx_t_2) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":436
 *         return self.thisptr[0].num_disjuncts()
 * 
 *     def disjunct_constraints(self, n):             # <<<<<<<<<<<<<<
 *         # TODO implement once Cons_Proxy is implemented.
 *         # cdef dim_type nn
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_83disjunct_constraints, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_disjunct_constrai, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_disjunct_constraints, __pyx_t_2) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":444
 *         pass
 * 
 *     def geom_covers(self, other_poly):             # <<<<<<<<<<<<<<
 *         """
 *         Input: :class:`NNC_Polyhedron`
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_85geom_covers, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_geom_covers, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_geom_covers, __pyx_t_2) < 0) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":453
 *             return self.thisptr[0].geom_covers(y[0])
 * 
 *     def m_swap(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_87m_swap, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_m_swap, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_m_swap, __pyx_t_2) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":458
 *             self.thisptr[0].m_swap(y[0])
 * 
 *     def set_empty(self):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the :class:`NNC_Polyhedron` to empty.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_89set_empty, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_set_empty, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_set_empty, __pyx_t_2) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":464
 *         self.thisptr[0].set_empty()
 * 
 *     def set_topology(self, topology):             # <<<<<<<<<<<<<<
 *         cdef Topol tt
 *         tt = string_to_Topol(topology)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_91set_topology, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_set_topology, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_set_topology, __pyx_t_2) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":469
 *         self.thisptr[0].set_topology(tt)
 * 
 *     def add_constraint(self, constraint):             # <<<<<<<<<<<<<<
 *         r"""
 *         TESTS::
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_93add_constraint, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_add_constraint, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_add_constraint, __pyx_t_2) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":524
 *             self.thisptr[0].add_con(c)
 * 
 *     def add_constraints(self, iter_of_cons):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_95add_constraints, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_add_constraints, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_add_constraints, __pyx_t_2) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":542
 *             self.add_constraint(con)
 * 
 *     def add_generator(self, generator):             # <<<<<<<<<<<<<<
 *         """
 *         TESTS::
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_97add_generator, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_add_generator, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_add_generator, __pyx_t_2) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":574
 *             self.thisptr[0].add_gen(g)
 * 
 *     def add_generators(self, iter_of_gens):             # <<<<<<<<<<<<<<
 *         for gen in iter_of_gens:
 *             self.add_generator(gen)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_99add_generators, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_add_generators, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_add_generators, __pyx_t_2) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":578
 *             self.add_generator(gen)
 * 
 *     def topological_closure_assign(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].topological_closure_assign()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_101topological_closure_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_topological_closu, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_topological_closure_assign, __pyx_t_2) < 0) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":581
 *         self.thisptr[0].topological_closure_assign()
 * 
 *     def unconstain(self, variable):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             v = (<Variable> variable).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_103unconstain, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_unconstain, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_unconstain, __pyx_t_2) < 0) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":586
 *             self.thisptr[0].unconstrain(v[0])
 * 
 *     def unconstain_many(self, iter_of_var_or_index_set):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_105unconstain_many, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_unconstain_many, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_unconstain_many, __pyx_t_2) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":589
 *         pass
 * 
 *     def intersection_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_107intersection_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_intersection_assi, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_intersection_assign, __pyx_t_2) < 0) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":594
 *             self.thisptr[0].intersection_assign(y[0])
 * 
 *     def join_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_109join_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_join_assign, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_join_assign, __pyx_t_2) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":599
 *             self.thisptr[0].join_assign(y[0])
 * 
 *     def poly_hull_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_111poly_hull_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_poly_hull_assign, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_poly_hull_assign, __pyx_t_2) < 0) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":604
 *             self.thisptr[0].poly_hull_assign(y[0])
 * 
 *     def con_hull_assign(self, other_poly, boxed):             # <<<<<<<<<<<<<<
 *         cdef cppbool bboxed
 *         if boxed:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_113con_hull_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_con_hull_assign, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_con_hull_assign, __pyx_t_2) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":614
 *             self.thisptr[0].con_hull_assign(y[0], bboxed)
 * 
 *     def poly_difference_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_115poly_difference_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_poly_difference_a, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_poly_difference_assign, __pyx_t_2) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":619
 *             self.thisptr[0].poly_difference_assign(y[0])
 * 
 *     def affine_image(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_117affine_image, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_affine_image, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_affine_image, __pyx_t_2) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":630
 *         self.thisptr[0].affine_image(var[0], expr, inhomo, den)
 * 
 *     def affine_preimage(self, variable, linear_exp, inhomogenous_term, denominator):             # <<<<<<<<<<<<<<
 *         if isinstance(variable, Variable):
 *             var = (<Variable> variable).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_119affine_preimage, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_affine_preimage, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_affine_preimage, __pyx_t_2) < 0) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":642
 * 
 *     # TODO: Implement these
 *     def parallel_affine_image(self, args):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_121parallel_affine_image, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_parallel_affine_i, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_parallel_affine_image, __pyx_t_2) < 0) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":645
 *         pass
 * 
 *     def widing_assign(self, args):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_123widing_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_widing_assign, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_widing_assign, __pyx_t_2) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":648
 *         pass
 * 
 *     def time_elapse_assign(self, other_poly):             # <<<<<<<<<<<<<<
 *         if isinstance(other_poly, NNC_Polyhedron):
 *             y = (<NNC_Polyhedron> other_poly).thisptr
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_125time_elapse_assign, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_time_elapse_assig, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_time_elapse_assign, __pyx_t_2) < 0) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "pplite/polyhedron.pyx":653
 *             self.thisptr[0].time_elapse_assign(y[0])
 * 
 *     def minimize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].minimize()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_127minimize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron_minimize, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron, __pyx_n_s_minimize, __pyx_t_2) < 0) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pplite_10polyhedron_NNC_Polyhedron);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_129__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron___reduce_cython, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_14NNC_Polyhedron_131__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NNC_Polyhedron___setstate_cython, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Polyhedron_Constraint_Rel___redu, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_25Polyhedron_Constraint_Rel_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Polyhedron_Constraint_Rel___sets, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_24Polyhedron_Generator_Rel_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Polyhedron_Generator_Rel___reduc, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_10polyhedron_24Polyhedron_Generator_Rel_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Polyhedron_Generator_Rel___setst, NULL, __pyx_n_s_pplite_polyhedron, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pplite/polyhedron.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: libraries = gmp gmpxx pplite m flint
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_NNC_Polyhedron___init___line_94, __pyx_kp_u_TESTS_from_pplite_import_NNC_Po) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_NNC_Polyhedron_add_constraint_li, __pyx_kp_u_TESTS_from_pplite_import_NNC_Po_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_NNC_Polyhedron_add_constraints_l, __pyx_kp_u_TESTS_from_pplite_import_NNC_Po_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_NNC_Polyhedron_add_generator_lin, __pyx_kp_u_TESTS_from_pplite_import_NNC_Po_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init pplite.polyhedron", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pplite.polyhedron");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* py_dict_pop */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B3 & PY_VERSION_HEX < 0x030d0000
    if ((1)) {
        return _PyDict_Pop(d, key, default_value);
    } else
#endif
    if (default_value) {
        return __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_pop, d, key, default_value);
    } else {
        return __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_pop, d, key);
    }
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_11
#define __PYX_HAVE_RT_ImportType_3_0_11
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_11 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_11 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__106);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_11
#define __PYX_HAVE_RT_ImportFunction_3_0_11
static int __Pyx_ImportFunction_3_0_11(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
